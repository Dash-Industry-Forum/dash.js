{"version":3,"file":"dash.reporting.min.js","sourceRoot":"./src/","sources":["../node_modules/browserify/node_modules/browser-pack/_prelude.js","core/FactoryMaker.js","core/events/EventsBase.js","streaming/constants/Constants.js","streaming/metrics/MetricsReporting.js","streaming/metrics/MetricsReportingEvents.js","streaming/metrics/controllers/MetricsCollectionController.js","streaming/metrics/controllers/MetricsController.js","streaming/metrics/controllers/MetricsHandlersController.js","streaming/metrics/controllers/RangeController.js","streaming/metrics/controllers/ReportingController.js","streaming/metrics/metrics/MetricsHandlerFactory.js","streaming/metrics/metrics/handlers/BufferLevelHandler.js","streaming/metrics/metrics/handlers/DVBErrorsHandler.js","streaming/metrics/metrics/handlers/GenericMetricHandler.js","streaming/metrics/metrics/handlers/HttpListHandler.js","streaming/metrics/reporting/ReportingFactory.js","streaming/metrics/reporting/reporters/DVBReporting.js","streaming/metrics/utils/DVBErrorsTranslator.js","streaming/metrics/utils/HandlerHelpers.js","streaming/metrics/utils/ManifestParsing.js","streaming/metrics/utils/MetricSerialiser.js","streaming/metrics/utils/RNG.js","streaming/metrics/vo/DVBErrors.js","streaming/metrics/vo/Metrics.js","streaming/metrics/vo/Range.js","streaming/metrics/vo/Reporting.js","streaming/utils/CustomTimeRanges.js","streaming/utils/SupervisorTools.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @module FactoryMaker\n * @ignore\n */\nconst FactoryMaker = (function () {\n\n    let instance;\n    let singletonContexts = [];\n    const singletonFactories = {};\n    const classFactories = {};\n\n    function extend(name, childInstance, override, context) {\n        if (!context[name] && childInstance) {\n            context[name] = {\n                instance: childInstance,\n                override: override\n            };\n        }\n    }\n\n    /**\n     * Use this method from your extended object.  this.factory is injected into your object.\n     * this.factory.getSingletonInstance(this.context, 'VideoModel')\n     * will return the video model for use in the extended object.\n     *\n     * @param {Object} context - injected into extended object as this.context\n     * @param {string} className - string name found in all dash.js objects\n     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.\n     * @returns {*} Context aware instance of specified singleton name.\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function getSingletonInstance(context, className) {\n        for (const i in singletonContexts) {\n            const obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                return obj.instance;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.\n     *\n     * @param {Object} context\n     * @param {string} className\n     * @param {Object} instance\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function setSingletonInstance(context, className, instance) {\n        for (const i in singletonContexts) {\n            const obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                singletonContexts[i].instance = instance;\n                return;\n            }\n        }\n        singletonContexts.push({\n            name: className,\n            context: context,\n            instance: instance\n        });\n    }\n\n    /**\n     * Use this method to remove all singleton instances associated with a particular context.\n     *\n     * @param {Object} context\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function deleteSingletonInstances(context) {\n        singletonContexts = singletonContexts.filter(x => x.context !== context);\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Factories storage Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function getFactoryByName(name, factoriesArray) {\n        return factoriesArray[name];\n    }\n\n    function updateFactory(name, factory, factoriesArray) {\n        if (name in factoriesArray) {\n            factoriesArray[name] = factory;\n        }\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Class Factories Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateClassFactory(name, factory) {\n        updateFactory(name, factory, classFactories);\n    }\n\n    function getClassFactoryByName(name) {\n        return getFactoryByName(name, classFactories);\n    }\n\n    function getClassFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);\n\n        if (!factory) {\n            factory = function (context) {\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    create: function () {\n                        return merge(classConstructor, context, arguments);\n                    }\n                };\n            };\n\n            classFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\n        }\n        return factory;\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Singleton Factory MAangement\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateSingletonFactory(name, factory) {\n        updateFactory(name, factory, singletonFactories);\n    }\n\n    function getSingletonFactoryByName(name) {\n        return getFactoryByName(name, singletonFactories);\n    }\n\n    function getSingletonFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);\n        if (!factory) {\n            factory = function (context) {\n                let instance;\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    getInstance: function () {\n                        // If we don't have an instance yet check for one on the context\n                        if (!instance) {\n                            instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);\n                        }\n                        // If there's no instance on the context then create one\n                        if (!instance) {\n                            instance = merge(classConstructor, context, arguments);\n                            singletonContexts.push({\n                                name: classConstructor.__dashjs_factory_name,\n                                context: context,\n                                instance: instance\n                            });\n                        }\n                        return instance;\n                    }\n                };\n            };\n            singletonFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\n        }\n\n        return factory;\n    }\n\n    function merge(classConstructor, context, args) {\n\n        let classInstance;\n        const className = classConstructor.__dashjs_factory_name;\n        const extensionObject = context[className];\n\n        if (extensionObject) {\n\n            let extension = extensionObject.instance;\n\n            if (extensionObject.override) { //Override public methods in parent but keep parent.\n\n                classInstance = classConstructor.apply({context}, args);\n                extension = extension.apply({\n                    context,\n                    factory: instance,\n                    parent: classInstance\n                }, args);\n\n                for (const prop in extension) {\n                    if (classInstance.hasOwnProperty(prop)) {\n                        classInstance[prop] = extension[prop];\n                    }\n                }\n\n            } else { //replace parent object completely with new object. Same as dijon.\n\n                return extension.apply({\n                    context,\n                    factory: instance\n                }, args);\n\n            }\n        } else {\n            // Create new instance of the class\n            classInstance = classConstructor.apply({context}, args);\n        }\n\n        // Add getClassName function to class instance prototype (used by Debug)\n        classInstance.getClassName = function () {return className;};\n\n        return classInstance;\n    }\n\n    instance = {\n        extend: extend,\n        getSingletonInstance: getSingletonInstance,\n        setSingletonInstance: setSingletonInstance,\n        deleteSingletonInstances: deleteSingletonInstances,\n        getSingletonFactory: getSingletonFactory,\n        getSingletonFactoryByName: getSingletonFactoryByName,\n        updateSingletonFactory: updateSingletonFactory,\n        getClassFactory: getClassFactory,\n        getClassFactoryByName: getClassFactoryByName,\n        updateClassFactory: updateClassFactory\n    };\n\n    return instance;\n\n}());\n\nexport default FactoryMaker;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass EventsBase {\n    extend (events, config) {\n        if (!events) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const evt in events) {\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\n            this[evt] = events[evt];\n\n        }\n    }\n}\n\nexport default EventsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Constants declaration\n * @class\n * @ignore\n * @hideconstructor\n */\nclass Constants {\n\n    init() {\n        /**\n         *  @constant {string} STREAM Stream media type. Mainly used to report metrics relative to the full stream\n         *  @memberof Constants#\n         *  @static\n         */\n        this.STREAM = 'stream';\n\n        /**\n         *  @constant {string} VIDEO Video media type\n         *  @memberof Constants#\n         *  @static\n         */\n        this.VIDEO = 'video';\n\n        /**\n         *  @constant {string} AUDIO Audio media type\n         *  @memberof Constants#\n         *  @static\n         */\n        this.AUDIO = 'audio';\n\n        /**\n         *  @constant {string} TEXT Text media type\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TEXT = 'text';\n\n        /**\n         *  @constant {string} FRAGMENTED_TEXT Fragmented text media type\n         *  @memberof Constants#\n         *  @static\n         */\n        this.FRAGMENTED_TEXT = 'fragmentedText';\n\n        /**\n         *  @constant {string} EMBEDDED_TEXT Embedded text media type\n         *  @memberof Constants#\n         *  @static\n         */\n        this.EMBEDDED_TEXT = 'embeddedText';\n\n        /**\n         *  @constant {string} MUXED Muxed (video/audio in the same chunk) media type\n         *  @memberof Constants#\n         *  @static\n         */\n        this.MUXED = 'muxed';\n\n        /**\n         *  @constant {string} IMAGE Image media type\n         *  @memberof Constants#\n         *  @static\n         */\n        this.IMAGE = 'image';\n\n        /**\n         *  @constant {string} STPP STTP Subtitles format\n         *  @memberof Constants#\n         *  @static\n         */\n        this.STPP = 'stpp';\n\n        /**\n         *  @constant {string} TTML STTP Subtitles format\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TTML = 'ttml';\n\n        /**\n         *  @constant {string} VTT STTP Subtitles format\n         *  @memberof Constants#\n         *  @static\n         */\n        this.VTT = 'vtt';\n\n        /**\n         *  @constant {string} WVTT STTP Subtitles format\n         *  @memberof Constants#\n         *  @static\n         */\n        this.WVTT = 'wvtt';\n\n        /**\n         *  @constant {string} ABR_STRATEGY_DYNAMIC Dynamic Adaptive bitrate algorithm\n         *  @memberof Constants#\n         *  @static\n         */\n        this.ABR_STRATEGY_DYNAMIC = 'abrDynamic';\n\n        /**\n         *  @constant {string} ABR_STRATEGY_BOLA Adaptive bitrate algorithm based on Bola (buffer level)\n         *  @memberof Constants#\n         *  @static\n         */\n        this.ABR_STRATEGY_BOLA = 'abrBola';\n\n        /**\n         *  @constant {string} ABR_STRATEGY_L2A Adaptive bitrate algorithm based on L2A (online learning)\n         *  @memberof Constants#\n         *  @static\n         */\n        this.ABR_STRATEGY_L2A = 'abrL2A';\n\n        /**\n         *  @constant {string} ABR_STRATEGY_LoLP Adaptive bitrate algorithm based on LoL+\n         *  @memberof Constants#\n         *  @static\n         */\n        this.ABR_STRATEGY_LoLP = 'abrLoLP';\n\n        /**\n         *  @constant {string} ABR_STRATEGY_THROUGHPUT Adaptive bitrate algorithm based on throughput\n         *  @memberof Constants#\n         *  @static\n         */\n        this.ABR_STRATEGY_THROUGHPUT = 'abrThroughput';\n\n        /**\n         *  @constant {string} ABR_FETCH_THROUGHPUT_CALUCUALTION_DOWNLOADED_DATA Throughput calculation based on downloaded data array\n         *  @memberof Constants#\n         *  @static\n         */\n        this.ABR_FETCH_THROUGHPUT_CALCULATION_DOWNLOADED_DATA = 'abrFetchThroughputCalculationDownloadedData';\n\n        /**\n         *  @constant {string} ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING Throughput calculation based on moof parsing\n         *  @memberof Constants#\n         *  @static\n         */\n        this.ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING = 'abrFetchThroughputCalculationMoofParsing';\n\n        /**\n         *  @constant {string} LIVE_CATCHUP_MODE_DEFAULT Throughput calculation based on moof parsing\n         *  @memberof Constants#\n         *  @static\n         */\n        this.LIVE_CATCHUP_MODE_DEFAULT = 'liveCatchupModeDefault';\n\n        /**\n         *  @constant {string} LIVE_CATCHUP_MODE_LOLP Throughput calculation based on moof parsing\n         *  @memberof Constants#\n         *  @static\n         */\n        this.LIVE_CATCHUP_MODE_LOLP = 'liveCatchupModeLoLP';\n\n        /**\n         *  @constant {string} MOVING_AVERAGE_SLIDING_WINDOW Moving average sliding window\n         *  @memberof Constants#\n         *  @static\n         */\n        this.MOVING_AVERAGE_SLIDING_WINDOW = 'slidingWindow';\n\n        /**\n         *  @constant {string} EWMA Exponential moving average\n         *  @memberof Constants#\n         *  @static\n         */\n        this.MOVING_AVERAGE_EWMA = 'ewma';\n\n        /**\n         *  @constant {string} BAD_ARGUMENT_ERROR Invalid Arguments type of error\n         *  @memberof Constants#\n         *  @static\n         */\n        this.BAD_ARGUMENT_ERROR = 'Invalid Arguments';\n\n        /**\n         *  @constant {string} MISSING_CONFIG_ERROR Missing configuration parameters type of error\n         *  @memberof Constants#\n         *  @static\n         */\n        this.MISSING_CONFIG_ERROR = 'Missing config parameter(s)';\n\n        /**\n         *  @constant {string} TRACK_SWITCH_MODE_ALWAYS_REPLACE used to clear the buffered data (prior to current playback position) after track switch. Default for audio\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TRACK_SWITCH_MODE_ALWAYS_REPLACE = 'alwaysReplace';\n\n        /**\n         *  @constant {string} TRACK_SWITCH_MODE_NEVER_REPLACE used to forbid clearing the buffered data (prior to current playback position) after track switch. Defers to fastSwitchEnabled for placement of new data. Default for video\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TRACK_SWITCH_MODE_NEVER_REPLACE = 'neverReplace';\n\n        /**\n         *  @constant {string} TRACK_SELECTION_MODE_HIGHEST_BITRATE makes the player select the track with a highest bitrate. This mode is a default mode.\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TRACK_SELECTION_MODE_HIGHEST_BITRATE = 'highestBitrate';\n\n        /**\n         *  @constant {string} TRACK_SELECTION_MODE_WIDEST_RANGE this mode makes the player select the track with a widest range of bitrates\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TRACK_SELECTION_MODE_WIDEST_RANGE = 'widestRange';\n\n        this.LOCATION = 'Location';\n        this.INITIALIZE = 'initialize';\n        this.TEXT_SHOWING = 'showing';\n        this.TEXT_HIDDEN = 'hidden';\n        this.CC1 = 'CC1';\n        this.CC3 = 'CC3';\n        this.UTF8 = 'utf-8';\n        this.SCHEME_ID_URI = 'schemeIdUri';\n        this.START_TIME = 'starttime';\n        this.SERVICE_DESCRIPTION_LL_SCHEME = 'urn:dvb:dash:lowlatency:scope:2019';\n        this.SUPPLEMENTAL_PROPERTY_LL_SCHEME = 'urn:dvb:dash:lowlatency:critical:2019';\n        this.XML = 'XML';\n        this.ARRAY_BUFFER = 'ArrayBuffer';\n        this.DVB_REPORTING_URL = 'dvb:reportingUrl';\n        this.DVB_PROBABILITY = 'dvb:probability';\n    }\n\n    constructor() {\n        this.init();\n    }\n}\n\nconst constants = new Constants();\nexport default constants;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DVBErrorsTranslator from './utils/DVBErrorsTranslator';\nimport MetricsReportingEvents from './MetricsReportingEvents';\nimport MetricsCollectionController from './controllers/MetricsCollectionController';\nimport MetricsHandlerFactory from './metrics/MetricsHandlerFactory';\nimport ReportingFactory from './reporting/ReportingFactory';\n\nfunction MetricsReporting() {\n\n    let context = this.context;\n    let instance,\n        dvbErrorsTranslator;\n\n    /**\n     * Create a MetricsCollectionController, and a DVBErrorsTranslator\n     * @param {Object} config - dependancies from owner\n     * @return {MetricsCollectionController} Metrics Collection Controller\n     */\n    function createMetricsReporting(config) {\n        dvbErrorsTranslator = DVBErrorsTranslator(context).getInstance({\n            eventBus: config.eventBus,\n            dashMetrics: config.dashMetrics,\n            metricsConstants: config.metricsConstants,\n            events: config.events\n        });\n\n        return MetricsCollectionController(context).create(config);\n    }\n\n    /**\n     * Get the ReportingFactory to allow new reporters to be registered\n     * @return {ReportingFactory} Reporting Factory\n     */\n    function getReportingFactory() {\n        return ReportingFactory(context).getInstance();\n    }\n\n    /**\n     * Get the MetricsHandlerFactory to allow new handlers to be registered\n     * @return {MetricsHandlerFactory} Metrics Handler Factory\n     */\n    function getMetricsHandlerFactory() {\n        return MetricsHandlerFactory(context).getInstance();\n    }\n\n    instance = {\n        createMetricsReporting:     createMetricsReporting,\n        getReportingFactory:        getReportingFactory,\n        getMetricsHandlerFactory:   getMetricsHandlerFactory\n    };\n\n    return instance;\n}\n\nMetricsReporting.__dashjs_factory_name = 'MetricsReporting';\nconst factory = dashjs.FactoryMaker.getClassFactory(MetricsReporting); /* jshint ignore:line */\nfactory.events = MetricsReportingEvents;\ndashjs.FactoryMaker.updateClassFactory(MetricsReporting.__dashjs_factory_name, factory); /* jshint ignore:line */\nexport default factory;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../../core/events/EventsBase';\n\nclass MetricsReportingEvents extends EventsBase {\n    constructor () {\n        super();\n\n        this.METRICS_INITIALISATION_COMPLETE = 'internal_metricsReportingInitialized';\n        this.BECAME_REPORTING_PLAYER = 'internal_becameReportingPlayer';\n\n        /**\n         * Triggered when CMCD data was generated for a HTTP request\n         * @event MetricsReportingEvents#CMCD_DATA_GENERATED\n         */\n        this.CMCD_DATA_GENERATED = 'cmcdDataGenerated';\n    }\n}\n\nlet metricsReportingEvents = new MetricsReportingEvents();\nexport default metricsReportingEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsController from './MetricsController';\nimport ManifestParsing from '../utils/ManifestParsing';\nimport MetricsReportingEvents from '../MetricsReportingEvents';\n\nfunction MetricsCollectionController(config) {\n\n    config = config || {};\n    let instance;\n    let metricsControllers = {};\n    let context = this.context;\n    let eventBus = config.eventBus;\n    const events = config.events;\n\n    function update(e) {\n        if (e.error) {\n            return;\n        }\n\n        // start by assuming all existing controllers need removing\n        let controllersToRemove = Object.keys(metricsControllers);\n\n        const metrics = ManifestParsing(context).getInstance({\n            adapter: config.adapter,\n            constants: config.constants\n        }).getMetrics(e.manifest);\n\n        metrics.forEach(m => {\n            const key = JSON.stringify(m);\n\n            if (!metricsControllers.hasOwnProperty(key)) {\n                try {\n                    let controller = MetricsController(context).create(config);\n                    controller.initialize(m);\n                    metricsControllers[key] = controller;\n                } catch (e) {\n                    // fail quietly\n                }\n            } else {\n                // we still need this controller - delete from removal list\n                controllersToRemove.splice(key, 1);\n            }\n        });\n\n        // now remove the unwanted controllers\n        controllersToRemove.forEach(c => {\n            metricsControllers[c].reset();\n            delete metricsControllers[c];\n        });\n\n        eventBus.trigger(MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE);\n    }\n\n    function resetMetricsControllers() {\n        Object.keys(metricsControllers).forEach(key => {\n            metricsControllers[key].reset();\n        });\n\n        metricsControllers = {};\n    }\n\n    function setup() {\n        eventBus.on(events.MANIFEST_UPDATED, update, instance);\n        eventBus.on(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers, instance);\n    }\n\n    function reset() {\n        eventBus.off(events.MANIFEST_UPDATED, update, instance);\n        eventBus.off(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers, instance);\n    }\n\n    instance = {\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nMetricsCollectionController.__dashjs_factory_name = 'MetricsCollectionController';\nexport default dashjs.FactoryMaker.getClassFactory(MetricsCollectionController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport RangeController from './RangeController';\nimport ReportingController from './ReportingController';\nimport MetricsHandlersController from './MetricsHandlersController';\n\nfunction MetricsController(config) {\n\n    config = config || {};\n    let metricsHandlersController,\n        reportingController,\n        rangeController,\n        instance;\n\n    let context = this.context;\n\n    function initialize(metricsEntry) {\n        try {\n            rangeController = RangeController(context).create({\n                mediaElement: config.mediaElement\n            });\n\n            rangeController.initialize(metricsEntry.Range);\n\n            reportingController = ReportingController(context).create({\n                debug: config.debug,\n                metricsConstants: config.metricsConstants\n            });\n\n            reportingController.initialize(metricsEntry.Reporting, rangeController);\n\n            metricsHandlersController = MetricsHandlersController(context).create({\n                debug: config.debug,\n                eventBus: config.eventBus,\n                metricsConstants: config.metricsConstants,\n                events: config.events\n            });\n\n            metricsHandlersController.initialize(metricsEntry.metrics, reportingController);\n        } catch (e) {\n            reset();\n            throw e;\n        }\n    }\n\n    function reset() {\n        if (metricsHandlersController) {\n            metricsHandlersController.reset();\n        }\n\n        if (reportingController) {\n            reportingController.reset();\n        }\n\n        if (rangeController) {\n            rangeController.reset();\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset\n    };\n\n    return instance;\n}\n\nMetricsController.__dashjs_factory_name = 'MetricsController';\nexport default dashjs.FactoryMaker.getClassFactory(MetricsController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsHandlerFactory from '../metrics/MetricsHandlerFactory';\n\nfunction MetricsHandlersController(config) {\n\n    config = config || {};\n    let handlers = [];\n\n    let instance;\n    const context = this.context;\n    const eventBus = config.eventBus;\n    const Events = config.events;\n\n    let metricsHandlerFactory = MetricsHandlerFactory(context).getInstance({\n        debug: config.debug,\n        eventBus: config.eventBus,\n        metricsConstants: config.metricsConstants\n    });\n\n    function handle(e) {\n        handlers.forEach(handler => {\n            handler.handleNewMetric(e.metric, e.value, e.mediaType);\n        });\n    }\n\n    function initialize(metrics, reportingController) {\n        metrics.split(',').forEach(\n            (m, midx, ms) => {\n                let handler;\n\n                // there is a bug in ISO23009-1 where the metrics attribute\n                // is a comma-separated list but HttpList key can contain a\n                // comma enclosed by ().\n                if ((m.indexOf('(') !== -1) && m.indexOf(')') === -1) {\n                    let nextm = ms[midx + 1];\n\n                    if (nextm &&\n                            (nextm.indexOf('(') === -1) &&\n                            (nextm.indexOf(')') !== -1)) {\n                        m += ',' + nextm;\n\n                        // delete the next metric so forEach does not visit.\n                        delete ms[midx + 1];\n                    }\n                }\n\n                handler = metricsHandlerFactory.create(\n                    m,\n                    reportingController\n                );\n\n                if (handler) {\n                    handlers.push(handler);\n                }\n            }\n        );\n\n        eventBus.on(\n            Events.METRIC_ADDED,\n            handle,\n            instance\n        );\n\n        eventBus.on(\n            Events.METRIC_UPDATED,\n            handle,\n            instance\n        );\n    }\n\n    function reset() {\n        eventBus.off(\n            Events.METRIC_ADDED,\n            handle,\n            instance\n        );\n\n        eventBus.off(\n            Events.METRIC_UPDATED,\n            handle,\n            instance\n        );\n\n        handlers.forEach(handler => handler.reset());\n\n        handlers = [];\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset\n    };\n\n    return instance;\n}\n\nMetricsHandlersController.__dashjs_factory_name = 'MetricsHandlersController';\nexport default dashjs.FactoryMaker.getClassFactory(MetricsHandlersController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport CustomTimeRanges from '../../utils/CustomTimeRanges';\n\nfunction RangeController(config) {\n\n    config = config || {};\n    let useWallClockTime = false;\n    let context = this.context;\n    let instance,\n        ranges;\n\n    let mediaElement = config.mediaElement;\n\n    function initialize(rs) {\n        if (rs && rs.length) {\n            rs.forEach(r => {\n                let start = r.starttime;\n                let end = start + r.duration;\n\n                ranges.add(start, end);\n            });\n\n            useWallClockTime = !!rs[0]._useWallClockTime;\n        }\n    }\n\n    function reset() {\n        ranges.clear();\n    }\n\n    function setup() {\n        ranges = CustomTimeRanges(context).create();\n    }\n\n    function isEnabled() {\n        let numRanges = ranges.length;\n        let time;\n\n        if (!numRanges) {\n            return true;\n        }\n\n        // When not present, DASH Metrics reporting is requested\n        // for the whole duration of the content.\n        time = useWallClockTime ?\n                (new Date().getTime() / 1000) :\n                mediaElement.currentTime;\n\n        for (let i = 0; i < numRanges; i += 1) {\n            let start = ranges.start(i);\n            let end = ranges.end(i);\n\n            if ((start <= time) && (time < end)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset,\n        isEnabled:  isEnabled\n    };\n\n    setup();\n\n    return instance;\n}\n\nRangeController.__dashjs_factory_name = 'RangeController';\nexport default dashjs.FactoryMaker.getClassFactory(RangeController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport ReportingFactory from '../reporting/ReportingFactory';\n\nfunction ReportingController(config) {\n\n    let reporters = [];\n    let instance;\n\n    const reportingFactory = ReportingFactory(this.context).getInstance(config);\n\n    function initialize(reporting, rangeController) {\n        // \"if multiple Reporting elements are present, it is expected that\n        // the client processes one of the recognized reporting schemes.\"\n        // to ignore this, and support multiple Reporting per Metric,\n        // simply change the 'some' below to 'forEach'\n        reporting.some(r => {\n            let reporter = reportingFactory.create(r, rangeController);\n\n            if (reporter) {\n                reporters.push(reporter);\n                return true;\n            }\n        });\n    }\n\n    function reset() {\n        reporters.forEach(r => r.reset());\n        reporters = [];\n    }\n\n    function report(type, vos) {\n        reporters.forEach(r => r.report(type, vos));\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset,\n        report:     report\n    };\n\n    return instance;\n}\n\nReportingController.__dashjs_factory_name = 'ReportingController';\nexport default dashjs.FactoryMaker.getClassFactory(ReportingController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport BufferLevel from './handlers/BufferLevelHandler';\nimport DVBErrors from './handlers/DVBErrorsHandler';\nimport HttpList from './handlers/HttpListHandler';\nimport GenericMetricHandler from './handlers/GenericMetricHandler';\n\nfunction MetricsHandlerFactory(config) {\n\n    config = config || {};\n    let instance;\n    const logger = config.debug ? config.debug.getLogger(instance) : {};\n\n    // group 1: key, [group 3: n [, group 5: type]]\n    let keyRegex = /([a-zA-Z]*)(\\(([0-9]*)(\\,\\s*([a-zA-Z]*))?\\))?/;\n\n    const context = this.context;\n    let knownFactoryProducts = {\n        BufferLevel:    BufferLevel,\n        DVBErrors:      DVBErrors,\n        HttpList:       HttpList,\n        PlayList:       GenericMetricHandler,\n        RepSwitchList:  GenericMetricHandler,\n        TcpList:        GenericMetricHandler\n    };\n\n    function create(listType, reportingController) {\n        var matches = listType.match(keyRegex);\n        var handler;\n\n        if (!matches) {\n            return;\n        }\n\n        try {\n            handler = knownFactoryProducts[matches[1]](context).create({\n                eventBus: config.eventBus,\n                metricsConstants: config.metricsConstants\n            });\n\n            handler.initialize(\n                matches[1],\n                reportingController,\n                matches[3],\n                matches[5]\n            );\n        } catch (e) {\n            handler = null;\n            logger.error(`MetricsHandlerFactory: Could not create handler for type ${matches[1]} with args ${matches[3]}, ${matches[5]} (${e.message})`);\n        }\n\n        return handler;\n    }\n\n    function register(key, handler) {\n        knownFactoryProducts[key] = handler;\n    }\n\n    function unregister(key) {\n        delete knownFactoryProducts[key];\n    }\n\n    instance = {\n        create:     create,\n        register:   register,\n        unregister: unregister\n    };\n\n    return instance;\n}\n\nMetricsHandlerFactory.__dashjs_factory_name = 'MetricsHandlerFactory';\nexport default dashjs.FactoryMaker.getSingletonFactory(MetricsHandlerFactory); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport HandlerHelpers from '../../utils/HandlerHelpers';\n\nfunction BufferLevelHandler(config) {\n\n    config = config || {};\n    let instance,\n        reportingController,\n        n,\n        name,\n        interval,\n        lastReportedTime;\n\n    let context = this.context;\n    let handlerHelpers = HandlerHelpers(context).getInstance();\n\n    let storedVOs = [];\n\n    const metricsConstants = config.metricsConstants;\n\n    function getLowestBufferLevelVO() {\n        try {\n            return Object.keys(storedVOs).map(\n                key => storedVOs[key]\n            ).reduce(\n                (a, b) => {\n                    return (a.level < b.level) ? a : b;\n                }\n            );\n        } catch (e) {\n            return;\n        }\n    }\n\n    function intervalCallback() {\n        let vo = getLowestBufferLevelVO();\n\n        if (vo) {\n            if (lastReportedTime !== vo.t) {\n                lastReportedTime = vo.t;\n                reportingController.report(name, vo);\n            }\n        }\n    }\n\n    function initialize(basename, rc, n_ms) {\n        if (rc) {\n            // this will throw if n is invalid, to be\n            // caught by the initialize caller.\n            n = handlerHelpers.validateN(n_ms);\n            reportingController = rc;\n            name = handlerHelpers.reconstructFullMetricName(basename, n_ms);\n            interval = setInterval(intervalCallback, n);\n        }\n    }\n\n    function reset() {\n        clearInterval(interval);\n        interval = null;\n        n = 0;\n        reportingController = null;\n        lastReportedTime = null;\n    }\n\n    function handleNewMetric(metric, vo, type) {\n        if (metric === metricsConstants.BUFFER_LEVEL) {\n            storedVOs[type] = vo;\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nBufferLevelHandler.__dashjs_factory_name = 'BufferLevelHandler';\nexport default dashjs.FactoryMaker.getClassFactory(BufferLevelHandler); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsReportingEvents from '../../MetricsReportingEvents';\n\nfunction DVBErrorsHandler(config) {\n\n    config = config || {};\n    let instance,\n        reportingController;\n\n    let eventBus = config.eventBus;\n    const metricsConstants = config.metricsConstants;\n\n    function onInitialisationComplete() {\n        // we only want to report this once per call to initialize\n        eventBus.off(\n            MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\n            onInitialisationComplete,\n            this\n        );\n\n        // Note: A Player becoming a reporting Player is itself\n        // something which is recorded by the DVBErrors metric.\n        eventBus.trigger(MetricsReportingEvents.BECAME_REPORTING_PLAYER);\n    }\n\n    function initialize(unused, rc) {\n        if (rc) {\n            reportingController = rc;\n\n            eventBus.on(\n                MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\n                onInitialisationComplete,\n                this\n            );\n        }\n    }\n\n    function reset() {\n        reportingController = null;\n    }\n\n    function handleNewMetric(metric, vo) {\n        // simply pass metric straight through\n        if (metric === metricsConstants.DVB_ERRORS) {\n            if (reportingController) {\n                reportingController.report(metric, vo);\n            }\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nexport default dashjs.FactoryMaker.getClassFactory(DVBErrorsHandler); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n /**\n  * @ignore\n  */\nfunction GenericMetricHandler() {\n\n    let instance,\n        metricName,\n        reportingController;\n\n    function initialize(name, rc) {\n        metricName = name;\n        reportingController = rc;\n    }\n\n    function reset() {\n        reportingController = null;\n        metricName = undefined;\n    }\n\n    function handleNewMetric(metric, vo) {\n        // simply pass metric straight through\n        if (metric === metricName) {\n            if (reportingController) {\n                reportingController.report(metricName, vo);\n            }\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nGenericMetricHandler.__dashjs_factory_name = 'GenericMetricHandler';\nexport default dashjs.FactoryMaker.getClassFactory(GenericMetricHandler); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport HandlerHelpers from '../../utils/HandlerHelpers';\n\nfunction HttpListHandler(config) {\n\n    config = config || {};\n    let instance,\n        reportingController,\n        n,\n        type,\n        name,\n        interval;\n\n    let storedVos = [];\n\n    let handlerHelpers = HandlerHelpers(this.context).getInstance();\n\n    const metricsConstants = config.metricsConstants;\n\n    function intervalCallback() {\n        var vos = storedVos;\n\n        if (vos.length) {\n            if (reportingController) {\n                reportingController.report(name, vos);\n            }\n        }\n\n        storedVos = [];\n    }\n\n    function initialize(basename, rc, n_ms, requestType) {\n        if (rc) {\n\n            // this will throw if n is invalid, to be\n            // caught by the initialize caller.\n            n = handlerHelpers.validateN(n_ms);\n\n            reportingController = rc;\n\n            if (requestType && requestType.length) {\n                type = requestType;\n            }\n\n            name = handlerHelpers.reconstructFullMetricName(\n                basename,\n                n_ms,\n                requestType\n            );\n\n            interval = setInterval(intervalCallback, n);\n        }\n    }\n\n    function reset() {\n        clearInterval(interval);\n        interval = null;\n        n = null;\n        type = null;\n        storedVos = [];\n        reportingController = null;\n    }\n\n    function handleNewMetric(metric, vo) {\n        if (metric === metricsConstants.HTTP_REQUEST) {\n            if (!type || (type === vo.type)) {\n                storedVos.push(vo);\n            }\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nHttpListHandler.__dashjs_factory_name = 'HttpListHandler';\nexport default dashjs.FactoryMaker.getClassFactory(HttpListHandler); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DVBReporting from './reporters/DVBReporting';\n\nfunction ReportingFactory(config) {\n    config = config || {};\n\n    const knownReportingSchemeIdUris = {\n        'urn:dvb:dash:reporting:2014': DVBReporting\n    };\n\n    const context = this.context;\n    let instance;\n    const logger = config.debug ? config.debug.getLogger(instance) : {};\n    const metricsConstants = config.metricsConstants;\n\n    function create(entry, rangeController) {\n        let reporting;\n\n        try {\n            reporting = knownReportingSchemeIdUris[entry.schemeIdUri](context).create({\n                metricsConstants: metricsConstants\n            });\n\n            reporting.initialize(entry, rangeController);\n        } catch (e) {\n            reporting = null;\n            logger.error(`ReportingFactory: could not create Reporting with schemeIdUri ${entry.schemeIdUri} (${e.message})`);\n        }\n\n        return reporting;\n    }\n\n    function register(schemeIdUri, moduleName) {\n        knownReportingSchemeIdUris[schemeIdUri] = moduleName;\n    }\n\n    function unregister(schemeIdUri) {\n        delete knownReportingSchemeIdUris[schemeIdUri];\n    }\n\n    instance = {\n        create:     create,\n        register:   register,\n        unregister: unregister\n    };\n\n    return instance;\n}\n\nReportingFactory.__dashjs_factory_name = 'ReportingFactory';\nexport default dashjs.FactoryMaker.getSingletonFactory(ReportingFactory); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricSerialiser from '../../utils/MetricSerialiser';\nimport RNG from '../../utils/RNG';\n\nfunction DVBReporting(config) {\n    config = config || {};\n    let instance;\n\n    let context = this.context;\n    let metricSerialiser,\n        randomNumberGenerator,\n        reportingPlayerStatusDecided,\n        isReportingPlayer,\n        reportingUrl,\n        rangeController;\n\n    let USE_DRAFT_DVB_SPEC = true;\n    let allowPendingRequestsToCompleteOnReset = true;\n    let pendingRequests = [];\n\n    const metricsConstants = config.metricsConstants;\n\n    function setup() {\n        metricSerialiser = MetricSerialiser(context).getInstance();\n        randomNumberGenerator = RNG(context).getInstance();\n\n        resetInitialSettings();\n    }\n\n    function doGetRequest(url, successCB, failureCB) {\n        let req = new XMLHttpRequest();\n        const oncomplete = function () {\n            let reqIndex = pendingRequests.indexOf(req);\n\n            if (reqIndex === -1) {\n                return;\n            } else {\n                pendingRequests.splice(reqIndex, 1);\n            }\n\n            if ((req.status >= 200) && (req.status < 300)) {\n                if (successCB) {\n                    successCB();\n                }\n            } else {\n                if (failureCB) {\n                    failureCB();\n                }\n            }\n        };\n\n        pendingRequests.push(req);\n\n        try {\n            req.open('GET', url);\n            req.onloadend = oncomplete;\n            req.onerror = oncomplete;\n            req.send();\n        } catch (e) {\n            req.onerror();\n        }\n    }\n\n    function report(type, vos) {\n        if (!Array.isArray(vos)) {\n            vos = [vos];\n        }\n\n        // If the Player is not a reporting Player, then the Player shall\n        // not report any errors.\n        // ... In addition to any time restrictions specified by a Range\n        // element within the Metrics element.\n        if (isReportingPlayer && rangeController.isEnabled()) {\n\n            // This reporting mechanism operates by creating one HTTP GET\n            // request for every entry in the top level list of the metric.\n            vos.forEach(function (vo) {\n                let url = metricSerialiser.serialise(vo);\n\n                // this has been proposed for errata\n                if (USE_DRAFT_DVB_SPEC && (type !== metricsConstants.DVB_ERRORS)) {\n                    url = `metricname=${type}&${url}`;\n                }\n\n                // Take the value of the @reportingUrl attribute, append a\n                // question mark ('?') character and then append the string\n                // created in the previous step.\n                url = `${reportingUrl}?${url}`;\n\n                // Make an HTTP GET request to the URL contained within the\n                // string created in the previous step.\n                doGetRequest(url, null, function () {\n                    // If the Player is unable to make the report, for\n                    // example because the @reportingUrl is invalid, the\n                    // host cannot be reached, or an HTTP status code other\n                    // than one in the 200 series is received, the Player\n                    // shall cease being a reporting Player for the\n                    // duration of the MPD.\n                    isReportingPlayer = false;\n                });\n            });\n        }\n    }\n\n    function initialize(entry, rc) {\n        let probability;\n\n        rangeController = rc;\n\n        reportingUrl = entry.dvb_reportingUrl;\n\n        // If a required attribute is missing, the Reporting descriptor may\n        // be ignored by the Player\n        if (!reportingUrl) {\n            throw new Error(\n                'required parameter missing (dvb:reportingUrl)'\n            );\n        }\n\n        // A Player's status, as a reporting Player or not, shall remain\n        // static for the duration of the MPD, regardless of MPD updates.\n        // (i.e. only calling reset (or failure) changes this state)\n        if (!reportingPlayerStatusDecided) {\n            probability = entry.dvb_probability;\n            // TS 103 285 Clause 10.12.3.4\n            // If the @probability attribute is set to 1000, it shall be a reporting Player.\n            // If the @probability attribute is absent it will take the default value of 1000.\n            // For any other value of the @probability attribute, it shall decide at random whether to be a\n            // reporting Player, such that the probability of being one is @probability/1000.\n            if (probability && (probability === 1000 || ((probability / 1000) >= randomNumberGenerator.random()))) {\n                isReportingPlayer = true;\n            }\n\n            reportingPlayerStatusDecided = true;\n        }\n    }\n\n    function resetInitialSettings() {\n        reportingPlayerStatusDecided = false;\n        isReportingPlayer = false;\n        reportingUrl = null;\n        rangeController = null;\n    }\n\n    function reset() {\n        if (!allowPendingRequestsToCompleteOnReset) {\n            pendingRequests.forEach(req => req.abort());\n            pendingRequests = [];\n        }\n\n        resetInitialSettings();\n    }\n\n    instance = {\n        report:     report,\n        initialize: initialize,\n        reset:      reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nDVBReporting.__dashjs_factory_name = 'DVBReporting';\nexport default dashjs.FactoryMaker.getClassFactory(DVBReporting); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DVBErrors from '../vo/DVBErrors';\nimport MetricsReportingEvents from '../MetricsReportingEvents';\n\nfunction DVBErrorsTranslator(config) {\n\n    config = config || {};\n    let instance,\n        mpd;\n    const eventBus = config.eventBus;\n    const dashMetrics = config.dashMetrics;\n    const metricsConstants = config.metricsConstants;\n    //MediaPlayerEvents have been added to Events in MediaPlayer class\n    const Events = config.events;\n\n    function report(vo) {\n        let o = new DVBErrors();\n\n        if (!mpd) {\n            return;\n        }\n\n        for (const key in vo) {\n            if (vo.hasOwnProperty(key)) {\n                o[key] = vo[key];\n            }\n        }\n\n        if (!o.mpdurl) {\n            o.mpdurl = mpd.originalUrl || mpd.url;\n        }\n\n        if (!o.terror) {\n            o.terror = new Date();\n        }\n\n        dashMetrics.addDVBErrors(o);\n    }\n\n    function onManifestUpdate(e) {\n        if (e.error) {\n            return;\n        }\n\n        mpd = e.manifest;\n    }\n\n    function onServiceLocationChanged(e) {\n        report({\n            errorcode:          DVBErrors.BASE_URL_CHANGED,\n            servicelocation:    e.entry\n        });\n    }\n\n    function onBecameReporter() {\n        report({\n            errorcode: DVBErrors.BECAME_REPORTER\n        });\n    }\n\n    function handleHttpMetric(vo) {\n        if ((vo.responsecode === 0) ||      // connection failure - unknown\n                (vo.responsecode >= 400) || // HTTP error status code\n                (vo.responsecode < 100) ||  // unknown status codes\n                (vo.responsecode >= 600)) { // unknown status codes\n            report({\n                errorcode:          vo.responsecode || DVBErrors.CONNECTION_ERROR,\n                url:                vo.url,\n                terror:             vo.tresponse,\n                servicelocation:    vo._serviceLocation\n            });\n        }\n    }\n\n    function onMetricEvent(e) {\n        switch (e.metric) {\n        case metricsConstants.HTTP_REQUEST:\n            handleHttpMetric(e.value);\n            break;\n        default:\n            break;\n        }\n    }\n\n    function onPlaybackError(e) {\n        let reason = e.error ? e.error.code : 0;\n        let errorcode;\n\n        switch (reason) {\n            case MediaError.MEDIA_ERR_NETWORK:\n                errorcode = DVBErrors.CONNECTION_ERROR;\n                break;\n            case MediaError.MEDIA_ERR_DECODE:\n                errorcode = DVBErrors.CORRUPT_MEDIA_OTHER;\n                break;\n            default:\n                return;\n        }\n\n        report({\n            errorcode: errorcode\n        });\n    }\n\n    function initialise() {\n        eventBus.on(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\n        eventBus.on(\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\n            onServiceLocationChanged,\n            instance\n        );\n        eventBus.on(Events.METRIC_ADDED, onMetricEvent, instance);\n        eventBus.on(Events.METRIC_UPDATED, onMetricEvent, instance);\n        eventBus.on(Events.PLAYBACK_ERROR, onPlaybackError, instance);\n        eventBus.on(\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\n            onBecameReporter,\n            instance\n        );\n    }\n\n    function reset() {\n        eventBus.off(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\n        eventBus.off(\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\n            onServiceLocationChanged,\n            instance\n        );\n        eventBus.off(Events.METRIC_ADDED, onMetricEvent, instance);\n        eventBus.off(Events.METRIC_UPDATED, onMetricEvent, instance);\n        eventBus.off(Events.PLAYBACK_ERROR, onPlaybackError, instance);\n        eventBus.off(\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\n            onBecameReporter,\n            instance\n        );\n    }\n\n    instance = {\n        initialise: initialise,\n        reset:      reset\n    };\n\n    initialise();\n\n    return instance;\n}\n\nDVBErrorsTranslator.__dashjs_factory_name = 'DVBErrorsTranslator';\nexport default dashjs.FactoryMaker.getSingletonFactory(DVBErrorsTranslator); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n /**\n  * @ignore\n  */\nfunction HandlerHelpers() {\n    return {\n        reconstructFullMetricName: function (key, n, type) {\n            let mn = key;\n\n            if (n) {\n                mn += '(' + n;\n\n                if (type && type.length) {\n                    mn += ',' + type;\n                }\n\n                mn += ')';\n            }\n\n            return mn;\n        },\n\n        validateN: function (n_ms) {\n            if (!n_ms) {\n                throw new Error('missing n');\n            }\n\n            if (isNaN(n_ms)) {\n                throw new Error('n is NaN');\n            }\n\n            // n is a positive integer is defined to refer to the metric\n            // in which the buffer level is recorded every n ms.\n            if (n_ms < 0) {\n                throw new Error('n must be positive');\n            }\n\n            return n_ms;\n        }\n    };\n}\n\nHandlerHelpers.__dashjs_factory_name = 'HandlerHelpers';\nexport default dashjs.FactoryMaker.getSingletonFactory(HandlerHelpers); /* jshint ignore:line */\n","import Metrics from '../vo/Metrics';\nimport Range from '../vo/Range';\nimport Reporting from '../vo/Reporting';\n\nfunction ManifestParsing (config) {\n    config = config || {};\n    let instance;\n    let adapter = config.adapter;\n    const constants = config.constants;\n\n    function getMetricsRangeStartTime(manifest, dynamic, range) {\n        let voPeriods,\n            reportingStartTime;\n        let presentationStartTime = 0;\n\n        if (dynamic) {\n            // For services with MPD@type='dynamic', the start time is\n            // indicated in wall clock time by adding the value of this\n            // attribute to the value of the MPD@availabilityStartTime\n            // attribute.\n            presentationStartTime = adapter.getAvailabilityStartTime(manifest) / 1000;\n        } else {\n            // For services with MPD@type='static', the start time is indicated\n            // in Media Presentation time and is relative to the PeriodStart\n            // time of the first Period in this MPD.\n            voPeriods = adapter.getRegularPeriods(manifest);\n\n            if (voPeriods.length) {\n                presentationStartTime = voPeriods[0].start;\n            }\n        }\n\n        // When not present, DASH Metrics collection is\n        // requested from the beginning of content\n        // consumption.\n        reportingStartTime = presentationStartTime;\n\n        if (range && range.hasOwnProperty(constants.START_TIME)) {\n            reportingStartTime += range.starttime;\n        }\n\n        return reportingStartTime;\n    }\n\n    function getMetrics(manifest) {\n        let metrics = [];\n\n        if (manifest && manifest.Metrics_asArray) {\n            manifest.Metrics_asArray.forEach(metric => {\n                var metricEntry = new Metrics();\n                var isDynamic = adapter.getIsDynamic(manifest);\n\n                if (metric.hasOwnProperty('metrics')) {\n                    metricEntry.metrics = metric.metrics;\n                } else {\n                    return;\n                }\n\n                if (metric.Range_asArray) {\n                    metric.Range_asArray.forEach(range => {\n                        var rangeEntry = new Range();\n\n                        rangeEntry.starttime =\n                            getMetricsRangeStartTime(manifest, isDynamic, range);\n\n                        if (range.hasOwnProperty('duration')) {\n                            rangeEntry.duration = range.duration;\n                        } else {\n                            // if not present, the value is identical to the\n                            // Media Presentation duration.\n                            rangeEntry.duration = adapter.getDuration(manifest);\n                        }\n\n                        rangeEntry._useWallClockTime = isDynamic;\n\n                        metricEntry.Range.push(rangeEntry);\n                    });\n                }\n\n                if (metric.Reporting_asArray) {\n                    metric.Reporting_asArray.forEach(reporting => {\n                        var reportingEntry = new Reporting();\n\n                        if (reporting.hasOwnProperty(constants.SCHEME_ID_URI)) {\n                            reportingEntry.schemeIdUri = reporting.schemeIdUri;\n                        } else {\n                            // Invalid Reporting. schemeIdUri must be set. Ignore.\n                            return;\n                        }\n\n                        if (reporting.hasOwnProperty('value')) {\n                            reportingEntry.value = reporting.value;\n                        }\n\n                        if (reporting.hasOwnProperty(constants.DVB_REPORTING_URL)) {\n                            reportingEntry.dvb_reportingUrl = reporting[constants.DVB_REPORTING_URL];\n                        }\n\n                        if (reporting.hasOwnProperty(constants.DVB_PROBABILITY)) {\n                            reportingEntry.dvb_probability = reporting[constants.DVB_PROBABILITY];\n                        }\n\n                        metricEntry.Reporting.push(reportingEntry);\n                    });\n                } else {\n                    // Invalid Metrics. At least one reporting must be present. Ignore\n                    return;\n                }\n\n                metrics.push(metricEntry);\n            });\n        }\n\n        return metrics;\n    }\n\n    instance = {\n        getMetrics: getMetrics\n    };\n\n    return instance;\n}\n\nManifestParsing.__dashjs_factory_name = 'ManifestParsing';\nexport default dashjs.FactoryMaker.getSingletonFactory(ManifestParsing); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @ignore\n */\nfunction MetricSerialiser() {\n\n    // For each entry in the top level list within the metric (in the case\n    // of the DVBErrors metric each entry corresponds to an \"error event\"\n    // described in clause 10.8.4) the Player shall:\n    function serialise(metric) {\n        let pairs = [];\n        let obj = [];\n        let key,\n            value;\n\n        // Take each (key, value) pair from the metric entry and create a\n        // string consisting of the name of the key, followed by an equals\n        // ('=') character, followed by the string representation of the\n        // value. The string representation of the value is created based\n        // on the type of the value following the instructions in Table 22.\n        for (key in metric) {\n            if (metric.hasOwnProperty(key) && (key.indexOf('_') !== 0)) {\n                value = metric[key];\n\n                // we want to ensure that keys still end up in the report\n                // even if there is no value\n                if ((value === undefined) || (value === null)) {\n                    value = '';\n                }\n\n                // DVB A168 10.12.4 Table 22\n                if (Array.isArray(value)) {\n                    // if trace or similar is null, do not include in output\n                    if (!value.length) {\n                        continue;\n                    }\n\n                    obj = [];\n\n                    value.forEach(function (v) {\n                        let isBuiltIn = Object.prototype.toString.call(v).slice(8, -1) !== 'Object';\n\n                        obj.push(isBuiltIn ? v : serialise(v));\n                    });\n\n                    value = obj.map(encodeURIComponent).join(',');\n                } else if (typeof value === 'string') {\n                    value = encodeURIComponent(value);\n                } else if (value instanceof Date) {\n                    value = value.toISOString();\n                } else if (typeof value === 'number') {\n                    value = Math.round(value);\n                }\n\n                pairs.push(key + '=' + value);\n            }\n        }\n\n        // Concatenate the strings created in the previous step with an\n        // ampersand ('&') character between each one.\n        return pairs.join('&');\n    }\n\n    return {\n        serialise: serialise\n    };\n}\n\nMetricSerialiser.__dashjs_factory_name = 'MetricSerialiser';\nexport default dashjs.FactoryMaker.getSingletonFactory(MetricSerialiser); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n /**\n  * @ignore\n  */\nfunction RNG() {\n\n    // check whether secure random numbers are available. if not, revert to\n    // using Math.random\n    let crypto = window.crypto || window.msCrypto;\n\n    // could just as easily use any other array type by changing line below\n    let ArrayType = Uint32Array;\n    let MAX_VALUE = Math.pow(2, ArrayType.BYTES_PER_ELEMENT * 8) - 1;\n\n    // currently there is only one client for this code, and that only uses\n    // a single random number per initialisation. may want to increase this\n    // number if more consumers in the future\n    let NUM_RANDOM_NUMBERS = 10;\n\n    let randomNumbers,\n        index,\n        instance;\n\n    function initialise() {\n        if (crypto) {\n            if (!randomNumbers) {\n                randomNumbers = new ArrayType(NUM_RANDOM_NUMBERS);\n            }\n            crypto.getRandomValues(randomNumbers);\n            index = 0;\n        }\n    }\n\n    function rand(min, max) {\n        let r;\n\n        if (!min) {\n            min = 0;\n        }\n\n        if (!max) {\n            max = 1;\n        }\n\n        if (crypto) {\n            if (index === randomNumbers.length) {\n                initialise();\n            }\n\n            r = randomNumbers[index] / MAX_VALUE;\n            index += 1;\n        } else {\n            r = Math.random();\n        }\n\n        return (r * (max - min)) + min;\n    }\n\n    instance = {\n        random: rand\n    };\n\n    initialise();\n\n    return instance;\n}\n\nRNG.__dashjs_factory_name = 'RNG';\nexport default dashjs.FactoryMaker.getSingletonFactory(RNG); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass DVBErrors {\n    constructor() {\n        this.mpdurl = null;\n        // String - Absolute URL from which the MPD was originally\n        // retrieved (MPD updates will not change this value).\n\n        this.errorcode = null;\n        // String - The value of errorcode depends upon the type\n        // of error being reported. For an error listed in the\n        // ErrorType column below the value is as described in the\n        // Value column.\n        //\n        // ErrorType                                            Value\n        // ---------                                            -----\n        // HTTP error status code                               HTTP status code\n        // Unknown HTTP status code                             HTTP status code\n        // SSL connection failed                                \"SSL\" followed by SSL alert value\n        // DNS resolution failed                                \"C00\"\n        // Host unreachable                                     \"C01\"\n        // Connection refused                                   \"C02\"\n        // Connection error – Not otherwise specified           \"C03\"\n        // Corrupt media – ISO BMFF container cannot be parsed  \"M00\"\n        // Corrupt media – Not otherwise specified              \"M01\"\n        // Changing Base URL in use due to errors               \"F00\"\n        // Becoming an error reporting Player                   \"S00\"\n\n        this.terror = null;\n        // Real-Time - Date and time at which error occurred in UTC,\n        // formatted as a combined date and time according to ISO 8601.\n\n        this.url = null;\n        // String - Absolute URL from which data was being requested\n        // when this error occurred. If the error report is in relation\n        // to corrupt media or changing BaseURL, this may be a null\n        // string if the URL from which the media was obtained or\n        // which led to the change of BaseURL is no longer known.\n\n        this.ipaddress = null;\n        // String - IP Address which the host name in \"url\" resolved to.\n        // If the error report is in relation to corrupt media or\n        // changing BaseURL, this may be a null string if the URL\n        // from which the media was obtained or which led to the\n        // change of BaseURL is no longer known.\n\n        this.servicelocation = null;\n        // String - The value of the serviceLocation field in the\n        // BaseURL being used. In the event of this report indicating\n        // a change of BaseURL this is the value from the BaseURL\n        // being moved from.\n    }\n}\n\nDVBErrors.SSL_CONNECTION_FAILED_PREFIX = 'SSL';\nDVBErrors.DNS_RESOLUTION_FAILED =        'C00';\nDVBErrors.HOST_UNREACHABLE =             'C01';\nDVBErrors.CONNECTION_REFUSED =           'C02';\nDVBErrors.CONNECTION_ERROR =             'C03';\nDVBErrors.CORRUPT_MEDIA_ISOBMFF =        'M00';\nDVBErrors.CORRUPT_MEDIA_OTHER =          'M01';\nDVBErrors.BASE_URL_CHANGED =             'F00';\nDVBErrors.BECAME_REPORTER =              'S00';\n\nexport default DVBErrors;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass Metrics {\n    constructor() {\n\n        this.metrics = '';\n        this.Range = [];\n        this.Reporting = [];\n    }\n}\n\nexport default Metrics;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass Range {\n    constructor() {\n\n        // as defined in ISO23009-1\n        this.starttime = 0;\n        this.duration = Infinity;\n\n        // for internal use\n        this._useWallClockTime = false;\n    }\n}\n\nexport default Range;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\n\n// TS 103 285 Clause 10.12.3.3\nconst DEFAULT_DVB_PROBABILITY = 1000;\n\nclass Reporting {\n    constructor() {\n\n        this.schemeIdUri = '';\n        this.value = '';\n\n        // DVB Extensions\n        this.dvb_reportingUrl = '';\n        this.dvb_probability = DEFAULT_DVB_PROBABILITY;\n    }\n}\n\nexport default Reporting;\n","/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\nimport FactoryMaker from '../../core/FactoryMaker';\nimport { checkInteger } from '../utils/SupervisorTools';\n\nfunction CustomTimeRanges(/*config*/) {\n    let customTimeRangeArray = [];\n    let length = 0;\n\n    function add(start, end) {\n        let i = 0;\n\n        for (i = 0; (i < this.customTimeRangeArray.length) && (start > this.customTimeRangeArray[i].start); i++);\n\n        this.customTimeRangeArray.splice(i, 0, {start: start,end: end});\n\n        for (i = 0; i < this.customTimeRangeArray.length - 1; i++) {\n            if (this.mergeRanges(i,i + 1)) {\n                i--;\n            }\n        }\n        this.length = this.customTimeRangeArray.length;\n    }\n\n    function clear() {\n        this.customTimeRangeArray = [];\n        this.length = 0;\n    }\n\n    function remove(start, end) {\n        for (let i = 0; i < this.customTimeRangeArray.length; i++) {\n            if (start <= this.customTimeRangeArray[i].start && end >= this.customTimeRangeArray[i].end) {\n                //      |--------------Range i-------|\n                //|---------------Range to remove ---------------|\n                //    or\n                //|--------------Range i-------|\n                //|--------------Range to remove ---------------|\n                //    or\n                //                 |--------------Range i-------|\n                //|--------------Range to remove ---------------|\n                this.customTimeRangeArray.splice(i,1);\n                i--;\n\n            } else if (start > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end) {\n                //|-----------------Range i----------------|\n                //        |-------Range to remove -----|\n                this.customTimeRangeArray.splice(i + 1, 0, {start: end,end: this.customTimeRangeArray[i].end});\n                this.customTimeRangeArray[i].end = start;\n                break;\n            } else if ( start > this.customTimeRangeArray[i].start && start < this.customTimeRangeArray[i].end) {\n                //|-----------Range i----------|\n                //                    |---------Range to remove --------|\n                //    or\n                //|-----------------Range i----------------|\n                //            |-------Range to remove -----|\n                this.customTimeRangeArray[i].end = start;\n            } else if ( end > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end) {\n                //                     |-----------Range i----------|\n                //|---------Range to remove --------|\n                //            or\n                //|-----------------Range i----------------|\n                //|-------Range to remove -----|\n                this.customTimeRangeArray[i].start = end;\n            }\n        }\n\n        this.length = this.customTimeRangeArray.length;\n    }\n\n    function mergeRanges(rangeIndex1, rangeIndex2) {\n        let range1 = this.customTimeRangeArray[rangeIndex1];\n        let range2 = this.customTimeRangeArray[rangeIndex2];\n\n        if (range1.start <=  range2.start && range2.start <= range1.end && range1.end <= range2.end) {\n            //|-----------Range1----------|\n            //                    |-----------Range2----------|\n            range1.end = range2.end;\n            this.customTimeRangeArray.splice(rangeIndex2,1);\n            return true;\n\n        } else if (range2.start <= range1.start && range1.start <= range2.end && range2.end <= range1.end) {\n            //                |-----------Range1----------|\n            //|-----------Range2----------|\n            range1.start = range2.start;\n            this.customTimeRangeArray.splice(rangeIndex2,1);\n            return true;\n        } else if (range2.start <= range1.start && range1.start <= range2.end && range1.end <= range2.end) {\n            //      |--------Range1-------|\n            //|---------------Range2--------------|\n            this.customTimeRangeArray.splice(rangeIndex1,1);\n            return true;\n        } else if (range1.start <= range2.start && range2.start <= range1.end && range2.end <= range1.end) {\n            //|-----------------Range1--------------|\n            //        |-----------Range2----------|\n            this.customTimeRangeArray.splice(rangeIndex2,1);\n            return true;\n        }\n        return false;\n    }\n\n    function start(index) {\n        checkInteger(index);\n\n        if (index >= this.customTimeRangeArray.length || index < 0) {\n            return NaN;\n        }\n\n        return this.customTimeRangeArray[index].start;\n    }\n\n    function end(index) {\n        checkInteger(index);\n\n        if (index >= this.customTimeRangeArray.length || index < 0) {\n            return NaN;\n        }\n\n        return this.customTimeRangeArray[index].end;\n    }\n\n    return {\n        customTimeRangeArray: customTimeRangeArray,\n        length: length,\n        add: add,\n        clear: clear,\n        remove: remove,\n        mergeRanges: mergeRanges,\n        start: start,\n        end: end\n    };\n}\nCustomTimeRanges.__dashjs_factory_name = 'CustomTimeRanges';\nexport default FactoryMaker.getClassFactory(CustomTimeRanges);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\n\nexport function checkParameterType(parameter, type) {\n    if (typeof parameter !== type) {\n        throw Constants.BAD_ARGUMENT_ERROR;\n    }\n}\n\nexport function checkInteger(parameter) {\n    const isInt = parameter !== null && !isNaN(parameter) && (parameter % 1 === 0);\n\n    if (!isInt) {\n        throw Constants.BAD_ARGUMENT_ERROR + ' : argument is not an integer';\n    }\n}\n\nexport function checkRange(parameter, min, max) {\n    if (parameter < min || parameter > max) {\n        throw Constants.BAD_ARGUMENT_ERROR + ' : argument out of range';\n    }\n}\n\nexport function checkIsVideoOrAudioType(type) {\n    if (typeof type !== 'string' || (type !== Constants.AUDIO && type !== Constants.VIDEO)) {\n        throw Constants.BAD_ARGUMENT_ERROR;\n    }\n}"],"names":["f","g","exports","module","define","amd","window","global","self","this","dashjs","MetricsReporting","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","_dereq_","instance","singletonContexts","singletonFactories","classFactories","FactoryMaker","undefined","extend","name","childInstance","override","context","getSingletonInstance","setSingletonInstance","className","obj","push","deleteSingletonInstances","filter","x","getSingletonFactory","classConstructor","factory","getFactoryByName","__dashjs_factory_name","getInstance","merge","arguments","getSingletonFactoryByName","updateSingletonFactory","updateFactory","getClassFactory","create","getClassFactoryByName","updateClassFactory","factoriesArray","args","classInstance","extensionObject","prop","extension","apply","parent","hasOwnProperty","getClassName","EventsBase","events","config","evt","publicOnly","indexOf","Constants","init","constants","STREAM","VIDEO","AUDIO","TEXT","FRAGMENTED_TEXT","EMBEDDED_TEXT","MUXED","IMAGE","STPP","TTML","VTT","WVTT","ABR_STRATEGY_DYNAMIC","ABR_STRATEGY_BOLA","ABR_STRATEGY_L2A","ABR_STRATEGY_LoLP","ABR_STRATEGY_THROUGHPUT","ABR_FETCH_THROUGHPUT_CALCULATION_DOWNLOADED_DATA","ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING","LIVE_CATCHUP_MODE_DEFAULT","LIVE_CATCHUP_MODE_LOLP","MOVING_AVERAGE_SLIDING_WINDOW","MOVING_AVERAGE_EWMA","BAD_ARGUMENT_ERROR","MISSING_CONFIG_ERROR","TRACK_SWITCH_MODE_ALWAYS_REPLACE","TRACK_SWITCH_MODE_NEVER_REPLACE","TRACK_SELECTION_MODE_HIGHEST_BITRATE","TRACK_SELECTION_MODE_WIDEST_RANGE","LOCATION","INITIALIZE","TEXT_SHOWING","TEXT_HIDDEN","CC1","CC3","UTF8","SCHEME_ID_URI","START_TIME","SERVICE_DESCRIPTION_LL_SCHEME","SUPPLEMENTAL_PROPERTY_LL_SCHEME","XML","ARRAY_BUFFER","DVB_REPORTING_URL","DVB_PROBABILITY","createMetricsReporting","_utilsDVBErrorsTranslator2","eventBus","dashMetrics","metricsConstants","_controllersMetricsCollectionController2","getReportingFactory","_reportingReportingFactory2","getMetricsHandlerFactory","_metricsMetricsHandlerFactory2","_MetricsReportingEvents2","MetricsReportingEvents","_get","Object","getPrototypeOf","prototype","METRICS_INITIALISATION_COMPLETE","BECAME_REPORTING_PLAYER","CMCD_DATA_GENERATED","metricsReportingEvents","MetricsCollectionController","metricsControllers","update","controllersToRemove","error","keys","_utilsManifestParsing2","adapter","getMetrics","manifest","forEach","m","key","JSON","stringify","splice","controller","_MetricsController2","initialize","reset","trigger","resetMetricsControllers","off","MANIFEST_UPDATED","STREAM_TEARDOWN_COMPLETE","on","MetricsController","metricsHandlersController","reportingController","rangeController","metricsEntry","_RangeController2","mediaElement","Range","_ReportingController2","debug","Reporting","_MetricsHandlersController2","metrics","MetricsHandlersController","handlers","Events","metricsHandlerFactory","handle","handler","handleNewMetric","metric","value","mediaType","split","midx","ms","nextm","METRIC_ADDED","METRIC_UPDATED","RangeController","useWallClockTime","ranges","rs","start","starttime","end","duration","add","_useWallClockTime","clear","isEnabled","time","numRanges","Date","getTime","currentTime","_utilsCustomTimeRanges2","ReportingController","reporters","reportingFactory","reporting","some","reporter","report","type","vos","MetricsHandlerFactory","logger","getLogger","keyRegex","knownFactoryProducts","BufferLevel","_handlersBufferLevelHandler2","DVBErrors","_handlersDVBErrorsHandler2","HttpList","_handlersHttpListHandler2","PlayList","_handlersGenericMetricHandler2","RepSwitchList","TcpList","listType","matches","match","message","register","unregister","BufferLevelHandler","interval","lastReportedTime","handlerHelpers","_utilsHandlerHelpers2","storedVOs","intervalCallback","vo","map","reduce","b","level","getLowestBufferLevelVO","basename","rc","n_ms","validateN","reconstructFullMetricName","setInterval","clearInterval","BUFFER_LEVEL","onInitialisationComplete","unused","DVB_ERRORS","GenericMetricHandler","metricName","HttpListHandler","storedVos","requestType","HTTP_REQUEST","ReportingFactory","knownReportingSchemeIdUris","urn:dvb:dash:reporting:2014","_reportersDVBReporting2","entry","schemeIdUri","moduleName","DVBReporting","metricSerialiser","randomNumberGenerator","reportingPlayerStatusDecided","isReportingPlayer","reportingUrl","pendingRequests","doGetRequest","url","successCB","failureCB","oncomplete","reqIndex","req","status","XMLHttpRequest","open","onloadend","onerror","send","resetInitialSettings","Array","isArray","serialise","dvb_reportingUrl","probability","dvb_probability","random","_utilsMetricSerialiser2","_utilsRNG2","DVBErrorsTranslator","mpd","_voDVBErrors2","mpdurl","originalUrl","terror","addDVBErrors","onManifestUpdate","onServiceLocationChanged","errorcode","BASE_URL_CHANGED","servicelocation","onBecameReporter","BECAME_REPORTER","onMetricEvent","responsecode","CONNECTION_ERROR","tresponse","_serviceLocation","onPlaybackError","MediaError","MEDIA_ERR_NETWORK","MEDIA_ERR_DECODE","CORRUPT_MEDIA_OTHER","initialise","SERVICE_LOCATION_BLACKLIST_CHANGED","PLAYBACK_ERROR","HandlerHelpers","mn","isNaN","ManifestParsing","Metrics_asArray","metricEntry","_voMetrics2","isDynamic","getIsDynamic","Range_asArray","range","reportingStartTime","presentationStartTime","rangeEntry","_voRange2","getAvailabilityStartTime","voPeriods","getRegularPeriods","getDuration","Reporting_asArray","reportingEntry","_voReporting2","MetricSerialiser","pairs","v","isBuiltIn","toString","slice","encodeURIComponent","join","toISOString","Math","round","RNG","crypto","msCrypto","ArrayType","Uint32Array","MAX_VALUE","pow","BYTES_PER_ELEMENT","NUM_RANDOM_NUMBERS","randomNumbers","index","getRandomValues","min","max","ipaddress","SSL_CONNECTION_FAILED_PREFIX","DNS_RESOLUTION_FAILED","HOST_UNREACHABLE","CONNECTION_REFUSED","CORRUPT_MEDIA_ISOBMFF","Metrics","Infinity","CustomTimeRanges","customTimeRangeArray","mergeRanges","remove","rangeIndex1","rangeIndex2","range1","range2","_utilsSupervisorTools","checkInteger","NaN","_coreFactoryMaker2","parameter","_constantsConstants2"],"mappings":"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"}