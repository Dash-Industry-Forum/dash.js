{"version":3,"file":"dash.protection.min.js","sourceRoot":"./src/","sources":["../node_modules/browserify/node_modules/browser-pack/_prelude.js","core/errors/ErrorsBase.js","core/events/EventsBase.js","streaming/constants/ProtectionConstants.js","streaming/protection/CommonEncryption.js","streaming/protection/Protection.js","streaming/protection/ProtectionEvents.js","streaming/protection/controllers/ProtectionController.js","streaming/protection/controllers/ProtectionKeyController.js","streaming/protection/drm/KeySystemClearKey.js","streaming/protection/drm/KeySystemPlayReady.js","streaming/protection/drm/KeySystemW3CClearKey.js","streaming/protection/drm/KeySystemWidevine.js","streaming/protection/errors/ProtectionErrors.js","streaming/protection/models/ProtectionModel_01b.js","streaming/protection/models/ProtectionModel_21Jan2015.js","streaming/protection/models/ProtectionModel_3Feb2014.js","streaming/protection/servers/ClearKey.js","streaming/protection/servers/DRMToday.js","streaming/protection/servers/PlayReady.js","streaming/protection/servers/Widevine.js","streaming/protection/vo/ClearKeyKeySet.js","streaming/protection/vo/KeyMessage.js","streaming/protection/vo/KeyPair.js","streaming/protection/vo/KeySystemAccess.js","streaming/protection/vo/KeySystemConfiguration.js","streaming/protection/vo/MediaCapability.js","streaming/protection/vo/NeedKey.js","streaming/vo/DashJSError.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass ErrorsBase {\n    extend (errors, config) {\n        if (!errors) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const err in errors) {\n            if (!errors.hasOwnProperty(err) || (this[err] && !override)) continue;\n            if (publicOnly && errors[err].indexOf('public_') === -1) continue;\n            this[err] = errors[err];\n\n        }\n    }\n}\n\nexport default ErrorsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass EventsBase {\n    extend (events, config) {\n        if (!events) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const evt in events) {\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\n            this[evt] = events[evt];\n\n        }\n    }\n}\n\nexport default EventsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Protection Constants declaration\n * @class\n * @ignore\n */\nclass ProtectionConstants {\n\n    init () {\n        this.CLEARKEY_KEYSTEM_STRING = 'org.w3.clearkey';\n        this.WIDEVINE_KEYSTEM_STRING = 'com.widevine.alpha';\n        this.PLAYREADY_KEYSTEM_STRING = 'com.microsoft.playready';\n    }\n\n    constructor () {\n        this.init();\n    }\n}\n\nlet constants = new ProtectionConstants();\nexport default constants;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @class\n * @ignore\n */\nclass CommonEncryption {\n    /**\n     * Find and return the ContentProtection element in the given array\n     * that indicates support for MPEG Common Encryption\n     *\n     * @param {Array} cpArray array of content protection elements\n     * @returns {Object|null} the Common Encryption content protection element or\n     * null if one was not found\n     */\n    static findCencContentProtection(cpArray) {\n        let retVal = null;\n        for (let i = 0; i < cpArray.length; ++i) {\n            let cp = cpArray[i];\n            if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' &&\n                (cp.value.toLowerCase() === 'cenc' || cp.value.toLowerCase() === 'cbcs'))\n                retVal = cp;\n        }\n        return retVal;\n    }\n\n    /**\n     * Returns just the data portion of a single PSSH\n     *\n     * @param {ArrayBuffer} pssh - the PSSH\n     * @return {ArrayBuffer} data portion of the PSSH\n     */\n    static getPSSHData(pssh) {\n        let offset = 8; // Box size and type fields\n        let view = new DataView(pssh);\n\n        // Read version\n        let version = view.getUint8(offset);\n\n        offset += 20; // Version (1), flags (3), system ID (16)\n\n        if (version > 0) {\n            offset += 4 + (16 * view.getUint32(offset)); // Key ID count (4) and All key IDs (16*count)\n        }\n\n        offset += 4; // Data size\n        return pssh.slice(offset);\n    }\n\n    /**\n     * Returns the PSSH associated with the given key system from the concatenated\n     * list of PSSH boxes in the given initData\n     *\n     * @param {KeySystem} keySystem the desired\n     * key system\n     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\n     * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\n     * or null if a valid association could not be found.\n     */\n    static getPSSHForKeySystem(keySystem, initData) {\n        let psshList = CommonEncryption.parsePSSHList(initData);\n        if (keySystem && psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\n            return psshList[keySystem.uuid.toLowerCase()];\n        }\n        return null;\n    }\n\n    /**\n     * Parse a standard common encryption PSSH which contains a simple\n     * base64-encoding of the init data\n     *\n     * @param {Object} cpData the ContentProtection element\n     * @param {BASE64} BASE64 reference\n     * @returns {ArrayBuffer|null} the init data or null if not found\n     */\n    static parseInitDataFromContentProtection(cpData, BASE64) {\n        if ('pssh' in cpData) {\n\n            // Remove whitespaces and newlines from pssh text\n            cpData.pssh.__text = cpData.pssh.__text.replace(/\\r?\\n|\\r/g, '').replace(/\\s+/g, '');\n\n            return BASE64.decodeArray(cpData.pssh.__text).buffer;\n        }\n        return null;\n    }\n\n    /**\n     * Parses list of PSSH boxes into keysystem-specific PSSH data\n     *\n     * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\n     * CDM as initialization data when CommonEncryption content is detected\n     * @returns {Object|Array} an object that has a property named according to each of\n     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\n     * and a ArrayBuffer (the entire PSSH box) as the property value\n     */\n    static parsePSSHList(data) {\n\n        if (data === null || data === undefined)\n            return [];\n\n        let dv = new DataView(data.buffer || data); // data.buffer first for Uint8Array support\n        let done = false;\n        let pssh = {};\n\n        // TODO: Need to check every data read for end of buffer\n        let byteCursor = 0;\n        while (!done) {\n\n            let size,\n                nextBox,\n                version,\n                systemID,\n                psshDataSize;\n            let boxStart = byteCursor;\n\n            if (byteCursor >= dv.buffer.byteLength)\n                break;\n\n            /* Box size */\n            size = dv.getUint32(byteCursor);\n            nextBox = byteCursor + size;\n            byteCursor += 4;\n\n            /* Verify PSSH */\n            if (dv.getUint32(byteCursor) !== 0x70737368) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor += 4;\n\n            /* Version must be 0 or 1 */\n            version = dv.getUint8(byteCursor);\n            if (version !== 0 && version !== 1) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor++;\n\n            byteCursor += 3; /* skip flags */\n\n            // 16-byte UUID/SystemID\n            systemID = '';\n            let i, val;\n            for (i = 0; i < 4; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 4;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 6; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 6;\n\n            systemID = systemID.toLowerCase();\n\n            /* PSSH Data Size */\n            psshDataSize = dv.getUint32(byteCursor);\n            byteCursor += 4;\n\n            /* PSSH Data */\n            pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\n            byteCursor = nextBox;\n        }\n\n        return pssh;\n    }\n}\n\nexport default CommonEncryption;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport ProtectionController from './controllers/ProtectionController';\nimport ProtectionKeyController from './controllers/ProtectionKeyController';\nimport ProtectionEvents from './ProtectionEvents';\nimport ProtectionErrors from './errors/ProtectionErrors';\nimport ProtectionModel_21Jan2015 from './models/ProtectionModel_21Jan2015';\nimport ProtectionModel_3Feb2014 from './models/ProtectionModel_3Feb2014';\nimport ProtectionModel_01b from './models/ProtectionModel_01b';\n\nconst APIS_ProtectionModel_01b = [\n    // Un-prefixed as per spec\n    {\n        // Video Element\n        generateKeyRequest: 'generateKeyRequest',\n        addKey: 'addKey',\n        cancelKeyRequest: 'cancelKeyRequest',\n\n        // Events\n        needkey: 'needkey',\n        keyerror: 'keyerror',\n        keyadded: 'keyadded',\n        keymessage: 'keymessage'\n    },\n    // Webkit-prefixed (early Chrome versions and Chrome with EME disabled in chrome://flags)\n    {\n        // Video Element\n        generateKeyRequest: 'webkitGenerateKeyRequest',\n        addKey: 'webkitAddKey',\n        cancelKeyRequest: 'webkitCancelKeyRequest',\n\n        // Events\n        needkey: 'webkitneedkey',\n        keyerror: 'webkitkeyerror',\n        keyadded: 'webkitkeyadded',\n        keymessage: 'webkitkeymessage'\n    }\n];\n\nconst APIS_ProtectionModel_3Feb2014 = [\n    // Un-prefixed as per spec\n    // Chrome 38-39 (and some earlier versions) with chrome://flags -- Enable Encrypted Media Extensions\n    {\n        // Video Element\n        setMediaKeys: 'setMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MediaKeys',\n        // MediaKeySession\n        release: 'close',\n\n        // Events\n        needkey: 'needkey',\n        error: 'keyerror',\n        message: 'keymessage',\n        ready: 'keyadded',\n        close: 'keyclose'\n    },\n    // MS-prefixed (IE11, Windows 8.1)\n    {\n        // Video Element\n        setMediaKeys: 'msSetMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MSMediaKeys',\n        // MediaKeySession\n        release: 'close',\n        // Events\n        needkey: 'msneedkey',\n        error: 'mskeyerror',\n        message: 'mskeymessage',\n        ready: 'mskeyadded',\n        close: 'mskeyclose'\n    }\n];\n\nfunction Protection() {\n    let instance;\n    const context = this.context;\n\n    /**\n     * Create a ProtectionController and associated ProtectionModel for use with\n     * a single piece of content.\n     *\n     * @param {Object} config\n     * @return {ProtectionController} protection controller\n     *\n     */\n    function createProtectionSystem(config) {\n        let controller = null;\n\n        const protectionKeyController = ProtectionKeyController(context).getInstance();\n        protectionKeyController.setConfig({ debug: config.debug, BASE64: config.BASE64 });\n        protectionKeyController.initialize();\n\n        let protectionModel =  getProtectionModel(config);\n\n        if (!controller && protectionModel) {//TODO add ability to set external controller if still needed at all?\n            controller = ProtectionController(context).create({\n                protectionModel: protectionModel,\n                protectionKeyController: protectionKeyController,\n                eventBus: config.eventBus,\n                debug: config.debug,\n                events: config.events,\n                BASE64: config.BASE64,\n                constants: config.constants\n            });\n            config.capabilities.setEncryptedMediaSupported(true);\n        }\n        return controller;\n    }\n\n    function getProtectionModel(config) {\n        const debug = config.debug;\n        const logger = debug.getLogger(instance);\n        const eventBus = config.eventBus;\n        const errHandler = config.errHandler;\n        const videoElement = config.videoModel ? config.videoModel.getElement() : null;\n\n        if ((!videoElement || videoElement.onencrypted !== undefined) &&\n            (!videoElement || videoElement.mediaKeys !== undefined)) {\n            logger.info('EME detected on this user agent! (ProtectionModel_21Jan2015)');\n            return ProtectionModel_21Jan2015(context).create({ debug: debug, eventBus: eventBus, events: config.events });\n        } else if (getAPI(videoElement, APIS_ProtectionModel_3Feb2014)) {\n            logger.info('EME detected on this user agent! (ProtectionModel_3Feb2014)');\n            return ProtectionModel_3Feb2014(context).create({ debug: debug, eventBus: eventBus, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_3Feb2014) });\n        } else if (getAPI(videoElement, APIS_ProtectionModel_01b)) {\n            logger.info('EME detected on this user agent! (ProtectionModel_01b)');\n            return ProtectionModel_01b(context).create({ debug: debug, eventBus: eventBus, errHandler: errHandler, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_01b) });\n        } else {\n            logger.warn('No supported version of EME detected on this user agent! - Attempts to play encrypted content will fail!');\n            return null;\n        }\n    }\n\n    function getAPI(videoElement, apis) {\n        for (let i = 0; i < apis.length; i++) {\n            const api = apis[i];\n            // detect if api is supported by browser\n            // check only first function in api -> should be fine\n            if (typeof videoElement[api[Object.keys(api)[0]]] !== 'function') {\n                continue;\n            }\n\n            return api;\n        }\n\n        return null;\n    }\n\n    instance = {\n        createProtectionSystem: createProtectionSystem\n    };\n\n    return instance;\n}\n\nProtection.__dashjs_factory_name = 'Protection';\nconst factory = dashjs.FactoryMaker.getClassFactory(Protection); /* jshint ignore:line */\nfactory.events = ProtectionEvents;\nfactory.errors = ProtectionErrors;\ndashjs.FactoryMaker.updateClassFactory(Protection.__dashjs_factory_name, factory); /* jshint ignore:line */\nexport default factory;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../../core/events/EventsBase';\n/**\n * @class\n  */\nclass ProtectionEvents extends EventsBase {\n    /**\n     * @description Public facing external events to be used when including protection package.\n     * All public events will be aggregated into the MediaPlayerEvents Class and can be accessed\n     * via MediaPlayer.events.  public_ is the prefix that we use to move event names to MediaPlayerEvents.\n     */\n    constructor () {\n        super();\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         *\n         * @ignore\n         */\n        this.INTERNAL_KEY_MESSAGE = 'internalKeyMessage';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @ignore\n         */\n        this.INTERNAL_KEY_SYSTEM_SELECTED = 'internalKeySystemSelected';\n\n        /**\n         * Event ID for events delivered when the status of one decryption keys has changed\n         * @ignore\n         */\n        this.INTERNAL_KEY_STATUS_CHANGED = 'internalkeyStatusChanged';\n\n        /**\n         * Event ID for events delivered when a new key has been added\n         *\n         * @constant\n         * @deprecated The latest versions of the EME specification no longer\n         * use this event.  {@MediaPlayer.models.protectionModel.eventList.KEY_STATUSES_CHANGED}\n         * is preferred.\n         * @event ProtectionEvents#KEY_ADDED\n         */\n        this.KEY_ADDED = 'public_keyAdded';\n        /**\n         * Event ID for events delivered when an error is encountered by the CDM\n         * while processing a license server response message\n         * @event ProtectionEvents#KEY_ERROR\n         */\n        this.KEY_ERROR = 'public_keyError';\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         * @event ProtectionEvents#KEY_MESSAGE\n         */\n        this.KEY_MESSAGE = 'public_keyMessage';\n\n        /**\n         * Event ID for events delivered when a key session close\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CLOSED\n         */\n        this.KEY_SESSION_CLOSED = 'public_keySessionClosed';\n\n        /**\n         * Event ID for events delivered when a new key sessions creation\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CREATED\n         */\n        this.KEY_SESSION_CREATED = 'public_keySessionCreated';\n\n        /**\n         * Event ID for events delivered when a key session removal\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_REMOVED\n         */\n        this.KEY_SESSION_REMOVED = 'public_keySessionRemoved';\n\n        /**\n         * Event ID for events delivered when the status of one or more\n         * decryption keys has changed\n         * @event ProtectionEvents#KEY_STATUSES_CHANGED\n         */\n        this.KEY_STATUSES_CHANGED = 'public_keyStatusesChanged';\n\n        /**\n         * Event ID for events delivered when a key system access procedure\n         * has completed\n         * @ignore\n         */\n        this.KEY_SYSTEM_ACCESS_COMPLETE = 'public_keySystemAccessComplete';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @event ProtectionEvents#KEY_SYSTEM_SELECTED\n         */\n        this.KEY_SYSTEM_SELECTED = 'public_keySystemSelected';\n\n        /**\n         * Event ID for events delivered when a license request procedure\n         * has completed\n         * @event ProtectionEvents#LICENSE_REQUEST_COMPLETE\n         */\n        this.LICENSE_REQUEST_COMPLETE = 'public_licenseRequestComplete';\n\n        /**\n         * Sending a license rquest\n         * @event ProtectionEvents#LICENSE_REQUEST_SENDING\n         */\n        this.LICENSE_REQUEST_SENDING = 'public_licenseRequestSending';\n\n        /**\n         * Event ID for needkey/encrypted events\n         * @ignore\n         */\n        this.NEED_KEY = 'needkey';\n\n        /**\n         * Event ID for events delivered when the Protection system is detected and created.\n         * @event ProtectionEvents#PROTECTION_CREATED\n         */\n        this.PROTECTION_CREATED = 'public_protectioncreated';\n\n        /**\n         * Event ID for events delivered when the Protection system is destroyed.\n         * @event ProtectionEvents#PROTECTION_DESTROYED\n         */\n        this.PROTECTION_DESTROYED = 'public_protectiondestroyed';\n\n        /**\n         * Event ID for events delivered when a new server certificate has\n         * been delivered to the CDM\n         * @ignore\n         */\n        this.SERVER_CERTIFICATE_UPDATED = 'serverCertificateUpdated';\n\n        /**\n         * Event ID for events delivered when the process of shutting down\n         * a protection set has completed\n         * @ignore\n         */\n        this.TEARDOWN_COMPLETE =  'protectionTeardownComplete';\n\n        /**\n         * Event ID for events delivered when a HTMLMediaElement has been\n         * associated with the protection set\n         * @ignore\n         */\n        this.VIDEO_ELEMENT_SELECTED = 'videoElementSelected';\n    }\n}\n\nlet protectionEvents = new ProtectionEvents();\nexport default protectionEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport MediaCapability from '../vo/MediaCapability';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport ProtectionErrors from '../errors/ProtectionErrors';\nimport DashJSError from '../../vo/DashJSError';\n\nconst NEEDKEY_BEFORE_INITIALIZE_RETRIES = 5;\nconst NEEDKEY_BEFORE_INITIALIZE_TIMEOUT = 500;\n\nconst LICENSE_SERVER_REQUEST_RETRIES = 3;\nconst LICENSE_SERVER_REQUEST_RETRY_INTERVAL = 1000;\nconst LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT = 8000;\n\n/**\n * @module ProtectionController\n * @description Provides access to media protection information and functionality.  Each\n * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}\n * which encapsulates a set of protection information (EME APIs, selected key system,\n * key sessions).  The APIs of ProtectionController mostly align with the latest EME\n * APIs.  Key system selection is mostly automated when combined with app-overrideable\n * functionality provided in {@link ProtectionKeyController}.\n * @todo ProtectionController does almost all of its tasks automatically after init() is\n * called.  Applications might want more control over this process and want to go through\n * each step manually (key system selection, session creation, session maintenance).\n * @param {Object} config\n */\n\nfunction ProtectionController(config) {\n\n    config = config || {};\n    const protectionKeyController = config.protectionKeyController;\n    let protectionModel = config.protectionModel;\n    const eventBus = config.eventBus;\n    const events = config.events;\n    const debug = config.debug;\n    const BASE64 = config.BASE64;\n    const constants = config.constants;\n    let needkeyRetries = [];\n\n    let instance,\n        logger,\n        pendingNeedKeyData,\n        mediaInfoArr,\n        protDataSet,\n        sessionType,\n        robustnessLevel,\n        keySystem;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        pendingNeedKeyData = [];\n        mediaInfoArr = [];\n        sessionType = 'temporary';\n        robustnessLevel = '';\n    }\n\n    function checkConfig() {\n        if (!eventBus || !eventBus.hasOwnProperty('on') || !protectionKeyController || !protectionKeyController.hasOwnProperty('getSupportedKeySystemsFromContentProtection')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    /**\n     * Initialize this protection system with a given audio\n     * or video stream information.\n     *\n     * @param {StreamInfo} [mediaInfo] Media information\n     * @memberof module:ProtectionController\n     * @instance\n     * @todo This API will change when we have better support for allowing applications\n     * to select different adaptation sets for playback.  Right now it is clunky for\n     * applications to create {@link StreamInfo} with the right information,\n     * @ignore\n     */\n    function initializeForMedia(mediaInfo) {\n        // Not checking here if a session for similar KS/KID combination is already created\n        // because still don't know which keysystem will be selected.\n        // Once Keysystem is selected and before creating the session, we will do that check\n        // so we create the strictly necessary DRM sessions\n        if (!mediaInfo) {\n            throw new Error('mediaInfo can not be null or undefined');\n        }\n\n        checkConfig();\n\n        eventBus.on(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        eventBus.on(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\n\n        mediaInfoArr.push(mediaInfo);\n\n        // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio\n        // and video will be the same.  Just use one valid MediaInfo object\n        const supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);\n        if (supportedKS && supportedKS.length > 0) {\n            selectKeySystem(supportedKS, true);\n        }\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     * @ignore\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        checkConfig();\n        return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps);\n    }\n\n    /**\n     * Create a new key session associated with the given initialization data from\n     * the MPD or from the PSSH box in the media\n     *\n     * @param {ArrayBuffer} initData the initialization data\n     * @param {Uint8Array} cdmData the custom data to provide to licenser\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     * @todo In older versions of the EME spec, there was a one-to-one relationship between\n     * initialization data and key sessions.  That is no longer true in the latest APIs.  This\n     * API will need to modified (and a new \"generateRequest(keySession, initData)\" API created)\n     * to come up to speed with the latest EME standard\n     * @ignore\n     */\n    function createKeySession(initData, cdmData) {\n        const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, initData);\n        const protData = getProtData(keySystem);\n        if (initDataForKS) {\n\n            // Check for duplicate initData\n            const currentInitData = protectionModel.getAllInitData();\n            for (let i = 0; i < currentInitData.length; i++) {\n                if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\n                    logger.info('DRM: Ignoring initData because we have already seen it!');\n                    return;\n                }\n            }\n            try {\n                protectionModel.createKeySession(initDataForKS, protData, getSessionType(keySystem), cdmData);\n            } catch (error) {\n                eventBus.trigger(events.KEY_SESSION_CREATED, {\n                    data: null,\n                    error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + error.message)\n                });\n            }\n        } else if (initData) {\n            protectionModel.createKeySession(initData, protData, getSessionType(keySystem), cdmData);\n        } else {\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\n                data: null,\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Selected key system is ' + (keySystem ? keySystem.systemString : null) + '.  needkey/encrypted event contains no initData corresponding to that key system!')\n            });\n        }\n    }\n\n    /**\n     * Loads a key session with the given session ID from persistent storage.  This\n     * essentially creates a new key session\n     *\n     * @param {string} sessionID\n     * @param {string} initData\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     * @ignore\n     */\n    function loadKeySession(sessionID, initData) {\n        checkConfig();\n        protectionModel.loadKeySession(sessionID, initData, getSessionType(keySystem));\n    }\n\n    /**\n     * Removes the given key session from persistent storage and closes the session\n     * as if {@link ProtectionController#closeKeySession}\n     * was called\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionRemoved\n     * @fires ProtectionController#KeySessionClosed\n     * @ignore\n     */\n    function removeKeySession(sessionToken) {\n        checkConfig();\n        protectionModel.removeKeySession(sessionToken);\n    }\n\n    /**\n     * Closes the key session and releases all associated decryption keys.  These\n     * keys will no longer be available for decrypting media\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionClosed\n     * @ignore\n     */\n    function closeKeySession(sessionToken) {\n        checkConfig();\n        protectionModel.closeKeySession(sessionToken);\n    }\n\n    /**\n     * Sets a server certificate for use by the CDM when signing key messages\n     * intended for a particular license server.  This will fire\n     * an error event if a key system has not yet been selected.\n     *\n     * @param {ArrayBuffer} serverCertificate a CDM-specific license server\n     * certificate\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#ServerCertificateUpdated\n     */\n    function setServerCertificate(serverCertificate) {\n        checkConfig();\n        protectionModel.setServerCertificate(serverCertificate);\n    }\n\n    /**\n     * Associate this protection system with the given HTMLMediaElement.  This\n     * causes the system to register for needkey/encrypted events from the given\n     * element and provides a destination for setting of MediaKeys\n     *\n     * @param {HTMLMediaElement} element the media element to which the protection\n     * system should be associated\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setMediaElement(element) {\n        checkConfig();\n        if (element) {\n            protectionModel.setMediaElement(element);\n            eventBus.on(events.NEED_KEY, onNeedKey, this);\n        } else if (element === null) {\n            protectionModel.setMediaElement(element);\n            eventBus.off(events.NEED_KEY, onNeedKey, this);\n        }\n    }\n\n    /**\n     * Sets the session type to use when creating key sessions.  Either \"temporary\" or\n     * \"persistent-license\".  Default is \"temporary\".\n     *\n     * @param {string} value the session type\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setSessionType(value) {\n        sessionType = value;\n    }\n\n    /**\n     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.\n     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.\n     *\n     * @param {string} level the robustness level\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setRobustnessLevel(level) {\n        robustnessLevel = level;\n    }\n\n    /**\n     * Attach KeySystem-specific data to use for license acquisition with EME\n     *\n     * @param {Object} data an object containing property names corresponding to\n     * key system name strings (e.g. \"org.w3.clearkey\") and associated values\n     * being instances of {@link ProtectionData}\n     * @memberof module:ProtectionController\n     * @instance\n     * @ignore\n     */\n    function setProtectionData(data) {\n        protDataSet = data;\n        protectionKeyController.setProtectionData(data);\n    }\n\n    /**\n     * Stop method is called when current playback is stopped/resetted.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function stop() {\n        if (protectionModel) {\n            protectionModel.stop();\n        }\n    }\n\n\n    /**\n     * Destroys all protection data associated with this protection set.  This includes\n     * deleting all key sessions. In the case of persistent key sessions, the sessions\n     * will simply be unloaded and not deleted.  Additionally, if this protection set is\n     * associated with a HTMLMediaElement, it will be detached from that element.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     * @ignore\n     */\n    function reset() {\n        checkConfig();\n\n        eventBus.off(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        eventBus.off(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\n\n        setMediaElement(null);\n\n        keySystem = undefined;//TODO-Refactor look at why undefined is needed for this. refactor\n\n        if (protectionModel) {\n            protectionModel.reset();\n            protectionModel = null;\n        }\n\n        needkeyRetries.forEach(retryTimeout => clearTimeout(retryTimeout));\n        needkeyRetries = [];\n\n        mediaInfoArr = [];\n    }\n\n    ///////////////\n    // Private\n    ///////////////\n\n    function getProtData(keySystem) {\n        let protData = null;\n        if (keySystem) {\n            const keySystemString = keySystem.systemString;\n\n            if (protDataSet) {\n                protData = (keySystemString in protDataSet) ? protDataSet[keySystemString] : null;\n            }\n        }\n        return protData;\n    }\n\n    function getKeySystemConfiguration(keySystem) {\n        const protData = getProtData(keySystem);\n        const audioCapabilities = [];\n        const videoCapabilities = [];\n        const audioRobustness = (protData && protData.audioRobustness && protData.audioRobustness.length > 0) ? protData.audioRobustness : robustnessLevel;\n        const videoRobustness = (protData && protData.videoRobustness && protData.videoRobustness.length > 0) ? protData.videoRobustness : robustnessLevel;\n        const ksSessionType = getSessionType(keySystem);\n        const distinctiveIdentifier = (protData && protData.distinctiveIdentifier) ? protData.distinctiveIdentifier : 'optional';\n        const persistentState = (protData && protData.persistentState) ? protData.persistentState : (ksSessionType === 'temporary') ? 'optional' : 'required';\n\n        mediaInfoArr.forEach((media) => {\n            if (media.type === constants.AUDIO) {\n                audioCapabilities.push(new MediaCapability(media.codec, audioRobustness));\n            } else if (media.type === constants.VIDEO) {\n                videoCapabilities.push(new MediaCapability(media.codec, videoRobustness));\n            }\n        });\n\n        return new KeySystemConfiguration(\n            audioCapabilities, videoCapabilities, distinctiveIdentifier,\n            persistentState,\n            [ksSessionType]);\n    }\n\n    function getSessionType(keySystem) {\n        const protData = getProtData(keySystem);\n        const ksSessionType = (protData && protData.sessionType) ? protData.sessionType : sessionType;\n        return ksSessionType;\n    }\n\n    function selectKeySystem(supportedKS, fromManifest) {\n        const self = this;\n        const requestedKeySystems = [];\n\n        // Reorder key systems according to priority order provided in protectionData\n        supportedKS = supportedKS.sort((ksA, ksB) => {\n            let indexA = (protDataSet && protDataSet[ksA.ks.systemString] && protDataSet[ksA.ks.systemString].priority >= 0) ? protDataSet[ksA.ks.systemString].priority : supportedKS.length;\n            let indexB = (protDataSet && protDataSet[ksB.ks.systemString] && protDataSet[ksB.ks.systemString].priority >= 0) ? protDataSet[ksB.ks.systemString].priority : supportedKS.length;\n            return indexA - indexB;\n        });\n\n        let ksIdx;\n        if (keySystem) {\n            // We have a key system\n            for (ksIdx = 0; ksIdx < supportedKS.length; ksIdx++) {\n                if (keySystem === supportedKS[ksIdx].ks) {\n\n                    requestedKeySystems.push({\n                        ks: supportedKS[ksIdx].ks,\n                        configs: [getKeySystemConfiguration(keySystem)]\n                    });\n\n                    // Ensure that we would be granted key system access using the key\n                    // system and codec information\n                    const onKeySystemAccessComplete = function (event) {\n                        eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                        if (event.error) {\n                            if (!fromManifest) {\n                                eventBus.trigger(events.KEY_SYSTEM_SELECTED, { error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error) });\n                            }\n                        } else {\n                            logger.info('DRM: KeySystem Access Granted');\n                            eventBus.trigger(events.KEY_SYSTEM_SELECTED, { data: event.data });\n                            const protData = getProtData(keySystem);\n                            if (protectionKeyController.isClearKey(keySystem)) {\n                                // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\n                                // initData and overwrite possible initData indicated in encrypted event (EME)\n                                if (protData && protData.hasOwnProperty('clearkeys')) {\n                                    const initData = {kids: Object.keys(protData.clearkeys)};\n                                    supportedKS[ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\n                                }\n                            }\n                            if (supportedKS[ksIdx].sessionId) {\n                                // Load MediaKeySession with sessionId\n                                loadKeySession(supportedKS[ksIdx].sessionId, supportedKS[ksIdx].initData);\n                            } else if (supportedKS[ksIdx].initData) {\n                                // Create new MediaKeySession with initData\n                                createKeySession(supportedKS[ksIdx].initData, supportedKS[ksIdx].cdmData);\n                            }\n                        }\n                    };\n                    eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                    protectionModel.requestKeySystemAccess(requestedKeySystems);\n                    break;\n                }\n            }\n        } else if (keySystem === undefined) {\n            // First time through, so we need to select a key system\n            keySystem = null;\n            pendingNeedKeyData.push(supportedKS);\n\n            // Add all key systems to our request list since we have yet to select a key system\n            for (let i = 0; i < supportedKS.length; i++) {\n                requestedKeySystems.push({\n                    ks: supportedKS[i].ks,\n                    configs: [getKeySystemConfiguration(supportedKS[i].ks)]\n                });\n            }\n\n            let keySystemAccess;\n            const onKeySystemAccessComplete = function (event) {\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (event.error) {\n                    keySystem = undefined;\n                    eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n                    if (!fromManifest) {\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {\n                            data: null,\n                            error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error)\n                        });\n                    }\n                } else {\n                    keySystemAccess = event.data;\n                    logger.info('DRM: KeySystem Access Granted (' + keySystemAccess.keySystem.systemString + ')!  Selecting key system...');\n                    protectionModel.selectKeySystem(keySystemAccess);\n                }\n            };\n            var onKeySystemSelected = function (event) {\n                eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (!event.error) {\n                    if (!protectionModel) {\n                        return;\n                    }\n                    keySystem = protectionModel.getKeySystem();\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, { data: keySystemAccess });\n                    // Set server certificate from protData\n                    const protData = getProtData(keySystem);\n                    if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {\n                        protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);\n                    }\n                    for (let i = 0; i < pendingNeedKeyData.length; i++) {\n                        for (ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {\n                            if (keySystem === pendingNeedKeyData[i][ksIdx].ks) {\n                                if (protectionKeyController.isClearKey(keySystem)) {\n                                    // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\n                                    // initData and overwrite possible initData indicated in encrypted event (EME)\n                                    if (protData && protData.hasOwnProperty('clearkeys')) {\n                                        const initData = {kids: Object.keys(protData.clearkeys)};\n                                        pendingNeedKeyData[i][ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\n                                    }\n                                }\n                                if (pendingNeedKeyData[i][ksIdx].sessionId) {\n                                    // Load MediaKeySession with sessionId\n                                    loadKeySession(pendingNeedKeyData[i][ksIdx].sessionId, pendingNeedKeyData[i][ksIdx].initData);\n                                } else if (pendingNeedKeyData[i][ksIdx].initData !== null) {\n                                    // Create new MediaKeySession with initData\n                                    createKeySession(pendingNeedKeyData[i][ksIdx].initData, pendingNeedKeyData[i][ksIdx].cdmData);\n                                }\n                                break;\n                            }\n                        }\n                    }\n                } else {\n                    keySystem = undefined;\n                    if (!fromManifest) {\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {\n                            data: null,\n                            error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + 'Error selecting key system! -- ' + event.error)\n                        });\n                    }\n                }\n            };\n            eventBus.on(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n            eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n            protectionModel.requestKeySystemAccess(requestedKeySystems);\n        } else {\n            // We are in the process of selecting a key system, so just save the data\n            pendingNeedKeyData.push(supportedKS);\n        }\n    }\n\n    function sendLicenseRequestCompleteEvent(data, error) {\n        eventBus.trigger(events.LICENSE_REQUEST_COMPLETE, { data: data, error: error });\n    }\n\n    function onKeyStatusChanged(e) {\n        if (e.error) {\n            eventBus.trigger(events.KEY_STATUSES_CHANGED, { data: null, error: e.error });\n        } else {\n            logger.debug('DRM: key status = ' + e.status);\n        }\n    }\n\n    function onKeyMessage(e) {\n        logger.debug('DRM: onKeyMessage');\n\n        // Dispatch event to applications indicating we received a key message\n        const keyMessage = e.data;\n        eventBus.trigger(events.KEY_MESSAGE, { data: keyMessage });\n        const messageType = (keyMessage.messageType) ? keyMessage.messageType : 'license-request';\n        const message = keyMessage.message;\n        const sessionToken = keyMessage.sessionToken;\n        const protData = getProtData(keySystem);\n        const keySystemString = keySystem ? keySystem.systemString : null;\n        const licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType);\n        const eventData = {sessionToken: sessionToken, messageType: messageType};\n\n        // Ensure message from CDM is not empty\n        if (!message || message.byteLength === 0) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE));\n            return;\n        }\n\n        // Message not destined for license server\n        if (!licenseServerData) {\n            logger.debug('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionID());\n            sendLicenseRequestCompleteEvent(eventData);\n            return;\n        }\n\n        // Perform any special handling for ClearKey\n        if (protectionKeyController.isClearKey(keySystem)) {\n            const clearkeys = protectionKeyController.processClearKeyLicenseRequest(keySystem, protData, message);\n            if (clearkeys) {\n                logger.debug('DRM: ClearKey license request handled by application!');\n                sendLicenseRequestCompleteEvent(eventData);\n                protectionModel.updateKeySession(sessionToken, clearkeys);\n                return;\n            }\n        }\n\n        // All remaining key system scenarios require a request to a remote license server\n        // Determine license server URL\n        let url = null;\n        if (protData && protData.serverURL) {\n            const serverURL = protData.serverURL;\n            if (typeof serverURL === 'string' && serverURL !== '') {\n                url = serverURL;\n            } else if (typeof serverURL === 'object' && serverURL.hasOwnProperty(messageType)) {\n                url = serverURL[messageType];\n            }\n        } else if (protData && protData.laURL && protData.laURL !== '') {\n            // TODO: Deprecated!\n            url = protData.laURL;\n        } else {\n            // For clearkey use the url defined in the manifest\n            if (protectionKeyController.isClearKey(keySystem)) {\n                url = keySystem.getLicenseServerUrlFromMediaInfo(mediaInfoArr);\n            } else {\n                const psshData = CommonEncryption.getPSSHData(sessionToken.initData);\n                url = keySystem.getLicenseServerURLFromInitData(psshData);\n                if (!url) {\n                    url = e.data.laURL;\n                }\n            }\n        }\n        // Possibly update or override the URL based on the message\n        url = licenseServerData.getServerURLFromMessage(url, message, messageType);\n\n        // Ensure valid license server URL\n        if (!url) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE));\n            return;\n        }\n\n        // Set optional XMLHttpRequest headers from protection data and message\n        const reqHeaders = {};\n        let withCredentials = false;\n        const updateHeaders = function (headers) {\n            if (headers) {\n                for (const key in headers) {\n                    if ('authorization' === key.toLowerCase()) {\n                        withCredentials = true;\n                    }\n                    reqHeaders[key] = headers[key];\n                }\n            }\n        };\n        if (protData) {\n            updateHeaders(protData.httpRequestHeaders);\n        }\n        updateHeaders(keySystem.getRequestHeadersFromMessage(message));\n\n        // Overwrite withCredentials property from protData if present\n        if (protData && typeof protData.withCredentials == 'boolean') {\n            withCredentials = protData.withCredentials;\n        }\n\n        const reportError = function (xhr, eventData, keySystemString, messageType) {\n            const errorMsg = ((xhr.response) ? licenseServerData.getErrorResponse(xhr.response, keySystemString, messageType) : 'NONE');\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR complete. status is \"' +\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState + '.  Response is ' + errorMsg));\n        };\n\n        const onLoad = function (xhr) {\n            if (!protectionModel) {\n                return;\n            }\n\n            if (xhr.status === 200) {\n                const licenseMessage = licenseServerData.getLicenseMessage(xhr.response, keySystemString, messageType);\n                if (licenseMessage !== null) {\n                    sendLicenseRequestCompleteEvent(eventData);\n                    protectionModel.updateKeySession(sessionToken, licenseMessage);\n                } else {\n                    reportError(xhr, eventData, keySystemString, messageType);\n                }\n            } else {\n                reportError(xhr, eventData, keySystemString, messageType);\n            }\n        };\n\n        const onAbort = function (xhr) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR aborted. status is \"' +\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\n        };\n\n        const onError = function (xhr) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR error. status is \"' +\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\n        };\n\n        //const reqPayload = keySystem.getLicenseRequestFromMessage(message);\n        const reqPayload = keySystem.getLicenseRequestFromMessage(message);\n        const reqMethod = licenseServerData.getHTTPMethod(messageType);\n        const responseType = licenseServerData.getResponseType(keySystemString, messageType);\n        const timeout = protData && !isNaN(protData.httpTimeout) ? protData.httpTimeout : LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT;\n        const sessionId = sessionToken.getSessionID() || null;\n\n        doLicenseRequest(url, reqHeaders, reqMethod, responseType, withCredentials, reqPayload,\n            LICENSE_SERVER_REQUEST_RETRIES, timeout, onLoad, onAbort, onError, sessionId);\n    }\n\n    // Implement license requests with a retry mechanism to avoid temporary network issues to affect playback experience\n    function doLicenseRequest(url, headers, method, responseType, withCredentials, payload, retriesCount, timeout, onLoad, onAbort, onError, sessionId) {\n        const xhr = new XMLHttpRequest();\n\n        xhr.open(method, url, true);\n        xhr.responseType = responseType;\n        xhr.withCredentials = withCredentials;\n        if (timeout > 0) {\n            xhr.timeout = timeout;\n        }\n        for (const key in headers) {\n            xhr.setRequestHeader(key, headers[key]);\n        }\n\n        const retryRequest = function () {\n            // fail silently and retry\n            retriesCount--;\n            setTimeout(function () {\n                doLicenseRequest(url, headers, method, responseType, withCredentials, payload,\n                    retriesCount, timeout, onLoad, onAbort, onError, sessionId);\n            }, LICENSE_SERVER_REQUEST_RETRY_INTERVAL);\n        };\n\n        xhr.onload = function () {\n            if (this.status === 200 || retriesCount <= 0) {\n                onLoad(this);\n            } else {\n                logger.warn('License request failed (' + this.status + '). Retrying it... Pending retries: ' + retriesCount);\n                retryRequest();\n            }\n        };\n\n        xhr.ontimeout = xhr.onerror = function () {\n            if (retriesCount <= 0) {\n                onError(this);\n            } else {\n                logger.warn('License request network request failed . Retrying it... Pending retries: ' + retriesCount);\n                retryRequest();\n            }\n        };\n\n        xhr.onabort = function () {\n            onAbort(this);\n        };\n\n        eventBus.trigger(events.LICENSE_REQUEST_SENDING, {\n            url,\n            headers,\n            payload,\n            sessionId\n        });\n\n        xhr.send(payload);\n    }\n\n    function onNeedKey(event, retry) {\n        logger.debug('DRM: onNeedKey');\n        // Ignore non-cenc initData\n        if (event.key.initDataType !== 'cenc') {\n            logger.warn('DRM:  Only \\'cenc\\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);\n            return;\n        }\n\n        if (mediaInfoArr.length === 0) {\n            logger.warn('DRM: onNeedKey called before initializeForMedia, wait until initialized');\n            retry = typeof retry === 'undefined' ? 1 : retry + 1;\n            if (retry < NEEDKEY_BEFORE_INITIALIZE_RETRIES) {\n                needkeyRetries.push(setTimeout(() => {\n                    onNeedKey(event, retry);\n                }, NEEDKEY_BEFORE_INITIALIZE_TIMEOUT));\n                return;\n            }\n\n        }\n\n        // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).\n        // Convert to ArrayBuffer\n        let abInitData = event.key.initData;\n        if (ArrayBuffer.isView(abInitData)) {\n            abInitData = abInitData.buffer;\n        }\n\n        // If key system has already been selected and initData already seen, then do nothing\n        if (keySystem) {\n            const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, abInitData);\n            if (initDataForKS) {\n\n                // Check for duplicate initData\n                const currentInitData = protectionModel.getAllInitData();\n                for (let i = 0; i < currentInitData.length; i++) {\n                    if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\n                        logger.warn('DRM: Ignoring initData because we have already seen it!');\n                        return;\n                    }\n                }\n            }\n        }\n\n        logger.debug('DRM: initData:', String.fromCharCode.apply(null, new Uint8Array(abInitData)));\n\n        const supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);\n        if (supportedKS.length === 0) {\n            logger.debug('DRM: Received needkey event with initData, but we don\\'t support any of the key systems!');\n            return;\n        }\n\n        selectKeySystem(supportedKS, false);\n    }\n\n    function getKeySystems() {\n        return protectionKeyController ? protectionKeyController.getKeySystems() : [];\n    }\n\n    function setKeySystems(keySystems) {\n        if (protectionKeyController) {\n            protectionKeyController.setKeySystems(keySystems);\n        }\n    }\n\n    instance = {\n        initializeForMedia: initializeForMedia,\n        createKeySession: createKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        setMediaElement: setMediaElement,\n        setSessionType: setSessionType,\n        setRobustnessLevel: setRobustnessLevel,\n        setProtectionData: setProtectionData,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getKeySystems: getKeySystems,\n        setKeySystems: setKeySystems,\n        stop: stop,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nProtectionController.__dashjs_factory_name = 'ProtectionController';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport CommonEncryption from './../CommonEncryption';\nimport KeySystemClearKey from './../drm/KeySystemClearKey';\nimport KeySystemW3CClearKey from './../drm/KeySystemW3CClearKey';\nimport KeySystemWidevine from './../drm/KeySystemWidevine';\nimport KeySystemPlayReady from './../drm/KeySystemPlayReady';\nimport DRMToday from './../servers/DRMToday';\nimport PlayReady from './../servers/PlayReady';\nimport Widevine from './../servers/Widevine';\nimport ClearKey from './../servers/ClearKey';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\n/**\n * @module ProtectionKeyController\n * @ignore\n * @description Media protection key system functionality that can be modified/overridden by applications\n */\nfunction ProtectionKeyController() {\n\n    let context = this.context;\n\n    let instance,\n        debug,\n        logger,\n        keySystems,\n        BASE64,\n        clearkeyKeySystem,\n        clearkeyW3CKeySystem;\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.debug) {\n            debug = config.debug;\n            logger = debug.getLogger(instance);\n        }\n\n        if (config.BASE64) {\n            BASE64 = config.BASE64;\n        }\n    }\n\n    function initialize() {\n        keySystems = [];\n\n        let keySystem;\n\n        // PlayReady\n        keySystem = KeySystemPlayReady(context).getInstance({BASE64: BASE64});\n        keySystems.push(keySystem);\n\n        // Widevine\n        keySystem = KeySystemWidevine(context).getInstance({BASE64: BASE64});\n        keySystems.push(keySystem);\n\n        // ClearKey\n        keySystem = KeySystemClearKey(context).getInstance({BASE64: BASE64});\n        keySystems.push(keySystem);\n        clearkeyKeySystem = keySystem;\n\n        // W3C ClearKey\n        keySystem = KeySystemW3CClearKey(context).getInstance({BASE64: BASE64, debug: debug});\n        keySystems.push(keySystem);\n        clearkeyW3CKeySystem = keySystem;\n    }\n\n    /**\n     * Returns a prioritized list of key systems supported\n     * by this player (not necessarily those supported by the\n     * user agent)\n     *\n     * @returns {Array.<KeySystem>} a prioritized\n     * list of key systems\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystems() {\n        return keySystems;\n    }\n\n    /**\n     * Sets the prioritized list of key systems to be supported\n     * by this player.\n     *\n     * @param {Array.<KeySystem>} newKeySystems the new prioritized\n     * list of key systems\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function setKeySystems(newKeySystems) {\n        keySystems = newKeySystems;\n    }\n\n    /**\n     * Returns the key system associated with the given key system string\n     * name (i.e. 'org.w3.clearkey')\n     *\n     * @param {string} systemString the system string\n     * @returns {KeySystem|null} the key system\n     * or null if no supported key system is associated with the given key\n     * system string\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystemBySystemString(systemString) {\n        for (let i = 0; i < keySystems.length; i++) {\n            if (keySystems[i].systemString === systemString) {\n                return keySystems[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Determines whether the given key system is ClearKey.  This is\n     * necessary because the EME spec defines ClearKey and its method\n     * for providing keys to the key session; and this method has changed\n     * between the various API versions.  Our EME-specific ProtectionModels\n     * must know if the system is ClearKey so that it can format the keys\n     * according to the particular spec version.\n     *\n     * @param {Object} keySystem the key\n     * @returns {boolean} true if this is the ClearKey key system, false\n     * otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function isClearKey(keySystem) {\n        return (keySystem === clearkeyKeySystem || keySystem === clearkeyW3CKeySystem);\n    }\n\n    /**\n     * Check equality of initData array buffers.\n     *\n     * @param {ArrayBuffer} initData1 - first initData\n     * @param {ArrayBuffer} initData2 - second initData\n     * @returns {boolean} true if the initData arrays are equal in size and\n     * contents, false otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function initDataEquals(initData1, initData2) {\n        if (initData1.byteLength === initData2.byteLength) {\n            let data1 = new Uint8Array(initData1);\n            let data2 = new Uint8Array(initData2);\n\n            for (let j = 0; j < data1.length; j++) {\n                if (data1[j] !== data2[j]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        let cp, ks, ksIdx, cpIdx;\n        let supportedKS = [];\n\n        if (cps) {\n            const cencContentProtection = CommonEncryption.findCencContentProtection(cps);\n            for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n                ks = keySystems[ksIdx];\n                for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {\n                    cp = cps[cpIdx];\n                    if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {\n                        // Look for DRM-specific ContentProtection\n                        let initData = ks.getInitData(cp, cencContentProtection);\n\n                        supportedKS.push({\n                            ks: keySystems[ksIdx],\n                            initData: initData,\n                            cdmData: ks.getCDMData(),\n                            sessionId: ks.getSessionId(cp)\n                        });\n                    }\n                }\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns key systems supported by this player for the given PSSH\n     * initializationData. Only key systems supported by this player\n     * that have protection data present will be returned.  Key systems are returned in priority order\n     * (highest priority first)\n     *\n     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs\n     * supported by the content\n     * @param {ProtectionData} protDataSet user specified protection data - license server url etc\n     * supported by the content\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystems(initData, protDataSet) {\n        let supportedKS = [];\n        let pssh = CommonEncryption.parsePSSHList(initData);\n        let ks, keySystemString, shouldNotFilterOutKeySystem;\n\n        for (let ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n            ks = keySystems[ksIdx];\n            keySystemString = ks.systemString;\n            shouldNotFilterOutKeySystem = (protDataSet) ? keySystemString in protDataSet : true;\n\n            if (ks.uuid in pssh && shouldNotFilterOutKeySystem) {\n                supportedKS.push({\n                    ks: ks,\n                    initData: pssh[ks.uuid],\n                    cdmData: ks.getCDMData(),\n                    sessionId: ks.getSessionId()\n                });\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns the license server implementation data that should be used for this request.\n     *\n     * @param {KeySystem} keySystem the key system\n     * associated with this license request\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {string} [messageType=\"license-request\"] the message type associated with this\n     * request.  Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @returns {LicenseServer|null} the license server\n     * implementation that should be used for this request or null if the player should not\n     * pass messages of the given type to a license server\n     * @memberof module:ProtectionKeyController\n     * @instance\n     *\n     */\n    function getLicenseServer(keySystem, protData, messageType) {\n\n        // Our default server implementations do not do anything with \"license-release\" or\n        // \"individualization-request\" messages, so we just send a success event\n        if (messageType === 'license-release' || messageType === 'individualization-request') {\n            return null;\n        }\n\n        let licenseServerData = null;\n        if (protData && protData.hasOwnProperty('drmtoday')) {\n            licenseServerData = DRMToday(context).getInstance({BASE64: BASE64});\n        } else if (keySystem.systemString === ProtectionConstants.WIDEVINE_KEYSTEM_STRING) {\n            licenseServerData = Widevine(context).getInstance();\n        } else if (keySystem.systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING) {\n            licenseServerData = PlayReady(context).getInstance();\n        } else if (keySystem.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING) {\n            licenseServerData = ClearKey(context).getInstance();\n        }\n\n        return licenseServerData;\n    }\n\n    /**\n     * Allows application-specific retrieval of ClearKey keys.\n     *\n     * @param {KeySystem} clearkeyKeySystem They exact ClearKey System to be used\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {ArrayBuffer} message the key message from the CDM\n     * @return {ClearKeyKeySet|null} the clear keys associated with\n     * the request or null if no keys can be returned by this function\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function processClearKeyLicenseRequest(clearkeyKeySystem, protData, message) {\n        try {\n            return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);\n        } catch (error) {\n            logger.error('Failed to retrieve clearkeys from ProtectionData');\n            return null;\n        }\n    }\n\n    function setProtectionData(protectionDataSet) {\n        var getProtectionData = function (keySystemString) {\n            var protData = null;\n            if (protectionDataSet) {\n                protData = (keySystemString in protectionDataSet) ? protectionDataSet[keySystemString] : null;\n            }\n            return protData;\n        };\n\n        for (var i = 0; i < keySystems.length; i++) {\n            var keySystem = keySystems[i];\n            if (keySystem.hasOwnProperty('init')) {\n                keySystem.init(getProtectionData(keySystem.systemString));\n            }\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        setProtectionData: setProtectionData,\n        isClearKey: isClearKey,\n        initDataEquals: initDataEquals,\n        getKeySystems: getKeySystems,\n        setKeySystems: setKeySystems,\n        getKeySystemBySystemString: getKeySystemBySystemString,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getSupportedKeySystems: getSupportedKeySystems,\n        getLicenseServer: getLicenseServer,\n        processClearKeyLicenseRequest: processClearKeyLicenseRequest,\n        setConfig: setConfig\n    };\n\n    return instance;\n}\n\nProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';\nexport default dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = 'e2719d58-a985-b3c9-781a-b030af78d30e';\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemClearKey(config) {\n\n    config = config || {};\n    let instance;\n    const BASE64 = config.BASE64;\n    const LICENSE_SERVER_MANIFEST_CONFIGURATIONS = {\n        attributes: ['Laurl', 'laurl'],\n        prefixes: ['clearkey', 'dashif']\n    };\n\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionData} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            const keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                const clearkeyID = jsonMsg.kids[i];\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp, cencContentProtection) {\n        try {\n            let initData = CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n\n            if (!initData && cencContentProtection) {\n                const cencDefaultKid = cencDefaultKidToBase64Representation(cencContentProtection['cenc:default_KID']);\n                const data = {kids: [cencDefaultKid]};\n                initData = new TextEncoder().encode(JSON.stringify(data));\n            }\n\n            return initData;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function cencDefaultKidToBase64Representation(cencDefaultKid) {\n        try {\n            let kid = cencDefaultKid.replace(/-/g, '');\n            kid = btoa(kid.match(/\\w{2}/g).map((a) => {\n                return String.fromCharCode(parseInt(a, 16));\n            }).join(''));\n            return kid.replace(/=/g, '');\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        // Set content type to application/json by default\n        return {\n            'Content-Type': 'application/json'\n        };\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    function getLicenseServerUrlFromMediaInfo(mediaInfo) {\n        try {\n            if (!mediaInfo || mediaInfo.length === 0) {\n                return null;\n            }\n            let i = 0;\n            let licenseServer = null;\n            while (i < mediaInfo.length && !licenseServer) {\n                const info = mediaInfo[i];\n                if (info && info.contentProtection && info.contentProtection.length > 0) {\n                    const clearkeyProtData = info.contentProtection.filter((cp) => {\n                        return cp.schemeIdUri && cp.schemeIdUri === schemeIdURI;\n                    });\n                    if (clearkeyProtData && clearkeyProtData.length > 0) {\n                        let j = 0;\n                        while (j < clearkeyProtData.length && !licenseServer) {\n                            const ckData = clearkeyProtData[j];\n                            let k = 0;\n                            while (k < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes.length && !licenseServer) {\n                                let l = 0;\n                                const attribute = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes[k];\n                                while (l < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes.length && !licenseServer) {\n                                    const prefix = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes[l];\n                                    if (ckData[attribute] && ckData[attribute].__prefix && ckData[attribute].__prefix === prefix && ckData[attribute].__text) {\n                                        licenseServer = ckData[attribute].__text;\n                                    }\n                                    l += 1;\n                                }\n                                k += 1;\n                            }\n                            j += 1;\n                        }\n                    }\n                }\n                i += 1;\n            }\n            return licenseServer;\n        } catch\n            (e) {\n            return null;\n        }\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(/*cp*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        getLicenseServerUrlFromMediaInfo,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Microsoft PlayReady DRM\n *\n * @class\n * @implements KeySystem\n */\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\nconst systemString = ProtectionConstants.PLAYREADY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\nconst PRCDMData = '<PlayReadyCDMData type=\"LicenseAcquisition\"><LicenseAcquisition version=\"1.0\" Proactive=\"false\"><CustomData encoding=\"base64encoded\">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';\nlet protData;\n\nfunction KeySystemPlayReady(config) {\n\n    config = config || {};\n    let instance;\n    let messageFormat = 'utf-16';\n    const BASE64 = config.BASE64;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray') || !BASE64.hasOwnProperty('decodeArray') ) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getRequestHeadersFromMessage(message) {\n        let msg,\n            xmlDoc;\n        const headers = {};\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        msg = String.fromCharCode.apply(null, dataview);\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        const headerNameList = xmlDoc.getElementsByTagName('name');\n        const headerValueList = xmlDoc.getElementsByTagName('value');\n        for (let i = 0; i < headerNameList.length; i++) {\n            headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\n        }\n        // Some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\n        // this is NOT w3c conform and license servers may reject the request!\n        // -> rename it to proper w3c definition!\n        if (headers.hasOwnProperty('Content')) {\n            headers['Content-Type'] = headers.Content;\n            delete headers.Content;\n        }\n        // Set Content-Type header by default if not provided in the the CDM message (<PlayReadyKeyMessage/>)\n        // or if the message contains directly the challenge itself (Ex: LG SmartTVs)\n        if (!headers.hasOwnProperty('Content-Type')) {\n            headers['Content-Type'] = 'text/xml; charset=utf-8';\n        }\n        return headers;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        let licenseRequest = null;\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        checkConfig();\n        const msg = String.fromCharCode.apply(null, dataview);\n        const xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        if (xmlDoc.getElementsByTagName('PlayReadyKeyMessage')[0]) {\n            const Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\n            if (Challenge) {\n                licenseRequest = BASE64.decode(Challenge);\n            }\n        } else {\n            // The message from CDM is not a wrapped message as on IE11 and Edge,\n            // thus it contains direclty the challenge itself\n            // (note that the xmlDoc at this point may be unreadable since it may have been interpreted as UTF-16)\n            return message;\n        }\n\n        return licenseRequest;\n    }\n\n    function getLicenseServerURLFromInitData(initData) {\n        if (initData) {\n            const data = new DataView(initData);\n            const numRecords = data.getUint16(4, true);\n            let offset = 6;\n            const parser = new DOMParser();\n\n            for (let i = 0; i < numRecords; i++) {\n                // Parse the PlayReady Record header\n                const recordType = data.getUint16(offset, true);\n                offset += 2;\n                const recordLength = data.getUint16(offset, true);\n                offset += 2;\n                if (recordType !== 0x0001) {\n                    offset += recordLength;\n                    continue;\n                }\n\n                const recordData = initData.slice(offset, offset + recordLength);\n                const record = String.fromCharCode.apply(null, new Uint16Array(recordData));\n                const xmlDoc = parser.parseFromString(record, 'application/xml');\n\n                // First try <LA_URL>\n                if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\n                    const laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\n                    if (laurl) {\n                        return laurl;\n                    }\n                }\n\n                // Optionally, try <LUI_URL>\n                if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\n                    const luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\n                    if (luiurl) {\n                        return luiurl;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    function getInitData(cpData) {\n        // * desc@ getInitData\n        // *   generate PSSH data from PROHeader defined in MPD file\n        // *   PSSH format:\n        // *   size (4)\n        // *   box type(PSSH) (8)\n        // *   Protection SystemID (16)\n        // *   protection system data size (4) - length of decoded PROHeader\n        // *   decoded PROHeader data from MPD file\n        const PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\n        const playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\n\n        let byteCursor = 0;\n        let uint8arraydecodedPROHeader = null;\n\n        let PROSize,\n            PSSHSize,\n            PSSHBoxBuffer,\n            PSSHBox,\n            PSSHData;\n\n        checkConfig();\n        if (!cpData) {\n            return null;\n        }\n        // Handle common encryption PSSH\n        if ('pssh' in cpData) {\n            return CommonEncryption.parseInitDataFromContentProtection(cpData, BASE64);\n        }\n        // Handle native MS PlayReady ContentProtection elements\n        if ('pro' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\n        }\n        else if ('prheader' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\n        }\n        else {\n            return null;\n        }\n\n        PROSize = uint8arraydecodedPROHeader.length;\n        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\n\n        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\n\n        PSSHBox = new Uint8Array(PSSHBoxBuffer);\n        PSSHData = new DataView(PSSHBoxBuffer);\n\n        PSSHData.setUint32(byteCursor, PSSHSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(PSSHBoxType, byteCursor);\n        byteCursor += PSSHBoxType.length;\n\n        PSSHBox.set(playreadySystemID, byteCursor);\n        byteCursor += playreadySystemID.length;\n\n        PSSHData.setUint32(byteCursor, PROSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\n        byteCursor += PROSize;\n\n        return PSSHBox.buffer;\n    }\n\n    /**\n     * It seems that some PlayReady implementations return their XML-based CDM\n     * messages using UTF16, while others return them as UTF8.  Use this function\n     * to modify the message format to expect when parsing CDM messages.\n     *\n     * @param {string} format the expected message format.  Either \"utf-8\" or \"utf-16\".\n     * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\n     */\n    function setPlayReadyMessageFormat(format) {\n        if (format !== 'utf-8' && format !== 'utf-16') {\n            throw new Error('Specified message format is not one of \"utf-8\" or \"utf-16\"');\n        }\n        messageFormat = format;\n    }\n\n    /**\n     * Initialize the Key system with protection data\n     * @param {Object} protectionData the protection data\n     */\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n\n    /**\n     * Get Playready Custom data\n     */\n    function getCDMData() {\n        let customData,\n            cdmData,\n            cdmDataBytes,\n            i;\n\n        checkConfig();\n        if (protData && protData.cdmData) {\n            // Convert custom data into multibyte string\n            customData = [];\n            for (i = 0; i < protData.cdmData.length; ++i) {\n                customData.push(protData.cdmData.charCodeAt(i));\n                customData.push(0);\n            }\n            customData = String.fromCharCode.apply(null, customData);\n\n            // Encode in Base 64 the custom data string\n            customData = BASE64.encode(customData);\n\n            // Initialize CDM data with Base 64 encoded custom data\n            // (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)\n            cdmData = PRCDMData.replace('%CUSTOMDATA%', customData);\n\n            // Convert CDM data into multibyte characters\n            cdmDataBytes = [];\n            for (i = 0; i < cdmData.length; ++i) {\n                cdmDataBytes.push(cdmData.charCodeAt(i));\n                cdmDataBytes.push(0);\n            }\n\n            return new Uint8Array(cdmDataBytes).buffer;\n        }\n\n        return null;\n    }\n\n    function getSessionId(cp) {\n        // Get sessionId from protectionData or from manifest\n        if (protData && protData.sessionId) {\n            return protData.sessionId;\n        } else if (cp && cp.sessionId) {\n            return cp.sessionId;\n        }\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        setPlayReadyMessageFormat: setPlayReadyMessageFormat,\n        init: init\n    };\n\n    return instance;\n}\n\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemW3CClearKey(config) {\n    let instance;\n    const BASE64 = config.BASE64;\n    const logger = config.debug.getLogger(instance);\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionDataSet} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            const keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                const clearkeyID = jsonMsg.kids[i];\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n\n            logger.warn('ClearKey schemeIdURI is using W3C Common PSSH systemID (1077efec-c0b2-4d02-ace3-3c1e52e2fb4b) in Content Protection. See DASH-IF IOP v4.1 section 7.6.2.4');\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(/*cp*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemW3CClearKey.__dashjs_factory_name = 'KeySystemW3CClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemW3CClearKey); /* jshint ignore:line */\n\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Google Widevine DRM\n *\n * @class\n * @implements MediaPlayer.dependencies.protection.KeySystem\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = 'edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\nconst systemString = ProtectionConstants.WIDEVINE_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemWidevine(config) {\n\n    config = config || {};\n    let instance;\n    let protData = null;\n    const BASE64 = config.BASE64;\n\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage( /*message*/ ) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData( /*initData*/ ) {\n        return null;\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(cp) {\n        // Get sessionId from protectionData or from manifest\n        if (protData && protData.sessionId) {\n            return protData.sessionId;\n        } else if (cp && cp.sessionId) {\n            return cp.sessionId;\n        }\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        init: init,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId\n    };\n\n    return instance;\n}\n\nKeySystemWidevine.__dashjs_factory_name = 'KeySystemWidevine';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemWidevine); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport ErrorsBase from '../../../core/errors/ErrorsBase';\n/**\n * @class\n */\nclass ProtectionErrors extends ErrorsBase {\n\tconstructor () {\n        super();\n\n        /**\n         *  Generid key Error code\n         */\n        this.MEDIA_KEYERR_CODE = 100;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_UNKNOWN_CODE = 101;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_CLIENT_CODE = 102;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_SERVICE_CODE = 103;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_OUTPUT_CODE = 104;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_HARDWARECHANGE_CODE = 105;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_DOMAIN_CODE = 106;\n\n        /**\n         *  Error code returned when an error occured in keymessage event for ProtectionModel_01b\n         */\n        this.MEDIA_KEY_MESSAGE_ERROR_CODE = 107;\n        /**\n         *  Error code returned when challenge is invalid in keymessage event (event triggered by CDM)\n         */\n        this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE = 108;\n        /**\n         *  Error code returned when License server certificate has not been successfully updated\n         */\n        this.SERVER_CERTIFICATE_UPDATED_ERROR_CODE = 109;\n        /**\n         *  Error code returned when license validity has expired\n         */\n        this.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE = 110;\n        /**\n         *  Error code returned when no licenser url is defined\n         */\n        this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE = 111;\n        /**\n         *  Error code returned when key system access is denied\n         */\n        this.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE = 112;\n        /**\n         *  Error code returned when key session has not been successfully created\n         */\n        this.KEY_SESSION_CREATED_ERROR_CODE = 113;\n        /**\n         *  Error code returned when license request failed after a keymessage event has been triggered\n         */\n        this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE = 114;\n\n        this.MEDIA_KEYERR_UNKNOWN_MESSAGE = 'An unspecified error occurred. This value is used for errors that don\\'t match any of the other codes.';\n        this.MEDIA_KEYERR_CLIENT_MESSAGE = 'The Key System could not be installed or updated.';\n        this.MEDIA_KEYERR_SERVICE_MESSAGE = 'The message passed into update indicated an error from the license service.';\n        this.MEDIA_KEYERR_OUTPUT_MESSAGE = 'There is no available output device with the required characteristics for the content protection system.';\n        this.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE = 'A hardware configuration change caused a content protection error.';\n        this.MEDIA_KEYERR_DOMAIN_MESSAGE = 'An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.';\n        this.MEDIA_KEY_MESSAGE_ERROR_MESSAGE = 'Multiple key sessions were creates with a user-agent that does not support sessionIDs!! Unpredictable behavior ahead!';\n        this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE = 'DRM: Empty key message from CDM';\n        this.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE = 'Error updating server certificate -- ';\n        this.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE = 'DRM: KeyStatusChange error! -- License has expired';\n        this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE = 'DRM: No license server URL specified!';\n        this.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE = 'DRM: KeySystem Access Denied! -- ';\n        this.KEY_SESSION_CREATED_ERROR_MESSAGE = 'DRM: unable to create session! --';\n        this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE = 'DRM: licenser error! --';\n    }\n}\n\nlet protectionErrors = new ProtectionErrors();\nexport default protectionErrors;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Initial implementation of EME\n *\n * Implemented by Google Chrome prior to v36\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport DashJSError from '../../vo/DashJSError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport ProtectionErrors from '../errors/ProtectionErrors';\n\nfunction ProtectionModel_01b(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n    const api = config.api;\n    const errHandler = config.errHandler;\n\n    let instance,\n        logger,\n        videoElement,\n        keySystem,\n        protectionKeyController,\n\n        // With this version of the EME APIs, sessionIDs are not assigned to\n        // sessions until the first key message is received.  We are assuming\n        // that in the case of multiple sessions, key messages will be received\n        // in the order that generateKeyRequest() is called.\n        // Holding spot for newly-created sessions until we determine whether or\n        // not the CDM supports sessionIDs\n        pendingSessions,\n\n        // List of sessions that have been initialized.  Only the first position will\n        // be used in the case that the CDM does not support sessionIDs\n        sessions,\n\n        // Not all CDMs support the notion of sessionIDs.  Without sessionIDs\n        // there is no way for us to differentiate between sessions, therefore\n        // we must only allow a single session.  Once we receive the first key\n        // message we can set this flag to determine if more sessions are allowed\n        moreSessionsAllowed,\n\n        // This is our main event handler for all desired HTMLMediaElement events\n        // related to EME.  These events are translated into our API-independent\n        // versions of the same events\n        eventHandler;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        videoElement = null;\n        keySystem = null;\n        pendingSessions = [];\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        if (videoElement) {\n            removeEventListeners();\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            closeKeySession(sessions[i]);\n        }\n        eventBus.trigger(events.TEARDOWN_COMPLETE);\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < pendingSessions.length; i++) {\n            retVal.push(pendingSessions[i].initData);\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        let ve = videoElement;\n        if (!ve) { // Must have a video element to do this capability tests\n            ve = document.createElement('video');\n        }\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\n            const configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                //let audios = configs[configIdx].audioCapabilities;\n                const videos = configs[configIdx].videoCapabilities;\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== '') {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! -- No valid audio/video content configurations detected!' });\n        }\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystem = keySystemAccess.keySystem;\n        eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement) {\n            return;\n        }\n\n        // Replacing the previous element\n        if (videoElement) {\n            removeEventListeners();\n\n            // Close any open sessions - avoids memory leak on LG webOS 2016/2017 TVs\n            for (var i = 0; i < sessions.length; i++) {\n                closeKeySession(sessions[i]);\n            }\n            sessions = [];\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.keyerror, eventHandler);\n            videoElement.addEventListener(api.needkey, eventHandler);\n            videoElement.addEventListener(api.keymessage, eventHandler);\n            videoElement.addEventListener(api.keyadded, eventHandler);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        }\n    }\n\n    function createKeySession(initData /*, protData, keySystemType */) {\n        if (!keySystem) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Determine if creating a new session is allowed\n        if (moreSessionsAllowed || sessions.length === 0) {\n            const newSession = { // Implements SessionToken\n                sessionID: null,\n                initData: initData,\n                getSessionID: function () {\n                    return this.sessionID;\n                },\n\n                getExpirationTime: function () {\n                    return NaN;\n                },\n\n                getSessionType: function () {\n                    return 'temporary';\n                }\n            };\n            pendingSessions.push(newSession);\n\n            // Send our request to the CDM\n            videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(initData));\n\n            return newSession;\n\n        } else {\n            throw new Error('Multiple sessions not allowed!');\n        }\n\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const sessionID = sessionToken.sessionID;\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the CDM\n            videoElement[api.addKey](keySystem.systemString,\n                new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionID);\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            for (let i = 0; i < message.keyPairs.length; i++) {\n                videoElement[api.addKey](keySystem.systemString,\n                    message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID);\n            }\n        }\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the CDM\n        try {\n            videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionID);\n        } catch (error) {\n            eventBus.trigger(events.KEY_SESSION_CLOSED, { data: null, error: 'Error closing session (' + sessionToken.sessionID + ') ' + error.message });\n        }\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                let sessionToken = null;\n                switch (event.type) {\n                    case api.needkey:\n                        let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                        eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, 'cenc') });\n                        break;\n\n                    case api.keyerror:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            let code = ProtectionErrors.MEDIA_KEYERR_CODE;\n                            let msg = '';\n                            switch (event.errorCode.code) {\n                                case 1:\n                                    code = ProtectionErrors.MEDIA_KEYERR_UNKNOWN_CODE;\n                                    msg += 'MEDIA_KEYERR_UNKNOWN - ' + ProtectionErrors.MEDIA_KEYERR_UNKNOWN_MESSAGE;\n                                    break;\n                                case 2:\n                                    code = ProtectionErrors.MEDIA_KEYERR_CLIENT_CODE;\n                                    msg += 'MEDIA_KEYERR_CLIENT - ' + ProtectionErrors.MEDIA_KEYERR_CLIENT_MESSAGE;\n                                    break;\n                                case 3:\n                                    code = ProtectionErrors.MEDIA_KEYERR_SERVICE_CODE;\n                                    msg += 'MEDIA_KEYERR_SERVICE - ' + ProtectionErrors.MEDIA_KEYERR_SERVICE_MESSAGE;\n                                    break;\n                                case 4:\n                                    code = ProtectionErrors.MEDIA_KEYERR_OUTPUT_CODE;\n                                    msg += 'MEDIA_KEYERR_OUTPUT - ' + ProtectionErrors.MEDIA_KEYERR_OUTPUT_MESSAGE;\n                                    break;\n                                case 5:\n                                    code = ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_CODE;\n                                    msg += 'MEDIA_KEYERR_HARDWARECHANGE - ' + ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE;\n                                    break;\n                                case 6:\n                                    code = ProtectionErrors.MEDIA_KEYERR_DOMAIN_CODE;\n                                    msg += 'MEDIA_KEYERR_DOMAIN - ' + ProtectionErrors.MEDIA_KEYERR_DOMAIN_MESSAGE;\n                                    break;\n                            }\n                            msg += '  System Code = ' + event.systemCode;\n                            // TODO: Build error string based on key error\n                            eventBus.trigger(events.KEY_ERROR, { data: new DashJSError(code, msg, sessionToken) });\n                        } else {\n                            logger.error('No session token found for key error');\n                        }\n                        break;\n\n                    case api.keyadded:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            logger.debug('DRM: Key added.');\n                            eventBus.trigger(events.KEY_ADDED, { data: sessionToken });//TODO not sure anything is using sessionToken? why there?\n                        } else {\n                            logger.debug('No session token found for key added');\n                        }\n                        break;\n\n                    case api.keymessage:\n                        // If this CDM does not support session IDs, we will be limited\n                        // to a single session\n                        moreSessionsAllowed = (event.sessionId !== null) && (event.sessionId !== undefined);\n\n                        // SessionIDs supported\n                        if (moreSessionsAllowed) {\n                            // Attempt to find an uninitialized token with this sessionID\n                            sessionToken = findSessionByID(sessions, event.sessionId);\n                            if (!sessionToken && pendingSessions.length > 0) {\n\n                                // This is the first message for our latest session, so set the\n                                // sessionID and add it to our list\n                                sessionToken = pendingSessions.shift();\n                                sessions.push(sessionToken);\n                                sessionToken.sessionID = event.sessionId;\n\n                                eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\n                            }\n                        } else if (pendingSessions.length > 0) { // SessionIDs not supported\n                            sessionToken = pendingSessions.shift();\n                            sessions.push(sessionToken);\n\n                            if (pendingSessions.length !== 0) {\n                                errHandler.error(new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_MESSAGE));\n                            }\n                        }\n\n                        if (sessionToken) {\n                            let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n\n                            // For ClearKey, the spec mandates that you pass this message to the\n                            // addKey method, so we always save it to the token since there is no\n                            // way to tell which key system is in use\n                            sessionToken.keyMessage = message;\n                            eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(sessionToken, message, event.defaultURL) });\n\n                        } else {\n                            logger.warn('No session token found for key message');\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    /**\n     * Helper function to retrieve the stored session token based on a given\n     * sessionID value\n     *\n     * @param {Array} sessionArray - the array of sessions to search\n     * @param {*} sessionID - the sessionID to search for\n     * @returns {*} the session token with the given sessionID\n     */\n    function findSessionByID(sessionArray, sessionID) {\n        if (!sessionID || !sessionArray) {\n            return null;\n        } else {\n            const len = sessionArray.length;\n            for (let i = 0; i < len; i++) {\n                if (sessionArray[i].sessionID == sessionID) {\n                    return sessionArray[i];\n                }\n            }\n            return null;\n        }\n    }\n\n    function removeEventListeners() {\n        videoElement.removeEventListener(api.keyerror, eventHandler);\n        videoElement.removeEventListener(api.needkey, eventHandler);\n        videoElement.removeEventListener(api.keymessage, eventHandler);\n        videoElement.removeEventListener(api.keyadded, eventHandler);\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        stop: reset,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_01b.__dashjs_factory_name = 'ProtectionModel_01b';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_01b); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Most recent EME implementation\n *\n * Implemented by Google Chrome v36+ (Windows, OSX, Linux)\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport ProtectionErrors from '../errors/ProtectionErrors';\nimport DashJSError from '../../vo/DashJSError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nfunction ProtectionModel_21Jan2015(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n\n    let instance,\n        logger,\n        keySystem,\n        videoElement,\n        mediaKeys,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        keySystem = null;\n        videoElement = null;\n        mediaKeys = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        const numSessions = sessions.length;\n        let session;\n\n        if (numSessions !== 0) {\n            // Called when we are done closing a session.  Success or fail\n            const done = function (session) {\n                removeSession(session);\n                if (sessions.length === 0) {\n                    if (videoElement) {\n                        videoElement.removeEventListener('encrypted', eventHandler);\n                        videoElement.setMediaKeys(null).then(function () {\n                            eventBus.trigger(events.TEARDOWN_COMPLETE);\n                        });\n                    } else {\n                        eventBus.trigger(events.TEARDOWN_COMPLETE);\n                    }\n                }\n            };\n            for (let i = 0; i < numSessions; i++) {\n                session = sessions[i];\n                (function (s) {\n                    // Override closed promise resolver\n                    session.session.closed.then(function () {\n                        done(s);\n                    });\n                    // Close the session and handle errors, otherwise promise\n                    // resolver above will be called\n                    closeKeySessionInternal(session).catch(function () {\n                        done(s);\n                    });\n\n                })(session);\n            }\n        } else {\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\n        }\n    }\n\n    function stop() {\n        // Close and remove not usable sessions\n        let session;\n        for (let i = 0; i < sessions.length; i++) {\n            session = sessions[i];\n            if (!session.getUsable()) {\n                closeKeySessionInternal(session).catch(function () {\n                    removeSession(session);\n                });\n            }\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i].initData) {\n                retVal.push(sessions[i].initData);\n            }\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        requestKeySystemAccessInternal(ksConfigurations, 0);\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystemAccess.mksa.createMediaKeys().then(function (mkeys) {\n            keySystem = keySystemAccess.keySystem;\n            mediaKeys = mkeys;\n            if (videoElement) {\n                videoElement.setMediaKeys(mediaKeys).then(function () {\n                    eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n                });\n            } else {\n                eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n            }\n\n        }).catch(function () {\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, { error: 'Error selecting keys system (' + keySystemAccess.keySystem.systemString + ')! Could not create MediaKeys -- TODO' });\n        });\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener('encrypted', eventHandler);\n            if (videoElement.setMediaKeys) {\n                videoElement.setMediaKeys(null);\n            }\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener('encrypted', eventHandler);\n            if (videoElement.setMediaKeys && mediaKeys) {\n                videoElement.setMediaKeys(mediaKeys);\n            }\n        }\n    }\n\n    function setServerCertificate(serverCertificate) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not set server certificate until you have selected a key system');\n        }\n        mediaKeys.setServerCertificate(serverCertificate).then(function () {\n            logger.info('DRM: License server certificate successfully updated.');\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED);\n        }).catch(function (error) {\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED, { error: new DashJSError(ProtectionErrors.SERVER_CERTIFICATE_UPDATED_ERROR_CODE, ProtectionErrors.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE + error.name) });\n        });\n    }\n\n    function createKeySession(initData, protData, sessionType) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        const session = mediaKeys.createSession(sessionType);\n        const sessionToken = createSessionToken(session, initData, sessionType);\n        const ks = this.getKeySystem();\n\n        // Generate initial key request.\n        // keyids type is used for clearkey when keys are provided directly in the protection data and then request to a license server is not needed\n        const dataType = ks.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING && (initData ||  (protData && protData.clearkeys)) ? 'keyids' : 'cenc';\n        session.generateRequest(dataType, initData).then(function () {\n            logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\n        }).catch(function (error) {\n            // TODO: Better error string\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\n                data: null,\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Error generating key request -- ' + error.name)\n            });\n        });\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const session = sessionToken.session;\n\n        // Send our request to the key session\n        if (protectionKeyController.isClearKey(keySystem)) {\n            message = message.toJWK();\n        }\n        session.update(message).catch(function (error) {\n            eventBus.trigger(events.KEY_ERROR, { data: new DashJSError(ProtectionErrors.MEDIA_KEYERR_CODE, 'Error sending update() message! ' + error.name, sessionToken) });\n        });\n    }\n\n    function loadKeySession(sessionID, initData, sessionType) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not load sessions until you have selected a key system');\n        }\n\n        // Check if session Id is not already loaded or loading\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessionID === sessions[i].sessionId) {\n                logger.warn('DRM: Ignoring session ID because we have already seen it!');\n                return;\n            }\n        }\n\n        const session = mediaKeys.createSession(sessionType);\n        const sessionToken = createSessionToken(session, initData, sessionType, sessionID);\n\n        // Load persisted session data into our newly created session object\n        session.load(sessionID).then(function (success) {\n            if (success) {\n                logger.debug('DRM: Session loaded.  SessionID = ' + sessionToken.getSessionID());\n                eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\n            } else {\n                removeSession(sessionToken);\n                eventBus.trigger(events.KEY_SESSION_CREATED, {\n                    data: null,\n                    error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session! Invalid Session ID (' + sessionID + ')')\n                });\n            }\n        }).catch(function (error) {\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\n                data: null,\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session (' + sessionID + ')! ' + error.name)\n            });\n        });\n    }\n\n    function removeKeySession(sessionToken) {\n        const session = sessionToken.session;\n\n        session.remove().then(function () {\n            logger.debug('DRM: Session removed.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_REMOVED, { data: sessionToken.getSessionID() });\n        }, function (error) {\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {\n                data: null,\n                error: 'Error removing session (' + sessionToken.getSessionID() + '). ' + error.name\n            });\n\n        });\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the key session\n        closeKeySessionInternal(sessionToken).catch(function (error) {\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {\n                data: null,\n                error: 'Error closing session (' + sessionToken.getSessionID() + ') ' + error.name\n            });\n        });\n    }\n\n    function requestKeySystemAccessInternal(ksConfigurations, idx) {\n\n        if (navigator.requestMediaKeySystemAccess === undefined ||\n            typeof navigator.requestMediaKeySystemAccess !== 'function') {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Insecure origins are not allowed' });\n            return;\n        }\n\n        (function (i) {\n            const keySystem = ksConfigurations[i].ks;\n            const configs = ksConfigurations[i].configs;\n            let systemString = keySystem.systemString;\n\n            // PATCH to support persistent licenses on Edge browser (see issue #2658)\n            if (systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING && configs[0].persistentState === 'required') {\n                systemString += '.recommendation';\n            }\n\n            navigator.requestMediaKeySystemAccess(systemString, configs).then(function (mediaKeySystemAccess) {\n                // Chrome 40 does not currently implement MediaKeySystemAccess.getConfiguration()\n                const configuration = (typeof mediaKeySystemAccess.getConfiguration === 'function') ?\n                    mediaKeySystemAccess.getConfiguration() : null;\n                const keySystemAccess = new KeySystemAccess(keySystem, configuration);\n                keySystemAccess.mksa = mediaKeySystemAccess;\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: keySystemAccess });\n\n            }).catch(function (error) {\n                if (++i < ksConfigurations.length) {\n                    requestKeySystemAccessInternal(ksConfigurations, i);\n                } else {\n                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! ' + error.message });\n                }\n            });\n        })(idx);\n    }\n\n    function closeKeySessionInternal(sessionToken) {\n        const session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener('keystatuseschange', sessionToken);\n        session.removeEventListener('message', sessionToken);\n\n        // Send our request to the key session\n        return session.close();\n    }\n\n    // This is our main event handler for all desired HTMLMediaElement events\n    // related to EME.  These events are translated into our API-independent\n    // versions of the same events\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case 'encrypted':\n                        if (event.initData) {\n                            let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, event.initDataType) });\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n    function removeSession(token) {\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === token) {\n                sessions.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    function parseKeyStatus(args) {\n        // Edge and Chrome implement different version of keystatues, param are not on same order\n        let status, keyId;\n        if (args && args.length > 0) {\n            if (args[0]) {\n                if (typeof args[0] === 'string') {\n                    status = args[0];\n                } else {\n                    keyId = args[0];\n                }\n            }\n\n            if (args[1]) {\n                if (typeof args[1] === 'string') {\n                    status = args[1];\n                } else {\n                    keyId = args[1];\n                }\n            }\n        }\n        return {\n            status: status,\n            keyId: keyId\n        };\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(session, initData, sessionType, sessionID) {\n        const token = { // Implements SessionToken\n            session: session,\n            initData: initData,\n            sessionId: sessionID,\n\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case 'keystatuseschange':\n                        eventBus.trigger(events.KEY_STATUSES_CHANGED, { data: this });\n                        event.target.keyStatuses.forEach(function () {\n                            let keyStatus = parseKeyStatus(arguments);\n                            switch (keyStatus.status) {\n                                case 'expired':\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, { error: new DashJSError(ProtectionErrors.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE, ProtectionErrors.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE) });\n                                    break;\n                                default:\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, keyStatus);\n                                    break;\n                            }\n                        });\n                        break;\n\n                    case 'message':\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, undefined, event.messageType) });\n                        break;\n                }\n            },\n\n            getSessionID: function () {\n                return session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return session.expiration;\n            },\n\n            getKeyStatuses: function () {\n                return session.keyStatuses;\n            },\n\n            getUsable: function () {\n                let usable = false;\n                session.keyStatuses.forEach(function () {\n                    let keyStatus = parseKeyStatus(arguments);\n                    if (keyStatus.status === 'usable') {\n                        usable = true;\n                    }\n                });\n                return usable;\n            },\n\n            getSessionType: function () {\n                return sessionType;\n            }\n        };\n\n        // Add all event listeners\n        session.addEventListener('keystatuseschange', token);\n        session.addEventListener('message', token);\n\n        // Register callback for session closed Promise\n        session.closed.then(function () {\n            removeSession(token);\n            logger.debug('DRM: Session closed.  SessionID = ' + token.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_CLOSED, { data: token.getSessionID() });\n        });\n\n        // Add to our session list\n        sessions.push(token);\n\n        return token;\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        setServerCertificate: setServerCertificate,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        stop: stop,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_21Jan2015.__dashjs_factory_name = 'ProtectionModel_21Jan2015';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_21Jan2015); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.\n *\n * Implemented by Internet Explorer 11 (Windows 8.1)\n *\n * @implements ProtectionModel\n * @class\n */\n\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport DashJSError from '../../vo/DashJSError';\nimport ProtectionErrors from '../errors/ProtectionErrors';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\n\nfunction ProtectionModel_3Feb2014(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n    const api = config.api;\n\n    let instance,\n        logger,\n        videoElement,\n        keySystem,\n        mediaKeys,\n        keySystemAccess,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        videoElement = null;\n        keySystem = null;\n        mediaKeys = null;\n        keySystemAccess = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        try {\n            for (let i = 0; i < sessions.length; i++) {\n                closeKeySession(sessions[i]);\n            }\n            if (videoElement) {\n                videoElement.removeEventListener(api.needkey, eventHandler);\n            }\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\n        } catch (error) {\n            eventBus.trigger(events.TEARDOWN_COMPLETE, { error: 'Error tearing down key sessions and MediaKeys! -- ' + error.message });\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\n            const configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                const audios = configs[configIdx].audioCapabilities;\n                const videos = configs[configIdx].videoCapabilities;\n\n                // Look for supported audio container/codecs\n                if (audios && audios.length !== 0) {\n                    supportedAudio = []; // Indicates that we have a requested audio config\n                    for (let audioIdx = 0; audioIdx < audios.length; audioIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType)) {\n                            supportedAudio.push(audios[audioIdx]);\n                        }\n                    }\n                }\n\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType)) {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! -- No valid audio/video content configurations detected!' });\n        }\n    }\n\n    function selectKeySystem(ksAccess) {\n        try {\n            mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);\n            keySystem = ksAccess.keySystem;\n            keySystemAccess = ksAccess;\n            if (videoElement) {\n                setMediaKeys();\n            }\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n        } catch (error) {\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, { error: 'Error selecting keys system (' + keySystem.systemString + ')! Could not create MediaKeys -- TODO' });\n        }\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener(api.needkey, eventHandler);\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.needkey, eventHandler);\n            if (mediaKeys) {\n                setMediaKeys();\n            }\n        }\n    }\n\n    function createKeySession(initData, protData, sessionType, cdmData) {\n        if (!keySystem || !mediaKeys || !keySystemAccess) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Use the first video capability for the contentType.\n        // TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format\n\n        // If player is trying to playback Audio only stream - don't error out.\n        let capabilities = null;\n\n        if (keySystemAccess.ksConfiguration.videoCapabilities && keySystemAccess.ksConfiguration.videoCapabilities.length > 0) {\n            capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0];\n        }\n\n        if (capabilities === null && keySystemAccess.ksConfiguration.audioCapabilities && keySystemAccess.ksConfiguration.audioCapabilities.length > 0) {\n            capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0];\n        }\n\n        if (capabilities === null) {\n            throw new Error('Can not create sessions for unknown content types.');\n        }\n\n        const contentType = capabilities.contentType;\n        const session = mediaKeys.createSession(contentType, new Uint8Array(initData), cdmData ? new Uint8Array(cdmData) : null);\n        const sessionToken = createSessionToken(session, initData);\n\n        // Add all event listeners\n        session.addEventListener(api.error, sessionToken);\n        session.addEventListener(api.message, sessionToken);\n        session.addEventListener(api.ready, sessionToken);\n        session.addEventListener(api.close, sessionToken);\n\n        // Add to our session list\n        sessions.push(sessionToken);\n        logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n        eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const session = sessionToken.session;\n\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the key session\n            session.update(new Uint8Array(message));\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            session.update(new Uint8Array(message.toJWK()));\n        }\n    }\n\n    /**\n     * Close the given session and release all associated keys.  Following\n     * this call, the sessionToken becomes invalid\n     *\n     * @param {Object} sessionToken - the session token\n     */\n    function closeKeySession(sessionToken) {\n        const session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener(api.error, sessionToken);\n        session.removeEventListener(api.message, sessionToken);\n        session.removeEventListener(api.ready, sessionToken);\n        session.removeEventListener(api.close, sessionToken);\n\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === sessionToken) {\n                sessions.splice(i, 1);\n                break;\n            }\n        }\n\n        // Send our request to the key session\n        session[api.release]();\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case api.needkey:\n                        if (event.initData) {\n                            const initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, 'cenc') });\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    // IE11 does not let you set MediaKeys until it has entered a certain\n    // readyState, so we need this logic to ensure we don't set the keys\n    // too early\n    function setMediaKeys() {\n        let boundDoSetKeys = null;\n        const doSetKeys = function () {\n            videoElement.removeEventListener('loadedmetadata', boundDoSetKeys);\n            videoElement[api.setMediaKeys](mediaKeys);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        };\n        if (videoElement.readyState >= 1) {\n            doSetKeys();\n        } else {\n            boundDoSetKeys = doSetKeys.bind(this);\n            videoElement.addEventListener('loadedmetadata', boundDoSetKeys);\n        }\n\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(keySession, initData) {\n        return {\n            // Implements SessionToken\n            session: keySession,\n            initData: initData,\n\n            getSessionID: function () {\n                return this.session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return NaN;\n            },\n\n            getSessionType: function () {\n                return 'temporary';\n            },\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case api.error:\n                        let errorStr = 'KeyError'; // TODO: Make better string from event\n                        eventBus.trigger(events.KEY_ERROR, { data: new DashJSError(ProtectionErrors.MEDIA_KEYERR_CODE, errorStr, this) });\n                        break;\n                    case api.message:\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, event.destinationURL) });\n                        break;\n                    case api.ready:\n                        logger.debug('DRM: Key added.');\n                        eventBus.trigger(events.KEY_ADDED);\n                        break;\n\n                    case api.close:\n                        logger.debug('DRM: Session closed.  SessionID = ' + this.getSessionID());\n                        eventBus.trigger(events.KEY_SESSION_CLOSED, { data: this.getSessionID() });\n                        break;\n                }\n            }\n        };\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        stop: reset,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_3Feb2014.__dashjs_factory_name = 'ProtectionModel_3Feb2014';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_3Feb2014); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CableLabs ClearKey license server implementation\n *\n * For testing purposes and evaluating potential uses for ClearKey, we have developed\n * a dirt-simple API for requesting ClearKey licenses from a remote server.\n *\n * @implements LicenseServer\n * @class\n */\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\n\nfunction ClearKey() {\n\n    let instance;\n\n    function getServerURLFromMessage(url /* message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr*/) {\n        return 'json';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        if (!serverResponse.hasOwnProperty('keys')) {\n            return null;\n        }\n        let keyPairs = [];\n        for (let i = 0; i < serverResponse.keys.length; i++) {\n            let keypair = serverResponse.keys[i];\n            let keyid = keypair.kid.replace(/=/g, '');\n            let key = keypair.k.replace(/=/g, '');\n\n            keyPairs.push(new KeyPair(keyid, key));\n        }\n        return new ClearKeyKeySet(keyPairs);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nClearKey.__dashjs_factory_name = 'ClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(ClearKey); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CastLabs DRMToday License Server implementation\n *\n * @implements LicenseServer\n * @class\n */\n\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nfunction DRMToday(config) {\n\n    config = config || {};\n    const BASE64 = config.BASE64;\n\n    const keySystems = {};\n    keySystems[ProtectionConstants.WIDEVINE_KEYSTEM_STRING] = {\n        responseType: 'json',\n        getLicenseMessage: function (response) {\n            return BASE64.decodeArray(response.license);\n        },\n        getErrorResponse: function (response) {\n            return response;\n        }\n    };\n    keySystems[ProtectionConstants.PLAYREADY_KEYSTEM_STRING] = {\n        responseType: 'arraybuffer',\n        getLicenseMessage: function (response) {\n            return response;\n        },\n        getErrorResponse: function (response) {\n            return String.fromCharCode.apply(null, new Uint8Array(response));\n        }\n    };\n\n    let instance;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].responseType;\n    }\n\n    function getLicenseMessage(serverResponse, keySystemStr/*, messageType*/) {\n        checkConfig();\n        return keySystems[keySystemStr].getLicenseMessage(serverResponse);\n    }\n\n    function getErrorResponse(serverResponse, keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].getErrorResponse(serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nDRMToday.__dashjs_factory_name = 'DRMToday';\nexport default dashjs.FactoryMaker.getSingletonFactory(DRMToday); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global escape: true */\n\n/**\n * Microsoft PlayReady Test License Server\n *\n * For testing content that uses the PlayReady test server at\n *\n * @implements LicenseServer\n * @class\n * @ignore\n */\n\nfunction PlayReady() {\n\n    let instance;\n\n    const soap = 'http://schemas.xmlsoap.org/soap/envelope/';\n\n    function uintToString(arrayBuffer) {\n        const encodedString = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\n        const decodedString = decodeURIComponent(escape(encodedString));\n        return decodedString;\n    }\n\n    function parseServerResponse(serverResponse) {\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n\n            if (fault) {\n                return null;\n            }\n        }\n        return serverResponse;\n    }\n\n    function parseErrorResponse(serverResponse) {\n        let faultstring = '';\n        let statusCode = '';\n        let message = '';\n        let idStart = -1;\n        let idEnd = -1;\n\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n            const detail = fault ? fault.getElementsByTagName('detail')[0] : null;\n            const exception = detail ? detail.getElementsByTagName('Exception')[0] : null;\n            let node = null;\n\n            if (fault === null) {\n                return stringResponse;\n            }\n\n            node = fault.getElementsByTagName('faultstring')[0].firstChild;\n            faultstring = node ? node.nodeValue : null;\n\n            if (exception !== null) {\n                node = exception.getElementsByTagName('StatusCode')[0];\n                statusCode = node ? node.firstChild.nodeValue : null;\n                node = exception.getElementsByTagName('Message')[0];\n                message = node ? node.firstChild.nodeValue : null;\n                idStart = message ? message.lastIndexOf('[') + 1 : -1;\n                idEnd = message ? message.indexOf(']') : -1;\n                message = message ? message.substring(idStart, idEnd) : '';\n            }\n        }\n\n        let errorString = `code: ${statusCode}, name: ${faultstring}`;\n        if (message) {\n            errorString += `, message: ${message}`;\n        }\n\n        return errorString;\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return parseServerResponse.call(this, serverResponse);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return parseErrorResponse.call(this, serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nPlayReady.__dashjs_factory_name = 'PlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(PlayReady); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @ignore\n */\nfunction Widevine() {\n\n    let instance;\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return serverResponse;\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nWidevine.__dashjs_factory_name = 'Widevine';\nexport default dashjs.FactoryMaker.getSingletonFactory(Widevine); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc A collection of ClearKey encryption keys with an (optional) associated\n *  type\n * @ignore\n */\nclass ClearKeyKeySet {\n    /**\n     * @param {Array.<KeyPair>} keyPairs\n     * @param {string} type the type of keys in this set.  One of either 'persistent'\n     * or 'temporary'.  Can also be null or undefined.\n     * @class\n     * @ignore\n     */\n    constructor(keyPairs, type) {\n        if (type && type !== 'persistent' && type !== 'temporary')\n            throw new Error('Invalid ClearKey key set type!  Must be one of \\'persistent\\' or \\'temporary\\'');\n        this.keyPairs = keyPairs;\n        this.type = type;\n    }\n\n    /**\n     * Convert this key set to its JSON Web Key (JWK) representation\n     *\n     * @return {ArrayBuffer} JWK object UTF-8 encoded as ArrayBuffer\n     */\n    toJWK() {\n        let i;\n        let numKeys = this.keyPairs.length;\n        let jwk = {keys: []};\n\n        for (i = 0; i < numKeys; i++) {\n            let key = {\n                kty: 'oct',\n                alg: 'A128KW',\n                kid: this.keyPairs[i].keyID,\n                k: this.keyPairs[i].key\n            };\n            jwk.keys.push(key);\n        }\n        if (this.type) {\n            jwk.type = this.type;\n        }\n        let jwkString = JSON.stringify(jwk);\n        const len = jwkString.length;\n\n        // Convert JSON string to ArrayBuffer\n        let buf = new ArrayBuffer(len);\n        let bView = new Uint8Array(buf);\n        for (i = 0; i < len; i++)\n            bView[i] = jwkString.charCodeAt(i);\n        return buf;\n    }\n}\n\nexport default ClearKeyKeySet;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc EME-independent KeyMessage\n * @ignore\n */\nclass KeyMessage {\n    /**\n     * @param {SessionToken} sessionToken the session\n     * to which the key message is associated\n     * @param {ArrayBuffer} message the key message\n     * @param {string} defaultURL license acquisition URL provided by the CDM\n     * @param {string} messageType Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @class\n     */\n    constructor(sessionToken, message, defaultURL, messageType) {\n        this.sessionToken = sessionToken;\n        this.message = message;\n        this.defaultURL = defaultURL;\n        this.messageType = messageType ? messageType : 'license-request';\n    }\n}\n\nexport default KeyMessage;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Represents a 128-bit keyID and 128-bit encryption key\n * @ignore\n */\nclass KeyPair {\n    /**\n     * @param {string} keyID 128-bit key ID, base64 encoded, with no padding\n     * @param {string} key 128-bit encryption key, base64 encoded, with no padding\n     * @class\n     * @ignore\n     */\n    constructor(keyID, key) {\n        this.keyID = keyID;\n        this.key = key;\n    }\n}\n\nexport default KeyPair;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Creates a new key system access token.  Represents a valid key system for\n * given piece of content and key system requirements.  Used to initialize license\n * acquisition operations.\n * @ignore\n */\nclass KeySystemAccess {\n    /**\n     * @param {MediaPlayer.dependencies.protection.KeySystem} keySystem the key system\n     * @param {KeySystemConfiguration} ksConfiguration the\n     * subset of configurations passed to the key system access request that are supported\n     * by this user agent\n     * @class\n     * @ignore\n     */\n    constructor(keySystem, ksConfiguration) {\n        this.keySystem = keySystem;\n        this.ksConfiguration = ksConfiguration;\n    }\n}\n\nexport default KeySystemAccess;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc Represents a set of configurations that describe the capabilities desired for\n *  support by a given CDM\n * @ignore\n */\nclass KeySystemConfiguration {\n    /**\n     * @param {Array.<MediaCapability>} audioCapabilities array of\n     * desired audio capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {Array.<MediaCapability>} videoCapabilities array of\n     * desired video capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {string} distinctiveIdentifier desired use of distinctive identifiers.\n     * One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {string} persistentState desired support for persistent storage of\n     * key systems.  One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {Array.<string>} sessionTypes List of session types that must\n     * be supported by the key system\n     * @class\n     */\n    constructor(audioCapabilities, videoCapabilities, distinctiveIdentifier, persistentState, sessionTypes) {\n        this.initDataTypes = [ 'cenc' ];\n        if (audioCapabilities && audioCapabilities.length) {\n            this.audioCapabilities = audioCapabilities;\n        }\n        if (videoCapabilities && videoCapabilities.length) {\n            this.videoCapabilities = videoCapabilities;\n        }\n        this.distinctiveIdentifier = distinctiveIdentifier;\n        this.persistentState = persistentState;\n        this.sessionTypes = sessionTypes;\n    }\n}\n\nexport default KeySystemConfiguration;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc A media capability\n * @ignore\n */\nclass MediaCapability {\n    /**\n     * @param {string} contentType MIME type and codecs (RFC6386)\n     * @param {string} robustness\n     * @class\n     * @ignore\n     */\n    constructor(contentType, robustness) {\n        this.contentType = contentType;\n        this.robustness = robustness;\n    }\n}\n\nexport default MediaCapability;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc NeedKey\n * @ignore\n */\nclass NeedKey {\n    /**\n     * @param {ArrayBuffer} initData the initialization data\n     * @param {string} initDataType initialization data type\n     * @class\n     */\n    constructor(initData, initDataType) {\n        this.initData = initData;\n        this.initDataType = initDataType;\n    }\n}\n\nexport default NeedKey;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass DashJSError {\n    constructor(code, message, data) {\n        this.code = code || null;\n        this.message = message || null;\n        this.data = data || null;\n    }\n}\n\nexport default DashJSError;"],"names":["f","g","exports","module","define","amd","window","global","self","this","dashjs","Protection","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","_dereq_","ErrorsBase","errors","config","err","override","publicOnly","hasOwnProperty","indexOf","EventsBase","events","evt","ProtectionConstants","init","constants","CLEARKEY_KEYSTEM_STRING","WIDEVINE_KEYSTEM_STRING","PLAYREADY_KEYSTEM_STRING","CommonEncryption","cpArray","retVal","cp","schemeIdUri","toLowerCase","value","pssh","offset","view","DataView","version","getUint8","getUint32","slice","keySystem","initData","psshList","parsePSSHList","uuid","cpData","BASE64","__text","replace","decodeArray","buffer","data","dv","byteCursor","nextBox","systemID","undefined","boxStart","byteLength","val","toString","APIS_ProtectionModel_01b","generateKeyRequest","addKey","cancelKeyRequest","needkey","keyerror","keyadded","keymessage","APIS_ProtectionModel_3Feb2014","setMediaKeys","MediaKeys","release","error","message","ready","close","instance","context","getAPI","videoElement","apis","api","Object","keys","createProtectionSystem","controller","protectionKeyController","_controllersProtectionKeyController2","getInstance","setConfig","debug","initialize","logger","eventBus","errHandler","protectionModel","getLogger","videoModel","getElement","onencrypted","mediaKeys","info","_modelsProtectionModel_3Feb20142","create","_modelsProtectionModel_01b2","warn","_modelsProtectionModel_21Jan20152","_controllersProtectionController2","capabilities","setEncryptedMediaSupported","__dashjs_factory_name","factory","FactoryMaker","getClassFactory","_ProtectionEvents2","_errorsProtectionErrors2","updateClassFactory","ProtectionEvents","_get","getPrototypeOf","prototype","INTERNAL_KEY_MESSAGE","INTERNAL_KEY_SYSTEM_SELECTED","INTERNAL_KEY_STATUS_CHANGED","KEY_ADDED","KEY_ERROR","KEY_MESSAGE","KEY_SESSION_CLOSED","KEY_SESSION_CREATED","KEY_SESSION_REMOVED","KEY_STATUSES_CHANGED","KEY_SYSTEM_ACCESS_COMPLETE","KEY_SYSTEM_SELECTED","LICENSE_REQUEST_COMPLETE","LICENSE_REQUEST_SENDING","NEED_KEY","PROTECTION_CREATED","PROTECTION_DESTROYED","SERVER_CERTIFICATE_UPDATED","TEARDOWN_COMPLETE","VIDEO_ELEMENT_SELECTED","protectionEvents","ProtectionController","needkeyRetries","pendingNeedKeyData","mediaInfoArr","protDataSet","sessionType","robustnessLevel","checkConfig","createKeySession","cdmData","initDataForKS","_CommonEncryption2","getPSSHForKeySystem","protData","getProtData","currentInitData","getAllInitData","initDataEquals","getSessionType","trigger","_voDashJSError2","KEY_SESSION_CREATED_ERROR_CODE","KEY_SESSION_CREATED_ERROR_MESSAGE","systemString","loadKeySession","sessionID","setMediaElement","element","on","onNeedKey","off","keySystemString","getKeySystemConfiguration","audioCapabilities","videoCapabilities","audioRobustness","videoRobustness","ksSessionType","distinctiveIdentifier","persistentState","forEach","media","type","AUDIO","push","_voMediaCapability2","codec","VIDEO","_voKeySystemConfiguration2","selectKeySystem","supportedKS","fromManifest","requestedKeySystems","sort","ksA","ksB","ks","priority","onKeySystemSelected","ksIdx","configs","onKeySystemAccessComplete","event","KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE","KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE","isClearKey","kids","clearkeys","TextEncoder","encode","JSON","stringify","sessionId","requestKeySystemAccess","keySystemAccess","getKeySystem","serverCertificate","setServerCertificate","sendLicenseRequestCompleteEvent","onKeyStatusChanged","status","onKeyMessage","keyMessage","messageType","sessionToken","licenseServerData","getLicenseServer","eventData","getSessionID","processClearKeyLicenseRequest","updateKeySession","reqHeaders","withCredentials","reportError","reqPayload","responseType","url","serverURL","laURL","getLicenseServerUrlFromMediaInfo","psshData","getPSSHData","getLicenseServerURLFromInitData","getServerURLFromMessage","updateHeaders","headers","key","httpRequestHeaders","getRequestHeadersFromMessage","xhr","errorMsg","response","getErrorResponse","MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE","MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE","statusText","readyState","getLicenseRequestFromMessage","reqMethod","getHTTPMethod","getResponseType","timeout","isNaN","httpTimeout","doLicenseRequest","method","payload","retriesCount","onLoad","onAbort","onError","XMLHttpRequest","open","setRequestHeader","retryRequest","setTimeout","onload","ontimeout","onerror","onabort","send","licenseMessage","getLicenseMessage","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE","retry","initDataType","abInitData","ArrayBuffer","isView","String","fromCharCode","apply","Uint8Array","getSupportedKeySystems","initializeForMedia","mediaInfo","getSupportedKeySystemsFromContentProtection","contentProtection","removeKeySession","closeKeySession","setSessionType","setRobustnessLevel","level","setProtectionData","cps","getKeySystems","setKeySystems","keySystems","stop","reset","retryTimeout","clearTimeout","ProtectionKeyController","clearkeyKeySystem","clearkeyW3CKeySystem","_drmKeySystemPlayReady2","_drmKeySystemWidevine2","_drmKeySystemClearKey2","_drmKeySystemW3CClearKey2","protectionDataSet","initData1","initData2","data1","data2","j","newKeySystems","getKeySystemBySystemString","cpIdx","cencContentProtection","findCencContentProtection","schemeIdURI","getInitData","getCDMData","getSessionId","shouldNotFilterOutKeySystem","_serversDRMToday2","_constantsProtectionConstants2","_serversWidevine2","_serversPlayReady2","_serversClearKey2","getClearKeysFromProtectionData","getSingletonFactory","KeySystemClearKey","LICENSE_SERVER_MANIFEST_CONFIGURATIONS","attributes","prefixes","parseInitDataFromContentProtection","cencDefaultKid","kid","btoa","match","map","parseInt","join","cencDefaultKidToBase64Representation","Content-Type","parse","licenseServer","clearkeyProtData","filter","ckData","k","l","attribute","prefix","__prefix","protectionData","clearkeySet","jsonMsg","keyPairs","clearkeyID","clearkey","_voKeyPair2","_voClearKeyKeySet2","KeySystemPlayReady","messageFormat","PROSize","PSSHSize","PSSHBoxType","playreadySystemID","uint8arraydecodedPROHeader","PSSHBox","PSSHData","pro","prheader","PSSHBoxBuffer","setUint32","set","xmlDoc","parser","DOMParser","dataview","Uint16Array","msg","headerNameList","parseFromString","getElementsByTagName","headerValueList","childNodes","nodeValue","Content","licenseRequest","Challenge","decode","numRecords","getUint16","recordType","recordLength","recordData","record","laurl","luiurl","customData","cdmDataBytes","charCodeAt","setPlayReadyMessageFormat","format","KeySystemW3CClearKey","KeySystemWidevine","ProtectionErrors","MEDIA_KEYERR_CODE","MEDIA_KEYERR_UNKNOWN_CODE","MEDIA_KEYERR_CLIENT_CODE","MEDIA_KEYERR_SERVICE_CODE","MEDIA_KEYERR_OUTPUT_CODE","MEDIA_KEYERR_HARDWARECHANGE_CODE","MEDIA_KEYERR_DOMAIN_CODE","MEDIA_KEY_MESSAGE_ERROR_CODE","SERVER_CERTIFICATE_UPDATED_ERROR_CODE","KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE","MEDIA_KEYERR_UNKNOWN_MESSAGE","MEDIA_KEYERR_CLIENT_MESSAGE","MEDIA_KEYERR_SERVICE_MESSAGE","MEDIA_KEYERR_OUTPUT_MESSAGE","MEDIA_KEYERR_HARDWARECHANGE_MESSAGE","MEDIA_KEYERR_DOMAIN_MESSAGE","MEDIA_KEY_MESSAGE_ERROR_MESSAGE","SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE","KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE","protectionErrors","ProtectionModel_01b","pendingSessions","sessions","moreSessionsAllowed","eventHandler","removeEventListeners","findSessionByID","sessionArray","len","removeEventListener","ksConfigurations","ve","document","createElement","found","supportedAudio","supportedVideo","configIdx","videos","videoIdx","canPlayType","contentType","ksConfig","_voKeySystemAccess2","mediaElement","addEventListener","newSession","getExpirationTime","NaN","keyID","handleEvent","_voNeedKey2","errorCode","systemCode","shift","_voKeyMessage2","defaultURL","ProtectionModel_21Jan2015","closeKeySessionInternal","session","removeSession","token","splice","parseKeyStatus","args","keyId","createSessionToken","target","keyStatuses","keyStatus","arguments","expiration","getKeyStatuses","getUsable","usable","closed","then","requestKeySystemAccessInternal","idx","navigator","requestMediaKeySystemAccess","mediaKeySystemAccess","configuration","getConfiguration","mksa","createMediaKeys","mkeys","name","createSession","dataType","generateRequest","toJWK","update","load","success","remove","numSessions","done","s","ProtectionModel_3Feb2014","doSetKeys","boundDoSetKeys","bind","audios","audioIdx","isTypeSupported","ksAccess","ksConfiguration","destinationURL","ClearKey","serverResponse","keypair","keyid","DRMToday","license","keySystemStr","PlayReady","soap","uintToString","arrayBuffer","encodedString","decodeURIComponent","escape","stringResponse","envelope","getElementsByTagNameNS","body","faultstring","statusCode","fault","detail","exception","node","firstChild","idStart","lastIndexOf","idEnd","substring","errorString","Widevine","ClearKeyKeySet","numKeys","jwk","kty","alg","jwkString","buf","bView","KeyMessage","KeyPair","KeySystemAccess","KeySystemConfiguration","sessionTypes","initDataTypes","MediaCapability","robustness","NeedKey","DashJSError"],"mappings":"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"}