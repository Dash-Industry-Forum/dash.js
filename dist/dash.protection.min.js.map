{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","core/errors/ErrorsBase.js","core/events/EventsBase.js","streaming/constants/ProtectionConstants.js","streaming/protection/CommonEncryption.js","streaming/protection/Protection.js","streaming/protection/ProtectionEvents.js","streaming/protection/controllers/ProtectionController.js","streaming/protection/controllers/ProtectionKeyController.js","streaming/protection/drm/KeySystemClearKey.js","streaming/protection/drm/KeySystemPlayReady.js","streaming/protection/drm/KeySystemW3CClearKey.js","streaming/protection/drm/KeySystemWidevine.js","streaming/protection/errors/ProtectionErrors.js","streaming/protection/models/ProtectionModel_01b.js","streaming/protection/models/ProtectionModel_21Jan2015.js","streaming/protection/models/ProtectionModel_3Feb2014.js","streaming/protection/servers/ClearKey.js","streaming/protection/servers/DRMToday.js","streaming/protection/servers/PlayReady.js","streaming/protection/servers/Widevine.js","streaming/protection/vo/ClearKeyKeySet.js","streaming/protection/vo/KeyMessage.js","streaming/protection/vo/KeyPair.js","streaming/protection/vo/KeySystemAccess.js","streaming/protection/vo/KeySystemConfiguration.js","streaming/protection/vo/MediaCapability.js","streaming/protection/vo/NeedKey.js","streaming/vo/DashJSError.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","dashjs","Protection","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","_dereq_","ErrorsBase","errors","config","override","publicOnly","err","hasOwnProperty","indexOf","EventsBase","events","evt","ProtectionConstants","init","constants","CLEARKEY_KEYSTEM_STRING","WIDEVINE_KEYSTEM_STRING","PLAYREADY_KEYSTEM_STRING","CommonEncryption","cpArray","retVal","cp","schemeIdUri","toLowerCase","value","pssh","offset","view","DataView","version","getUint8","getUint32","slice","keySystem","initData","psshList","parsePSSHList","uuid","cpData","BASE64","decodeArray","__text","buffer","data","dv","byteCursor","nextBox","systemID","undefined","boxStart","byteLength","val","toString","APIS_ProtectionModel_01b","generateKeyRequest","addKey","cancelKeyRequest","needkey","keyerror","keyadded","keymessage","APIS_ProtectionModel_3Feb2014","setMediaKeys","MediaKeys","release","error","message","ready","close","instance","context","getAPI","videoElement","apis","api","Object","keys","createProtectionSystem","controller","protectionKeyController","_controllersProtectionKeyController2","getInstance","setConfig","debug","initialize","protectionModel","logger","getLogger","eventBus","errHandler","videoModel","getElement","onencrypted","mediaKeys","info","_modelsProtectionModel_3Feb20142","create","_modelsProtectionModel_01b2","warn","_modelsProtectionModel_21Jan20152","getProtectionModel","_controllersProtectionController2","capabilities","setEncryptedMediaSupported","__dashjs_factory_name","factory","FactoryMaker","getClassFactory","_ProtectionEvents2","_errorsProtectionErrors2","updateClassFactory","ProtectionEvents","_get","getPrototypeOf","prototype","INTERNAL_KEY_MESSAGE","INTERNAL_KEY_SYSTEM_SELECTED","INTERNAL_KEY_STATUS_CHANGED","KEY_ADDED","KEY_ERROR","KEY_MESSAGE","KEY_SESSION_CLOSED","KEY_SESSION_CREATED","KEY_SESSION_REMOVED","KEY_STATUSES_CHANGED","KEY_SYSTEM_ACCESS_COMPLETE","KEY_SYSTEM_SELECTED","LICENSE_REQUEST_COMPLETE","NEED_KEY","PROTECTION_CREATED","PROTECTION_DESTROYED","SERVER_CERTIFICATE_UPDATED","TEARDOWN_COMPLETE","VIDEO_ELEMENT_SELECTED","protectionEvents","ProtectionController","needkeyRetries","pendingNeedKeyData","mediaInfoArr","protDataSet","sessionType","robustnessLevel","checkConfig","createKeySession","cdmData","initDataForKS","_CommonEncryption2","getPSSHForKeySystem","protData","getProtData","currentInitData","getAllInitData","initDataEquals","getSessionType","trigger","_voDashJSError2","KEY_SESSION_CREATED_ERROR_CODE","KEY_SESSION_CREATED_ERROR_MESSAGE","systemString","loadKeySession","sessionID","setMediaElement","element","on","onNeedKey","off","keySystemString","getKeySystemConfiguration","audioCapabilities","videoCapabilities","audioRobustness","videoRobustness","ksSessionType","distinctiveIdentifier","persistentState","forEach","media","type","AUDIO","push","_voMediaCapability2","codec","VIDEO","_voKeySystemConfiguration2","selectKeySystem","supportedKS","fromManifest","requestedKeySystems","sort","ksA","ksB","ks","priority","ksIdx","configs","onKeySystemAccessComplete","event","KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE","KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE","sessionId","requestKeySystemAccess","onKeySystemSelected","keySystemAccess","getKeySystem","serverCertificate","setServerCertificate","isClearKey","kids","clearkeys","TextEncoder","encode","JSON","stringify","sendLicenseRequestCompleteEvent","onKeyStatusChanged","status","onKeyMessage","keyMessage","messageType","sessionToken","licenseServerData","getLicenseServer","eventData","getSessionID","processClearKeyLicenseRequest","updateKeySession","url","serverURL","laURL","getLicenseServerURLFromInitData","getPSSHData","getServerURLFromMessage","reqHeaders","withCredentials","updateHeaders","headers","key","httpRequestHeaders","getRequestHeadersFromMessage","reportError","xhr","errorMsg","response","getErrorResponse","MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE","MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE","statusText","readyState","reqPayload","getLicenseRequestFromMessage","reqMethod","getHTTPMethod","responseType","getResponseType","timeout","isNaN","httpTimeout","doLicenseRequest","method","payload","retriesCount","onLoad","onAbort","onError","XMLHttpRequest","open","setRequestHeader","retryRequest","setTimeout","onload","ontimeout","onerror","onabort","send","licenseMessage","getLicenseMessage","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE","retry","initDataType","abInitData","ArrayBuffer","isView","String","fromCharCode","apply","Uint8Array","getSupportedKeySystems","initializeForMedia","mediaInfo","getSupportedKeySystemsFromContentProtection","contentProtection","removeKeySession","closeKeySession","setSessionType","setRobustnessLevel","level","setProtectionData","cps","getKeySystems","setKeySystems","keySystems","stop","reset","retryTimeout","clearTimeout","ProtectionKeyController","clearkeyKeySystem","clearkeyW3CKeySystem","_drmKeySystemPlayReady2","_drmKeySystemWidevine2","_drmKeySystemClearKey2","_drmKeySystemW3CClearKey2","protectionDataSet","initData1","initData2","data1","data2","j","newKeySystems","getKeySystemBySystemString","cpIdx","schemeIdURI","getInitData","getCDMData","getSessionId","shouldNotFilterOutKeySystem","_serversDRMToday2","_constantsProtectionConstants2","_serversWidevine2","_serversPlayReady2","_serversClearKey2","getClearKeysFromProtectionData","getSingletonFactory","KeySystemClearKey","parseInitDataFromContentProtection","protectionData","clearkeySet","jsonMsg","parse","keyPairs","clearkeyID","clearkey","_voKeyPair2","_voClearKeyKeySet2","KeySystemPlayReady","messageFormat","PROSize","PSSHSize","PSSHBoxBuffer","PSSHBoxType","playreadySystemID","uint8arraydecodedPROHeader","PSSHBox","PSSHData","pro","prheader","setUint32","set","msg","xmlDoc","parser","DOMParser","dataview","Uint16Array","headerNameList","parseFromString","getElementsByTagName","headerValueList","childNodes","nodeValue","Content","licenseRequest","Challenge","decode","numRecords","getUint16","recordType","recordLength","recordData","record","laurl","luiurl","customData","cdmDataBytes","charCodeAt","replace","setPlayReadyMessageFormat","format","KeySystemW3CClearKey","KeySystemWidevine","ProtectionErrors","MEDIA_KEYERR_CODE","MEDIA_KEYERR_UNKNOWN_CODE","MEDIA_KEYERR_CLIENT_CODE","MEDIA_KEYERR_SERVICE_CODE","MEDIA_KEYERR_OUTPUT_CODE","MEDIA_KEYERR_HARDWARECHANGE_CODE","MEDIA_KEYERR_DOMAIN_CODE","MEDIA_KEY_MESSAGE_ERROR_CODE","SERVER_CERTIFICATE_UPDATED_ERROR_CODE","KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE","MEDIA_KEYERR_UNKNOWN_MESSAGE","MEDIA_KEYERR_CLIENT_MESSAGE","MEDIA_KEYERR_SERVICE_MESSAGE","MEDIA_KEYERR_OUTPUT_MESSAGE","MEDIA_KEYERR_HARDWARECHANGE_MESSAGE","MEDIA_KEYERR_DOMAIN_MESSAGE","MEDIA_KEY_MESSAGE_ERROR_MESSAGE","SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE","KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE","protectionErrors","ProtectionModel_01b","pendingSessions","sessions","moreSessionsAllowed","eventHandler","removeEventListeners","findSessionByID","sessionArray","len","removeEventListener","ksConfigurations","ve","document","createElement","found","supportedVideo","configIdx","videos","videoIdx","canPlayType","contentType","ksConfig","_voKeySystemAccess2","mediaElement","addEventListener","newSession","getExpirationTime","NaN","keyID","handleEvent","_voNeedKey2","errorCode","systemCode","shift","_voKeyMessage2","defaultURL","ProtectionModel_21Jan2015","closeKeySessionInternal","session","removeSession","token","splice","parseKeyStatus","args","keyId","createSessionToken","target","keyStatuses","keyStatus","arguments","expiration","getKeyStatuses","getUsable","usable","closed","then","requestKeySystemAccessInternal","idx","navigator","requestMediaKeySystemAccess","mediaKeySystemAccess","configuration","getConfiguration","mksa","createMediaKeys","mkeys","name","createSession","dataType","generateRequest","toJWK","update","load","success","remove","numSessions","done","s","ProtectionModel_3Feb2014","doSetKeys","boundDoSetKeys","bind","supportedAudio","audios","audioIdx","isTypeSupported","ksAccess","ksConfiguration","keySession","destinationURL","ClearKey","substring","serverResponse","keypair","keyid","kid","k","DRMToday","license","keySystemStr","PlayReady","soap","uintToString","arrayBuffer","encodedString","decodeURIComponent","escape","stringResponse","envelope","getElementsByTagNameNS","body","faultstring","statusCode","idStart","idEnd","fault","detail","exception","node","firstChild","lastIndexOf","errorString","Widevine","ClearKeyKeySet","numKeys","jwk","kty","alg","jwkString","buf","bView","KeyMessage","KeyPair","KeySystemAccess","KeySystemConfiguration","sessionTypes","initDataTypes","MediaCapability","robustness","NeedKey","DashJSError"],"mappings":"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","file":"dash.protection.min.js","sourceRoot":"./src/","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass ErrorsBase {\n    extend (errors, config) {\n        if (!errors) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const err in errors) {\n            if (!errors.hasOwnProperty(err) || (this[err] && !override)) continue;\n            if (publicOnly && errors[err].indexOf('public_') === -1) continue;\n            this[err] = errors[err];\n\n        }\n    }\n}\n\nexport default ErrorsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass EventsBase {\n    extend (events, config) {\n        if (!events) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const evt in events) {\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\n            this[evt] = events[evt];\n\n        }\n    }\n}\n\nexport default EventsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Protection Constants declaration\n * @class\n * @ignore\n */\nclass ProtectionConstants {\n\n    init () {\n        this.CLEARKEY_KEYSTEM_STRING = 'org.w3.clearkey';\n        this.WIDEVINE_KEYSTEM_STRING = 'com.widevine.alpha';\n        this.PLAYREADY_KEYSTEM_STRING = 'com.microsoft.playready';\n    }\n\n    constructor () {\n        this.init();\n    }\n}\n\nlet constants = new ProtectionConstants();\nexport default constants;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n /**\n  * @class\n  * @ignore\n  */\nclass CommonEncryption {\n    /**\n     * Find and return the ContentProtection element in the given array\n     * that indicates support for MPEG Common Encryption\n     *\n     * @param {Array} cpArray array of content protection elements\n     * @returns {Object|null} the Common Encryption content protection element or\n     * null if one was not found\n     */\n    static findCencContentProtection(cpArray) {\n        let retVal = null;\n        for (let i = 0; i < cpArray.length; ++i) {\n            let cp = cpArray[i];\n            if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' &&\n                    cp.value.toLowerCase() === 'cenc')\n                retVal = cp;\n        }\n        return retVal;\n    }\n\n    /**\n     * Returns just the data portion of a single PSSH\n     *\n     * @param {ArrayBuffer} pssh - the PSSH\n     * @return {ArrayBuffer} data portion of the PSSH\n     */\n    static getPSSHData(pssh) {\n        let offset = 8; // Box size and type fields\n        let view = new DataView(pssh);\n\n        // Read version\n        let version = view.getUint8(offset);\n\n        offset += 20; // Version (1), flags (3), system ID (16)\n\n        if (version > 0) {\n            offset += 4 + (16 * view.getUint32(offset)); // Key ID count (4) and All key IDs (16*count)\n        }\n\n        offset += 4; // Data size\n        return pssh.slice(offset);\n    }\n\n    /**\n     * Returns the PSSH associated with the given key system from the concatenated\n     * list of PSSH boxes in the given initData\n     *\n     * @param {KeySystem} keySystem the desired\n     * key system\n     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\n     * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\n     * or null if a valid association could not be found.\n     */\n    static getPSSHForKeySystem(keySystem, initData) {\n        let psshList = CommonEncryption.parsePSSHList(initData);\n        if (keySystem && psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\n            return psshList[keySystem.uuid.toLowerCase()];\n        }\n        return null;\n    }\n\n    /**\n     * Parse a standard common encryption PSSH which contains a simple\n     * base64-encoding of the init data\n     *\n     * @param {Object} cpData the ContentProtection element\n     * @param {BASE64} BASE64 reference\n     * @returns {ArrayBuffer|null} the init data or null if not found\n     */\n    static parseInitDataFromContentProtection(cpData, BASE64) {\n        if ('pssh' in cpData) {\n            return BASE64.decodeArray(cpData.pssh.__text).buffer;\n        }\n        return null;\n    }\n\n    /**\n     * Parses list of PSSH boxes into keysystem-specific PSSH data\n     *\n     * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\n     * CDM as initialization data when CommonEncryption content is detected\n     * @returns {Object|Array} an object that has a property named according to each of\n     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\n     * and a ArrayBuffer (the entire PSSH box) as the property value\n     */\n    static parsePSSHList(data) {\n\n        if (data === null || data === undefined)\n            return [];\n\n        let dv = new DataView(data.buffer || data); // data.buffer first for Uint8Array support\n        let done = false;\n        let pssh = {};\n\n        // TODO: Need to check every data read for end of buffer\n        let byteCursor = 0;\n        while (!done) {\n\n            let size,\n                nextBox,\n                version,\n                systemID,\n                psshDataSize;\n            let boxStart = byteCursor;\n\n            if (byteCursor >= dv.buffer.byteLength)\n                break;\n\n            /* Box size */\n            size = dv.getUint32(byteCursor);\n            nextBox = byteCursor + size;\n            byteCursor += 4;\n\n            /* Verify PSSH */\n            if (dv.getUint32(byteCursor) !== 0x70737368) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor += 4;\n\n            /* Version must be 0 or 1 */\n            version = dv.getUint8(byteCursor);\n            if (version !== 0 && version !== 1) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor++;\n\n            byteCursor += 3; /* skip flags */\n\n            // 16-byte UUID/SystemID\n            systemID = '';\n            let i, val;\n            for (i = 0; i < 4; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 4;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 6; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 6;\n\n            systemID = systemID.toLowerCase();\n\n            /* PSSH Data Size */\n            psshDataSize = dv.getUint32(byteCursor);\n            byteCursor += 4;\n\n            /* PSSH Data */\n            pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\n            byteCursor = nextBox;\n        }\n\n        return pssh;\n    }\n}\n\nexport default CommonEncryption;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport ProtectionController from './controllers/ProtectionController';\nimport ProtectionKeyController from './controllers/ProtectionKeyController';\nimport ProtectionEvents from './ProtectionEvents';\nimport ProtectionErrors from './errors/ProtectionErrors';\nimport ProtectionModel_21Jan2015 from './models/ProtectionModel_21Jan2015';\nimport ProtectionModel_3Feb2014 from './models/ProtectionModel_3Feb2014';\nimport ProtectionModel_01b from './models/ProtectionModel_01b';\n\nconst APIS_ProtectionModel_01b = [\n    // Un-prefixed as per spec\n    {\n        // Video Element\n        generateKeyRequest: 'generateKeyRequest',\n        addKey: 'addKey',\n        cancelKeyRequest: 'cancelKeyRequest',\n\n        // Events\n        needkey: 'needkey',\n        keyerror: 'keyerror',\n        keyadded: 'keyadded',\n        keymessage: 'keymessage'\n    },\n    // Webkit-prefixed (early Chrome versions and Chrome with EME disabled in chrome://flags)\n    {\n        // Video Element\n        generateKeyRequest: 'webkitGenerateKeyRequest',\n        addKey: 'webkitAddKey',\n        cancelKeyRequest: 'webkitCancelKeyRequest',\n\n        // Events\n        needkey: 'webkitneedkey',\n        keyerror: 'webkitkeyerror',\n        keyadded: 'webkitkeyadded',\n        keymessage: 'webkitkeymessage'\n    }\n];\n\nconst APIS_ProtectionModel_3Feb2014 = [\n    // Un-prefixed as per spec\n    // Chrome 38-39 (and some earlier versions) with chrome://flags -- Enable Encrypted Media Extensions\n    {\n        // Video Element\n        setMediaKeys: 'setMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MediaKeys',\n        // MediaKeySession\n        release: 'close',\n\n        // Events\n        needkey: 'needkey',\n        error: 'keyerror',\n        message: 'keymessage',\n        ready: 'keyadded',\n        close: 'keyclose'\n    },\n    // MS-prefixed (IE11, Windows 8.1)\n    {\n        // Video Element\n        setMediaKeys: 'msSetMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MSMediaKeys',\n        // MediaKeySession\n        release: 'close',\n        // Events\n        needkey: 'msneedkey',\n        error: 'mskeyerror',\n        message: 'mskeymessage',\n        ready: 'mskeyadded',\n        close: 'mskeyclose'\n    }\n];\n\nfunction Protection() {\n    let instance;\n    const context = this.context;\n\n    /**\n     * Create a ProtectionController and associated ProtectionModel for use with\n     * a single piece of content.\n     *\n     * @param {Object} config\n     * @return {ProtectionController} protection controller\n     *\n     */\n    function createProtectionSystem(config) {\n        let controller = null;\n\n        const protectionKeyController = ProtectionKeyController(context).getInstance();\n        protectionKeyController.setConfig({ debug: config.debug, BASE64: config.BASE64 });\n        protectionKeyController.initialize();\n\n        let protectionModel =  getProtectionModel(config);\n\n        if (!controller && protectionModel) {//TODO add ability to set external controller if still needed at all?\n            controller = ProtectionController(context).create({\n                protectionModel: protectionModel,\n                protectionKeyController: protectionKeyController,\n                eventBus: config.eventBus,\n                debug: config.debug,\n                events: config.events,\n                BASE64: config.BASE64,\n                constants: config.constants\n            });\n            config.capabilities.setEncryptedMediaSupported(true);\n        }\n        return controller;\n    }\n\n    function getProtectionModel(config) {\n        const debug = config.debug;\n        const logger = debug.getLogger(instance);\n        const eventBus = config.eventBus;\n        const errHandler = config.errHandler;\n        const videoElement = config.videoModel ? config.videoModel.getElement() : null;\n\n        if ((!videoElement || videoElement.onencrypted !== undefined) &&\n            (!videoElement || videoElement.mediaKeys !== undefined)) {\n            logger.info('EME detected on this user agent! (ProtectionModel_21Jan2015)');\n            return ProtectionModel_21Jan2015(context).create({ debug: debug, eventBus: eventBus, events: config.events });\n        } else if (getAPI(videoElement, APIS_ProtectionModel_3Feb2014)) {\n            logger.info('EME detected on this user agent! (ProtectionModel_3Feb2014)');\n            return ProtectionModel_3Feb2014(context).create({ debug: debug, eventBus: eventBus, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_3Feb2014) });\n        } else if (getAPI(videoElement, APIS_ProtectionModel_01b)) {\n            logger.info('EME detected on this user agent! (ProtectionModel_01b)');\n            return ProtectionModel_01b(context).create({ debug: debug, eventBus: eventBus, errHandler: errHandler, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_01b) });\n        } else {\n            logger.warn('No supported version of EME detected on this user agent! - Attempts to play encrypted content will fail!');\n            return null;\n        }\n    }\n\n    function getAPI(videoElement, apis) {\n        for (let i = 0; i < apis.length; i++) {\n            const api = apis[i];\n            // detect if api is supported by browser\n            // check only first function in api -> should be fine\n            if (typeof videoElement[api[Object.keys(api)[0]]] !== 'function') {\n                continue;\n            }\n\n            return api;\n        }\n\n        return null;\n    }\n\n    instance = {\n        createProtectionSystem: createProtectionSystem\n    };\n\n    return instance;\n}\n\nProtection.__dashjs_factory_name = 'Protection';\nconst factory = dashjs.FactoryMaker.getClassFactory(Protection); /* jshint ignore:line */\nfactory.events = ProtectionEvents;\nfactory.errors = ProtectionErrors;\ndashjs.FactoryMaker.updateClassFactory(Protection.__dashjs_factory_name, factory); /* jshint ignore:line */\nexport default factory;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../../core/events/EventsBase';\n/**\n * @class\n  */\nclass ProtectionEvents extends EventsBase {\n    /**\n     * @description Public facing external events to be used when including protection package.\n     * All public events will be aggregated into the MediaPlayerEvents Class and can be accessed\n     * via MediaPlayer.events.  public_ is the prefix that we use to move event names to MediaPlayerEvents.\n     */\n    constructor () {\n        super();\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         *\n         * @ignore\n         */\n        this.INTERNAL_KEY_MESSAGE = 'internalKeyMessage';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @ignore\n         */\n        this.INTERNAL_KEY_SYSTEM_SELECTED = 'internalKeySystemSelected';\n\n        /**\n         * Event ID for events delivered when the status of one decryption keys has changed\n         * @ignore\n         */\n        this.INTERNAL_KEY_STATUS_CHANGED = 'internalkeyStatusChanged';\n\n        /**\n         * Event ID for events delivered when a new key has been added\n         *\n         * @constant\n         * @deprecated The latest versions of the EME specification no longer\n         * use this event.  {@MediaPlayer.models.protectionModel.eventList.KEY_STATUSES_CHANGED}\n         * is preferred.\n         * @event ProtectionEvents#KEY_ADDED\n         */\n        this.KEY_ADDED = 'public_keyAdded';\n        /**\n         * Event ID for events delivered when an error is encountered by the CDM\n         * while processing a license server response message\n         * @event ProtectionEvents#KEY_ERROR\n         */\n        this.KEY_ERROR = 'public_keyError';\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         * @event ProtectionEvents#KEY_MESSAGE\n         */\n        this.KEY_MESSAGE = 'public_keyMessage';\n\n        /**\n         * Event ID for events delivered when a key session close\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CLOSED\n         */\n        this.KEY_SESSION_CLOSED = 'public_keySessionClosed';\n\n        /**\n         * Event ID for events delivered when a new key sessions creation\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CREATED\n         */\n        this.KEY_SESSION_CREATED = 'public_keySessionCreated';\n\n        /**\n         * Event ID for events delivered when a key session removal\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_REMOVED\n         */\n        this.KEY_SESSION_REMOVED = 'public_keySessionRemoved';\n\n        /**\n         * Event ID for events delivered when the status of one or more\n         * decryption keys has changed\n         * @event ProtectionEvents#KEY_STATUSES_CHANGED\n         */\n        this.KEY_STATUSES_CHANGED = 'public_keyStatusesChanged';\n\n        /**\n         * Event ID for events delivered when a key system access procedure\n         * has completed\n         * @ignore\n         */\n        this.KEY_SYSTEM_ACCESS_COMPLETE = 'public_keySystemAccessComplete';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @event ProtectionEvents#KEY_SYSTEM_SELECTED\n         */\n        this.KEY_SYSTEM_SELECTED = 'public_keySystemSelected';\n\n        /**\n         * Event ID for events delivered when a license request procedure\n         * has completed\n         * @event ProtectionEvents#LICENSE_REQUEST_COMPLETE\n         */\n        this.LICENSE_REQUEST_COMPLETE = 'public_licenseRequestComplete';\n\n        /**\n         * Event ID for needkey/encrypted events\n         * @ignore\n         */\n        this.NEED_KEY = 'needkey';\n\n        /**\n         * Event ID for events delivered when the Protection system is detected and created.\n         * @event ProtectionEvents#PROTECTION_CREATED\n         */\n        this.PROTECTION_CREATED = 'public_protectioncreated';\n\n        /**\n         * Event ID for events delivered when the Protection system is destroyed.\n         * @event ProtectionEvents#PROTECTION_DESTROYED\n         */\n        this.PROTECTION_DESTROYED = 'public_protectiondestroyed';\n\n        /**\n         * Event ID for events delivered when a new server certificate has\n         * been delivered to the CDM\n         * @ignore\n         */\n        this.SERVER_CERTIFICATE_UPDATED = 'serverCertificateUpdated';\n\n        /**\n         * Event ID for events delivered when the process of shutting down\n         * a protection set has completed\n         * @ignore\n         */\n        this.TEARDOWN_COMPLETE =  'protectionTeardownComplete';\n\n        /**\n         * Event ID for events delivered when a HTMLMediaElement has been\n         * associated with the protection set\n         * @ignore\n         */\n        this.VIDEO_ELEMENT_SELECTED = 'videoElementSelected';\n    }\n}\n\nlet protectionEvents = new ProtectionEvents();\nexport default protectionEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport MediaCapability from '../vo/MediaCapability';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport ProtectionErrors from '../errors/ProtectionErrors';\nimport DashJSError from '../../vo/DashJSError';\n\nconst NEEDKEY_BEFORE_INITIALIZE_RETRIES = 5;\nconst NEEDKEY_BEFORE_INITIALIZE_TIMEOUT = 500;\n\nconst LICENSE_SERVER_REQUEST_RETRIES = 3;\nconst LICENSE_SERVER_REQUEST_RETRY_INTERVAL = 1000;\nconst LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT = 8000;\n\n/**\n * @module ProtectionController\n * @description Provides access to media protection information and functionality.  Each\n * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}\n * which encapsulates a set of protection information (EME APIs, selected key system,\n * key sessions).  The APIs of ProtectionController mostly align with the latest EME\n * APIs.  Key system selection is mostly automated when combined with app-overrideable\n * functionality provided in {@link ProtectionKeyController}.\n * @todo ProtectionController does almost all of its tasks automatically after init() is\n * called.  Applications might want more control over this process and want to go through\n * each step manually (key system selection, session creation, session maintenance).\n * @param {Object} config\n */\n\nfunction ProtectionController(config) {\n\n    config = config || {};\n    const protectionKeyController = config.protectionKeyController;\n    let protectionModel = config.protectionModel;\n    const eventBus = config.eventBus;\n    const events = config.events;\n    const debug = config.debug;\n    const BASE64 = config.BASE64;\n    const constants = config.constants;\n    let needkeyRetries = [];\n\n    let instance,\n        logger,\n        pendingNeedKeyData,\n        mediaInfoArr,\n        protDataSet,\n        sessionType,\n        robustnessLevel,\n        keySystem;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        pendingNeedKeyData = [];\n        mediaInfoArr = [];\n        sessionType = 'temporary';\n        robustnessLevel = '';\n    }\n\n    function checkConfig() {\n        if (!eventBus || !eventBus.hasOwnProperty('on') || !protectionKeyController || !protectionKeyController.hasOwnProperty('getSupportedKeySystemsFromContentProtection')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    /**\n     * Initialize this protection system with a given audio\n     * or video stream information.\n     *\n     * @param {StreamInfo} [mediaInfo] Media information\n     * @memberof module:ProtectionController\n     * @instance\n     * @todo This API will change when we have better support for allowing applications\n     * to select different adaptation sets for playback.  Right now it is clunky for\n     * applications to create {@link StreamInfo} with the right information,\n     * @ignore\n     */\n    function initializeForMedia(mediaInfo) {\n        // Not checking here if a session for similar KS/KID combination is already created\n        // because still don't know which keysystem will be selected.\n        // Once Keysystem is selected and before creating the session, we will do that check\n        // so we create the strictly necessary DRM sessions\n        if (!mediaInfo) {\n            throw new Error('mediaInfo can not be null or undefined');\n        }\n\n        checkConfig();\n\n        eventBus.on(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        eventBus.on(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\n\n        mediaInfoArr.push(mediaInfo);\n\n        // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio\n        // and video will be the same.  Just use one valid MediaInfo object\n        const supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);\n        if (supportedKS && supportedKS.length > 0) {\n            selectKeySystem(supportedKS, true);\n        }\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     * @ignore\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        checkConfig();\n        return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps);\n    }\n\n    /**\n     * Create a new key session associated with the given initialization data from\n     * the MPD or from the PSSH box in the media\n     *\n     * @param {ArrayBuffer} initData the initialization data\n     * @param {Uint8Array} cdmData the custom data to provide to licenser\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     * @todo In older versions of the EME spec, there was a one-to-one relationship between\n     * initialization data and key sessions.  That is no longer true in the latest APIs.  This\n     * API will need to modified (and a new \"generateRequest(keySession, initData)\" API created)\n     * to come up to speed with the latest EME standard\n     * @ignore\n     */\n    function createKeySession(initData, cdmData) {\n        const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, initData);\n        const protData = getProtData(keySystem);\n        if (initDataForKS) {\n\n            // Check for duplicate initData\n            const currentInitData = protectionModel.getAllInitData();\n            for (let i = 0; i < currentInitData.length; i++) {\n                if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\n                    logger.warn('DRM: Ignoring initData because we have already seen it!');\n                    return;\n                }\n            }\n            try {\n                protectionModel.createKeySession(initDataForKS, protData, getSessionType(keySystem), cdmData);\n            } catch (error) {\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + error.message)});\n            }\n        } else if (initData) {\n            protectionModel.createKeySession(initData, protData, getSessionType(keySystem), cdmData);\n        } else {\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Selected key system is ' + (keySystem ? keySystem.systemString : null) + '.  needkey/encrypted event contains no initData corresponding to that key system!')});\n        }\n    }\n\n    /**\n     * Loads a key session with the given session ID from persistent storage.  This\n     * essentially creates a new key session\n     *\n     * @param {string} sessionID\n     * @param {string} initData\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     * @ignore\n     */\n    function loadKeySession(sessionID, initData) {\n        checkConfig();\n        protectionModel.loadKeySession(sessionID, initData, getSessionType(keySystem));\n    }\n\n    /**\n     * Removes the given key session from persistent storage and closes the session\n     * as if {@link ProtectionController#closeKeySession}\n     * was called\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionRemoved\n     * @fires ProtectionController#KeySessionClosed\n     * @ignore\n     */\n    function removeKeySession(sessionToken) {\n        checkConfig();\n        protectionModel.removeKeySession(sessionToken);\n    }\n\n    /**\n     * Closes the key session and releases all associated decryption keys.  These\n     * keys will no longer be available for decrypting media\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionClosed\n     * @ignore\n     */\n    function closeKeySession(sessionToken) {\n        checkConfig();\n        protectionModel.closeKeySession(sessionToken);\n    }\n\n    /**\n     * Sets a server certificate for use by the CDM when signing key messages\n     * intended for a particular license server.  This will fire\n     * an error event if a key system has not yet been selected.\n     *\n     * @param {ArrayBuffer} serverCertificate a CDM-specific license server\n     * certificate\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#ServerCertificateUpdated\n     */\n    function setServerCertificate(serverCertificate) {\n        checkConfig();\n        protectionModel.setServerCertificate(serverCertificate);\n    }\n\n    /**\n     * Associate this protection system with the given HTMLMediaElement.  This\n     * causes the system to register for needkey/encrypted events from the given\n     * element and provides a destination for setting of MediaKeys\n     *\n     * @param {HTMLMediaElement} element the media element to which the protection\n     * system should be associated\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setMediaElement(element) {\n        checkConfig();\n        if (element) {\n            protectionModel.setMediaElement(element);\n            eventBus.on(events.NEED_KEY, onNeedKey, this);\n        } else if (element === null) {\n            protectionModel.setMediaElement(element);\n            eventBus.off(events.NEED_KEY, onNeedKey, this);\n        }\n    }\n\n    /**\n     * Sets the session type to use when creating key sessions.  Either \"temporary\" or\n     * \"persistent-license\".  Default is \"temporary\".\n     *\n     * @param {string} value the session type\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setSessionType(value) {\n        sessionType = value;\n    }\n\n    /**\n     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.\n     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.\n     *\n     * @param {string} level the robustness level\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setRobustnessLevel(level) {\n        robustnessLevel = level;\n    }\n\n    /**\n     * Attach KeySystem-specific data to use for license acquisition with EME\n     *\n     * @param {Object} data an object containing property names corresponding to\n     * key system name strings (e.g. \"org.w3.clearkey\") and associated values\n     * being instances of {@link ProtectionData}\n     * @memberof module:ProtectionController\n     * @instance\n     * @ignore\n     */\n    function setProtectionData(data) {\n        protDataSet = data;\n        protectionKeyController.setProtectionData(data);\n    }\n\n    /**\n     * Stop method is called when current playback is stopped/resetted.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function stop() {\n        if (protectionModel) {\n            protectionModel.stop();\n        }\n    }\n\n\n    /**\n     * Destroys all protection data associated with this protection set.  This includes\n     * deleting all key sessions. In the case of persistent key sessions, the sessions\n     * will simply be unloaded and not deleted.  Additionally, if this protection set is\n     * associated with a HTMLMediaElement, it will be detached from that element.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     * @ignore\n     */\n    function reset() {\n        checkConfig();\n\n        eventBus.off(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        eventBus.off(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\n\n        setMediaElement(null);\n\n        keySystem = undefined;//TODO-Refactor look at why undefined is needed for this. refactor\n\n        if (protectionModel) {\n            protectionModel.reset();\n            protectionModel = null;\n        }\n\n        needkeyRetries.forEach( retryTimeout => clearTimeout(retryTimeout));\n        needkeyRetries = [];\n\n        mediaInfoArr = [];\n    }\n\n    ///////////////\n    // Private\n    ///////////////\n\n    function getProtData(keySystem) {\n        let protData = null;\n        if (keySystem) {\n            const keySystemString = keySystem.systemString;\n\n            if (protDataSet) {\n                protData = (keySystemString in protDataSet) ? protDataSet[keySystemString] : null;\n            }\n        }\n        return protData;\n    }\n\n    function getKeySystemConfiguration(keySystem) {\n        const protData = getProtData(keySystem);\n        const audioCapabilities = [];\n        const videoCapabilities = [];\n        const audioRobustness = (protData && protData.audioRobustness && protData.audioRobustness.length > 0) ? protData.audioRobustness : robustnessLevel;\n        const videoRobustness = (protData && protData.videoRobustness && protData.videoRobustness.length > 0) ? protData.videoRobustness : robustnessLevel;\n        const ksSessionType = getSessionType(keySystem);\n        const distinctiveIdentifier = (protData && protData.distinctiveIdentifier) ? protData.distinctiveIdentifier : 'optional';\n        const persistentState = (protData && protData.persistentState) ? protData.persistentState : (ksSessionType === 'temporary') ? 'optional' : 'required';\n\n        mediaInfoArr.forEach((media) => {\n            if (media.type === constants.AUDIO) {\n                audioCapabilities.push(new MediaCapability(media.codec, audioRobustness));\n            } else if (media.type === constants.VIDEO) {\n                videoCapabilities.push(new MediaCapability(media.codec, videoRobustness));\n            }\n        });\n\n        return new KeySystemConfiguration(\n            audioCapabilities, videoCapabilities, distinctiveIdentifier,\n            persistentState,\n            [ksSessionType]);\n    }\n\n    function getSessionType(keySystem) {\n        const protData = getProtData(keySystem);\n        const ksSessionType = (protData && protData.sessionType) ? protData.sessionType : sessionType;\n        return ksSessionType;\n    }\n\n    function selectKeySystem(supportedKS, fromManifest) {\n        const self = this;\n        const requestedKeySystems = [];\n\n        // Reorder key systems according to priority order provided in protectionData\n        supportedKS = supportedKS.sort((ksA, ksB) => {\n            let indexA = (protDataSet && protDataSet[ksA.ks.systemString] && protDataSet[ksA.ks.systemString].priority >= 0) ? protDataSet[ksA.ks.systemString].priority : supportedKS.length;\n            let indexB = (protDataSet && protDataSet[ksB.ks.systemString] && protDataSet[ksB.ks.systemString].priority >= 0) ? protDataSet[ksB.ks.systemString].priority : supportedKS.length;\n            return indexA - indexB;\n        });\n\n        let ksIdx;\n        if (keySystem) {\n            // We have a key system\n            for (ksIdx = 0; ksIdx < supportedKS.length; ksIdx++) {\n                if (keySystem === supportedKS[ksIdx].ks) {\n\n                    requestedKeySystems.push({ks: supportedKS[ksIdx].ks, configs: [getKeySystemConfiguration(keySystem)]});\n\n                    // Ensure that we would be granted key system access using the key\n                    // system and codec information\n                    const onKeySystemAccessComplete = function (event) {\n                        eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                        if (event.error) {\n                            if (!fromManifest) {\n                                eventBus.trigger(events.KEY_SYSTEM_SELECTED, {error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error)});\n                            }\n                        } else {\n                            logger.info('DRM: KeySystem Access Granted');\n                            eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: event.data});\n                            if (supportedKS[ksIdx].sessionId) {\n                                // Load MediaKeySession with sessionId\n                                loadKeySession(supportedKS[ksIdx].sessionId, supportedKS[ksIdx].initData);\n                            } else if (supportedKS[ksIdx].initData) {\n                                // Create new MediaKeySession with initData\n                                createKeySession(supportedKS[ksIdx].initData, supportedKS[ksIdx].cdmData);\n                            }\n                        }\n                    };\n                    eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                    protectionModel.requestKeySystemAccess(requestedKeySystems);\n                    break;\n                }\n            }\n        }\n        else if (keySystem === undefined) {\n            // First time through, so we need to select a key system\n            keySystem = null;\n            pendingNeedKeyData.push(supportedKS);\n\n            // Add all key systems to our request list since we have yet to select a key system\n            for (let i = 0; i < supportedKS.length; i++) {\n                requestedKeySystems.push({ks: supportedKS[i].ks, configs: [getKeySystemConfiguration(supportedKS[i].ks)]});\n            }\n\n            let keySystemAccess;\n            const onKeySystemAccessComplete = function (event) {\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (event.error) {\n                    keySystem = undefined;\n                    eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n                    if (!fromManifest) {\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error)});\n                    }\n                } else {\n                    keySystemAccess = event.data;\n                    logger.info('DRM: KeySystem Access Granted (' + keySystemAccess.keySystem.systemString + ')!  Selecting key system...');\n                    protectionModel.selectKeySystem(keySystemAccess);\n                }\n            };\n            var onKeySystemSelected = function (event) {\n                eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (!event.error) {\n                    if (!protectionModel) {\n                        return;\n                    }\n                    keySystem = protectionModel.getKeySystem();\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: keySystemAccess});\n                    // Set server certificate from protData\n                    const protData = getProtData(keySystem);\n                    if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {\n                        protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);\n                    }\n                    for (let i = 0; i < pendingNeedKeyData.length; i++) {\n                        for (ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {\n                            if (keySystem === pendingNeedKeyData[i][ksIdx].ks) {\n                                // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\n                                // initData and overwrite possible initData indicated in encrypted event (EME)\n                                if (protectionKeyController.isClearKey(keySystem) && protData && protData.hasOwnProperty('clearkeys')) {\n                                    const initData = { kids: Object.keys(protData.clearkeys) };\n                                    pendingNeedKeyData[i][ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\n                                }\n                                if (pendingNeedKeyData[i][ksIdx].sessionId) {\n                                    // Load MediaKeySession with sessionId\n                                    loadKeySession(pendingNeedKeyData[i][ksIdx].sessionId, pendingNeedKeyData[i][ksIdx].initData);\n                                } else if (pendingNeedKeyData[i][ksIdx].initData !== null) {\n                                    // Create new MediaKeySession with initData\n                                    createKeySession(pendingNeedKeyData[i][ksIdx].initData, pendingNeedKeyData[i][ksIdx].cdmData);\n                                }\n                                break;\n                            }\n                        }\n                    }\n                } else {\n                    keySystem = undefined;\n                    if (!fromManifest) {\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + 'Error selecting key system! -- ' + event.error)});\n                    }\n                }\n            };\n            eventBus.on(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n            eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n            protectionModel.requestKeySystemAccess(requestedKeySystems);\n        } else {\n            // We are in the process of selecting a key system, so just save the data\n            pendingNeedKeyData.push(supportedKS);\n        }\n    }\n\n    function sendLicenseRequestCompleteEvent(data, error) {\n        eventBus.trigger(events.LICENSE_REQUEST_COMPLETE, {data: data, error: error});\n    }\n\n    function onKeyStatusChanged(e) {\n        if (e.error) {\n            eventBus.trigger(events.KEY_STATUSES_CHANGED, {data: null, error: e.error});\n        } else {\n            logger.debug('DRM: key status = ' + e.status);\n        }\n    }\n\n    function onKeyMessage(e) {\n        logger.debug('DRM: onKeyMessage');\n\n        // Dispatch event to applications indicating we received a key message\n        const keyMessage = e.data;\n        eventBus.trigger(events.KEY_MESSAGE, {data: keyMessage});\n        const messageType = (keyMessage.messageType) ? keyMessage.messageType : 'license-request';\n        const message = keyMessage.message;\n        const sessionToken = keyMessage.sessionToken;\n        const protData = getProtData(keySystem);\n        const keySystemString = keySystem ? keySystem.systemString : null;\n        const licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType);\n        const eventData = { sessionToken: sessionToken, messageType: messageType };\n\n        // Ensure message from CDM is not empty\n        if (!message || message.byteLength === 0) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE));\n            return;\n        }\n\n        // Message not destined for license server\n        if (!licenseServerData) {\n            logger.debug('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionID());\n            sendLicenseRequestCompleteEvent(eventData);\n            return;\n        }\n\n        // Perform any special handling for ClearKey\n        if (protectionKeyController.isClearKey(keySystem)) {\n            const clearkeys = protectionKeyController.processClearKeyLicenseRequest(keySystem, protData, message);\n            if (clearkeys)  {\n                logger.debug('DRM: ClearKey license request handled by application!');\n                sendLicenseRequestCompleteEvent(eventData);\n                protectionModel.updateKeySession(sessionToken, clearkeys);\n                return;\n            }\n        }\n\n        // All remaining key system scenarios require a request to a remote license server\n        // Determine license server URL\n        let url = null;\n        if (protData && protData.serverURL) {\n            const serverURL = protData.serverURL;\n            if (typeof serverURL === 'string' && serverURL !== '') {\n                url = serverURL;\n            } else if (typeof serverURL === 'object' && serverURL.hasOwnProperty(messageType)) {\n                url = serverURL[messageType];\n            }\n        } else if (protData && protData.laURL && protData.laURL !== '') {\n            // TODO: Deprecated!\n            url = protData.laURL;\n        } else {\n            url = keySystem.getLicenseServerURLFromInitData(CommonEncryption.getPSSHData(sessionToken.initData));\n            if (!url) {\n                url = e.data.laURL;\n            }\n        }\n        // Possibly update or override the URL based on the message\n        url = licenseServerData.getServerURLFromMessage(url, message, messageType);\n\n        // Ensure valid license server URL\n        if (!url) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE));\n            return;\n        }\n\n        // Set optional XMLHttpRequest headers from protection data and message\n        const reqHeaders = {};\n        let withCredentials = false;\n        const updateHeaders = function (headers) {\n            if (headers) {\n                for (const key in headers) {\n                    if ('authorization' === key.toLowerCase()) {\n                        withCredentials = true;\n                    }\n                    reqHeaders[key] = headers[key];\n                }\n            }\n        };\n        if (protData) {\n            updateHeaders(protData.httpRequestHeaders);\n        }\n        updateHeaders(keySystem.getRequestHeadersFromMessage(message));\n\n        // Overwrite withCredentials property from protData if present\n        if (protData && typeof protData.withCredentials == 'boolean') {\n            withCredentials = protData.withCredentials;\n        }\n\n        const reportError = function (xhr, eventData, keySystemString, messageType) {\n            const errorMsg = ((xhr.response) ? licenseServerData.getErrorResponse(xhr.response, keySystemString, messageType) : 'NONE');\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR complete. status is \"' +\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState + '.  Response is ' + errorMsg));\n        };\n\n        const onLoad = function (xhr) {\n            if (!protectionModel) {\n                return;\n            }\n\n            if (xhr.status === 200) {\n                const licenseMessage = licenseServerData.getLicenseMessage(xhr.response, keySystemString, messageType);\n                if (licenseMessage !== null) {\n                    sendLicenseRequestCompleteEvent(eventData);\n                    protectionModel.updateKeySession(sessionToken, licenseMessage);\n                } else {\n                    reportError(xhr, eventData, keySystemString, messageType);\n                }\n            } else {\n                reportError(xhr, eventData, keySystemString, messageType);\n            }\n        };\n\n        const onAbort = function (xhr) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR aborted. status is \"' +\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\n        };\n\n        const onError = function (xhr) {\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR error. status is \"' +\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\n        };\n\n        const reqPayload = keySystem.getLicenseRequestFromMessage(message);\n        const reqMethod = licenseServerData.getHTTPMethod(messageType);\n        const responseType = licenseServerData.getResponseType(keySystemString, messageType);\n        const timeout = protData && !isNaN(protData.httpTimeout) ? protData.httpTimeout : LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT;\n\n        doLicenseRequest(url, reqHeaders, reqMethod, responseType, withCredentials, reqPayload,\n            LICENSE_SERVER_REQUEST_RETRIES, timeout, onLoad, onAbort, onError);\n    }\n\n    // Implement license requests with a retry mechanism to avoid temporary network issues to affect playback experience\n    function doLicenseRequest(url, headers, method, responseType, withCredentials, payload, retriesCount, timeout, onLoad, onAbort, onError) {\n        const xhr = new XMLHttpRequest();\n\n        xhr.open(method, url, true);\n        xhr.responseType = responseType;\n        xhr.withCredentials = withCredentials;\n        if (timeout > 0) {\n            xhr.timeout = timeout;\n        }\n        for (const key in headers) {\n            xhr.setRequestHeader(key, headers[key]);\n        }\n\n        const retryRequest = function () {\n            // fail silently and retry\n            retriesCount--;\n            setTimeout(function () {\n                doLicenseRequest(url, headers, method, responseType, withCredentials, payload,\n                    retriesCount, timeout, onLoad, onAbort, onError);\n            }, LICENSE_SERVER_REQUEST_RETRY_INTERVAL);\n        };\n\n        xhr.onload = function () {\n            if (this.status === 200 || retriesCount <= 0) {\n                onLoad(this);\n            } else {\n                logger.warn('License request failed (' + this.status + '). Retrying it... Pending retries: ' + retriesCount);\n                retryRequest();\n            }\n        };\n\n        xhr.ontimeout = xhr.onerror = function () {\n            if (retriesCount <= 0) {\n                onError(this);\n            } else {\n                logger.warn('License request network request failed . Retrying it... Pending retries: ' + retriesCount);\n                retryRequest();\n            }\n        };\n\n        xhr.onabort = function () {\n            onAbort(this);\n        };\n\n        xhr.send(payload);\n    }\n\n    function onNeedKey(event, retry) {\n        logger.debug('DRM: onNeedKey');\n        // Ignore non-cenc initData\n        if (event.key.initDataType !== 'cenc') {\n            logger.warn('DRM:  Only \\'cenc\\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);\n            return;\n        }\n\n        if (mediaInfoArr.length === 0) {\n            logger.warn('DRM: onNeedKey called before initializeForMedia, wait until initialized');\n            retry = typeof retry === 'undefined' ? 1 : retry + 1;\n            if (retry < NEEDKEY_BEFORE_INITIALIZE_RETRIES) {\n                needkeyRetries.push(setTimeout(() => {\n                    onNeedKey(event, retry);\n                }, NEEDKEY_BEFORE_INITIALIZE_TIMEOUT));\n                return;\n            }\n\n        }\n\n        // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).\n        // Convert to ArrayBuffer\n        let abInitData = event.key.initData;\n        if (ArrayBuffer.isView(abInitData)) {\n            abInitData = abInitData.buffer;\n        }\n\n        // If key system has already been selected and initData already seen, then do nothing\n        if (keySystem) {\n            const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, abInitData);\n            if (initDataForKS) {\n\n                // Check for duplicate initData\n                const currentInitData = protectionModel.getAllInitData();\n                for (let i = 0; i < currentInitData.length; i++) {\n                    if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\n                        logger.warn('DRM: Ignoring initData because we have already seen it!');\n                        return;\n                    }\n                }\n            }\n        }\n\n        logger.debug('DRM: initData:', String.fromCharCode.apply(null, new Uint8Array(abInitData)));\n\n        const supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);\n        if (supportedKS.length === 0) {\n            logger.debug('DRM: Received needkey event with initData, but we don\\'t support any of the key systems!');\n            return;\n        }\n\n        selectKeySystem(supportedKS, false);\n    }\n\n    function getKeySystems() {\n        return protectionKeyController ? protectionKeyController.getKeySystems() : [];\n    }\n\n    function setKeySystems(keySystems) {\n        if (protectionKeyController) {\n            protectionKeyController.setKeySystems(keySystems);\n        }\n    }\n\n    instance = {\n        initializeForMedia: initializeForMedia,\n        createKeySession: createKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        setMediaElement: setMediaElement,\n        setSessionType: setSessionType,\n        setRobustnessLevel: setRobustnessLevel,\n        setProtectionData: setProtectionData,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getKeySystems: getKeySystems,\n        setKeySystems: setKeySystems,\n        stop: stop,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nProtectionController.__dashjs_factory_name = 'ProtectionController';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport CommonEncryption from './../CommonEncryption';\nimport KeySystemClearKey from './../drm/KeySystemClearKey';\nimport KeySystemW3CClearKey from './../drm/KeySystemW3CClearKey';\nimport KeySystemWidevine from './../drm/KeySystemWidevine';\nimport KeySystemPlayReady from './../drm/KeySystemPlayReady';\nimport DRMToday from './../servers/DRMToday';\nimport PlayReady from './../servers/PlayReady';\nimport Widevine from './../servers/Widevine';\nimport ClearKey from './../servers/ClearKey';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\n/**\n * @module ProtectionKeyController\n * @ignore\n * @description Media protection key system functionality that can be modified/overridden by applications\n */\nfunction ProtectionKeyController() {\n\n    let context = this.context;\n\n    let instance,\n        debug,\n        logger,\n        keySystems,\n        BASE64,\n        clearkeyKeySystem,\n        clearkeyW3CKeySystem;\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.debug) {\n            debug = config.debug;\n            logger = debug.getLogger(instance);\n        }\n\n        if (config.BASE64) {\n            BASE64 = config.BASE64;\n        }\n    }\n\n    function initialize() {\n        keySystems = [];\n\n        let keySystem;\n\n        // PlayReady\n        keySystem = KeySystemPlayReady(context).getInstance({ BASE64: BASE64 });\n        keySystems.push(keySystem);\n\n        // Widevine\n        keySystem = KeySystemWidevine(context).getInstance({ BASE64: BASE64 });\n        keySystems.push(keySystem);\n\n        // ClearKey\n        keySystem = KeySystemClearKey(context).getInstance({ BASE64: BASE64 });\n        keySystems.push(keySystem);\n        clearkeyKeySystem = keySystem;\n\n        // W3C ClearKey\n        keySystem = KeySystemW3CClearKey(context).getInstance({ BASE64: BASE64, debug: debug });\n        keySystems.push(keySystem);\n        clearkeyW3CKeySystem = keySystem;\n    }\n\n    /**\n     * Returns a prioritized list of key systems supported\n     * by this player (not necessarily those supported by the\n     * user agent)\n     *\n     * @returns {Array.<KeySystem>} a prioritized\n     * list of key systems\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystems() {\n        return keySystems;\n    }\n\n    /**\n     * Sets the prioritized list of key systems to be supported\n     * by this player.\n     *\n     * @param {Array.<KeySystem>} newKeySystems the new prioritized\n     * list of key systems\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function setKeySystems(newKeySystems) {\n        keySystems = newKeySystems;\n    }\n\n    /**\n     * Returns the key system associated with the given key system string\n     * name (i.e. 'org.w3.clearkey')\n     *\n     * @param {string} systemString the system string\n     * @returns {KeySystem|null} the key system\n     * or null if no supported key system is associated with the given key\n     * system string\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystemBySystemString(systemString) {\n        for (let i = 0; i < keySystems.length; i++) {\n            if (keySystems[i].systemString === systemString) {\n                return keySystems[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Determines whether the given key system is ClearKey.  This is\n     * necessary because the EME spec defines ClearKey and its method\n     * for providing keys to the key session; and this method has changed\n     * between the various API versions.  Our EME-specific ProtectionModels\n     * must know if the system is ClearKey so that it can format the keys\n     * according to the particular spec version.\n     *\n     * @param {Object} keySystem the key\n     * @returns {boolean} true if this is the ClearKey key system, false\n     * otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function isClearKey(keySystem) {\n        return (keySystem === clearkeyKeySystem || keySystem === clearkeyW3CKeySystem);\n    }\n\n    /**\n     * Check equality of initData array buffers.\n     *\n     * @param {ArrayBuffer} initData1 - first initData\n     * @param {ArrayBuffer} initData2 - second initData\n     * @returns {boolean} true if the initData arrays are equal in size and\n     * contents, false otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function initDataEquals(initData1, initData2) {\n        if (initData1.byteLength === initData2.byteLength) {\n            let data1 = new Uint8Array(initData1);\n            let data2 = new Uint8Array(initData2);\n\n            for (let j = 0; j < data1.length; j++) {\n                if (data1[j] !== data2[j]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        let cp, ks, ksIdx, cpIdx;\n        let supportedKS = [];\n\n        if (cps) {\n            for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n                ks = keySystems[ksIdx];\n                for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {\n                    cp = cps[cpIdx];\n                    if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {\n                        // Look for DRM-specific ContentProtection\n                        let initData = ks.getInitData(cp);\n\n                        supportedKS.push({\n                            ks: keySystems[ksIdx],\n                            initData: initData,\n                            cdmData: ks.getCDMData(),\n                            sessionId: ks.getSessionId(cp)\n                        });\n                    }\n                }\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns key systems supported by this player for the given PSSH\n     * initializationData. Only key systems supported by this player\n     * that have protection data present will be returned.  Key systems are returned in priority order\n     * (highest priority first)\n     *\n     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs\n     * supported by the content\n     * @param {ProtectionData} protDataSet user specified protection data - license server url etc\n     * supported by the content\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystems(initData, protDataSet) {\n        let supportedKS = [];\n        let pssh = CommonEncryption.parsePSSHList(initData);\n        let ks, keySystemString, shouldNotFilterOutKeySystem;\n\n        for (let ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n            ks = keySystems[ksIdx];\n            keySystemString = ks.systemString;\n            shouldNotFilterOutKeySystem = (protDataSet) ? keySystemString in protDataSet : true;\n\n            if (ks.uuid in pssh && shouldNotFilterOutKeySystem) {\n                supportedKS.push({\n                    ks: ks,\n                    initData: pssh[ks.uuid],\n                    cdmData: ks.getCDMData(),\n                    sessionId: ks.getSessionId()\n                });\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns the license server implementation data that should be used for this request.\n     *\n     * @param {KeySystem} keySystem the key system\n     * associated with this license request\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {string} [messageType=\"license-request\"] the message type associated with this\n     * request.  Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @returns {LicenseServer|null} the license server\n     * implementation that should be used for this request or null if the player should not\n     * pass messages of the given type to a license server\n     * @memberof module:ProtectionKeyController\n     * @instance\n     *\n     */\n    function getLicenseServer(keySystem, protData, messageType) {\n\n        // Our default server implementations do not do anything with \"license-release\" or\n        // \"individualization-request\" messages, so we just send a success event\n        if (messageType === 'license-release' || messageType === 'individualization-request') {\n            return null;\n        }\n\n        let licenseServerData = null;\n        if (protData && protData.hasOwnProperty('drmtoday')) {\n            licenseServerData = DRMToday(context).getInstance({ BASE64: BASE64 });\n        } else if (keySystem.systemString === ProtectionConstants.WIDEVINE_KEYSTEM_STRING) {\n            licenseServerData = Widevine(context).getInstance();\n        } else if (keySystem.systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING) {\n            licenseServerData = PlayReady(context).getInstance();\n        } else if (keySystem.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING) {\n            licenseServerData = ClearKey(context).getInstance();\n        }\n\n        return licenseServerData;\n    }\n\n    /**\n     * Allows application-specific retrieval of ClearKey keys.\n     *\n     * @param {KeySystem} clearkeyKeySystem They exact ClearKey System to be used\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {ArrayBuffer} message the key message from the CDM\n     * @return {ClearKeyKeySet|null} the clear keys associated with\n     * the request or null if no keys can be returned by this function\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function processClearKeyLicenseRequest(clearkeyKeySystem, protData, message) {\n        try {\n            return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);\n        } catch (error) {\n            logger.error('Failed to retrieve clearkeys from ProtectionData');\n            return null;\n        }\n    }\n\n    function setProtectionData(protectionDataSet) {\n        var getProtectionData = function (keySystemString) {\n            var protData = null;\n            if (protectionDataSet) {\n                protData = (keySystemString in protectionDataSet) ? protectionDataSet[keySystemString] : null;\n            }\n            return protData;\n        };\n\n        for (var i = 0; i < keySystems.length; i++) {\n            var keySystem = keySystems[i];\n            if (keySystem.hasOwnProperty('init')) {\n                keySystem.init(getProtectionData(keySystem.systemString));\n            }\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        setProtectionData: setProtectionData,\n        isClearKey: isClearKey,\n        initDataEquals: initDataEquals,\n        getKeySystems: getKeySystems,\n        setKeySystems: setKeySystems,\n        getKeySystemBySystemString: getKeySystemBySystemString,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getSupportedKeySystems: getSupportedKeySystems,\n        getLicenseServer: getLicenseServer,\n        processClearKeyLicenseRequest: processClearKeyLicenseRequest,\n        setConfig: setConfig\n    };\n\n    return instance;\n}\n\nProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';\nexport default dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = 'e2719d58-a985-b3c9-781a-b030af78d30e';\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemClearKey(config) {\n\n    config = config || {};\n    let instance;\n    const BASE64 = config.BASE64;\n\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionData} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            const keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                const clearkeyID = jsonMsg.kids[i];\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(/*cp*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Microsoft PlayReady DRM\n *\n * @class\n * @implements KeySystem\n */\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\nconst systemString = ProtectionConstants.PLAYREADY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\nconst PRCDMData = '<PlayReadyCDMData type=\"LicenseAcquisition\"><LicenseAcquisition version=\"1.0\" Proactive=\"false\"><CustomData encoding=\"base64encoded\">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';\nlet protData;\n\nfunction KeySystemPlayReady(config) {\n\n    config = config || {};\n    let instance;\n    let messageFormat = 'utf-16';\n    const BASE64 = config.BASE64;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray') || !BASE64.hasOwnProperty('decodeArray') ) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getRequestHeadersFromMessage(message) {\n        let msg,\n            xmlDoc;\n        const headers = {};\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        msg = String.fromCharCode.apply(null, dataview);\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        const headerNameList = xmlDoc.getElementsByTagName('name');\n        const headerValueList = xmlDoc.getElementsByTagName('value');\n        for (let i = 0; i < headerNameList.length; i++) {\n            headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\n        }\n        // Some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\n        // this is NOT w3c conform and license servers may reject the request!\n        // -> rename it to proper w3c definition!\n        if (headers.hasOwnProperty('Content')) {\n            headers['Content-Type'] = headers.Content;\n            delete headers.Content;\n        }\n        // Set Content-Type header by default if not provided in the the CDM message (<PlayReadyKeyMessage/>)\n        // or if the message contains directly the challenge itself (Ex: LG SmartTVs)\n        if (!headers.hasOwnProperty('Content-Type')) {\n            headers['Content-Type'] = 'text/xml; charset=utf-8';\n        }\n        return headers;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        let licenseRequest = null;\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        checkConfig();\n        const msg = String.fromCharCode.apply(null, dataview);\n        const xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        if (xmlDoc.getElementsByTagName('PlayReadyKeyMessage')[0]) {\n            const Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\n            if (Challenge) {\n                licenseRequest = BASE64.decode(Challenge);\n            }\n        } else {\n            // The message from CDM is not a wrapped message as on IE11 and Edge,\n            // thus it contains direclty the challenge itself\n            // (note that the xmlDoc at this point may be unreadable since it may have been interpreted as UTF-16)\n            return message;\n        }\n\n        return licenseRequest;\n    }\n\n    function getLicenseServerURLFromInitData(initData) {\n        if (initData) {\n            const data = new DataView(initData);\n            const numRecords = data.getUint16(4, true);\n            let offset = 6;\n            const parser = new DOMParser();\n\n            for (let i = 0; i < numRecords; i++) {\n                // Parse the PlayReady Record header\n                const recordType = data.getUint16(offset, true);\n                offset += 2;\n                const recordLength = data.getUint16(offset, true);\n                offset += 2;\n                if (recordType !== 0x0001) {\n                    offset += recordLength;\n                    continue;\n                }\n\n                const recordData = initData.slice(offset, offset + recordLength);\n                const record = String.fromCharCode.apply(null, new Uint16Array(recordData));\n                const xmlDoc = parser.parseFromString(record, 'application/xml');\n\n                // First try <LA_URL>\n                if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\n                    const laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\n                    if (laurl) {\n                        return laurl;\n                    }\n                }\n\n                // Optionally, try <LUI_URL>\n                if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\n                    const luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\n                    if (luiurl) {\n                        return luiurl;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    function getInitData(cpData) {\n        // * desc@ getInitData\n        // *   generate PSSH data from PROHeader defined in MPD file\n        // *   PSSH format:\n        // *   size (4)\n        // *   box type(PSSH) (8)\n        // *   Protection SystemID (16)\n        // *   protection system data size (4) - length of decoded PROHeader\n        // *   decoded PROHeader data from MPD file\n        const PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\n        const playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\n\n        let byteCursor = 0;\n        let uint8arraydecodedPROHeader = null;\n\n        let PROSize,\n            PSSHSize,\n            PSSHBoxBuffer,\n            PSSHBox,\n            PSSHData;\n\n        checkConfig();\n        if (!cpData) {\n            return null;\n        }\n        // Handle common encryption PSSH\n        if ('pssh' in cpData) {\n            return CommonEncryption.parseInitDataFromContentProtection(cpData, BASE64);\n        }\n        // Handle native MS PlayReady ContentProtection elements\n        if ('pro' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\n        }\n        else if ('prheader' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\n        }\n        else {\n            return null;\n        }\n\n        PROSize = uint8arraydecodedPROHeader.length;\n        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\n\n        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\n\n        PSSHBox = new Uint8Array(PSSHBoxBuffer);\n        PSSHData = new DataView(PSSHBoxBuffer);\n\n        PSSHData.setUint32(byteCursor, PSSHSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(PSSHBoxType, byteCursor);\n        byteCursor += PSSHBoxType.length;\n\n        PSSHBox.set(playreadySystemID, byteCursor);\n        byteCursor += playreadySystemID.length;\n\n        PSSHData.setUint32(byteCursor, PROSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\n        byteCursor += PROSize;\n\n        return PSSHBox.buffer;\n    }\n\n    /**\n     * It seems that some PlayReady implementations return their XML-based CDM\n     * messages using UTF16, while others return them as UTF8.  Use this function\n     * to modify the message format to expect when parsing CDM messages.\n     *\n     * @param {string} format the expected message format.  Either \"utf-8\" or \"utf-16\".\n     * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\n     */\n    function setPlayReadyMessageFormat(format) {\n        if (format !== 'utf-8' && format !== 'utf-16') {\n            throw new Error('Specified message format is not one of \"utf-8\" or \"utf-16\"');\n        }\n        messageFormat = format;\n    }\n\n    /**\n     * Initialize the Key system with protection data\n     * @param {Object} protectionData the protection data\n     */\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n\n    /**\n     * Get Playready Custom data\n     */\n    function getCDMData() {\n        let customData,\n            cdmData,\n            cdmDataBytes,\n            i;\n\n        checkConfig();\n        if (protData && protData.cdmData) {\n            // Convert custom data into multibyte string\n            customData = [];\n            for (i = 0; i < protData.cdmData.length; ++i) {\n                customData.push(protData.cdmData.charCodeAt(i));\n                customData.push(0);\n            }\n            customData = String.fromCharCode.apply(null, customData);\n\n            // Encode in Base 64 the custom data string\n            customData = BASE64.encode(customData);\n\n            // Initialize CDM data with Base 64 encoded custom data\n            // (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)\n            cdmData = PRCDMData.replace('%CUSTOMDATA%', customData);\n\n            // Convert CDM data into multibyte characters\n            cdmDataBytes = [];\n            for (i = 0; i < cdmData.length; ++i) {\n                cdmDataBytes.push(cdmData.charCodeAt(i));\n                cdmDataBytes.push(0);\n            }\n\n            return new Uint8Array(cdmDataBytes).buffer;\n        }\n\n        return null;\n    }\n\n    function getSessionId(cp) {\n        // Get sessionId from protectionData or from manifest\n        if (protData && protData.sessionId) {\n            return protData.sessionId;\n        } else if (cp && cp.sessionId) {\n            return cp.sessionId;\n        }\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        setPlayReadyMessageFormat: setPlayReadyMessageFormat,\n        init: init\n    };\n\n    return instance;\n}\n\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemW3CClearKey(config) {\n    let instance;\n    const BASE64 = config.BASE64;\n    const logger = config.debug.getLogger(instance);\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionData} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            const keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                const clearkeyID = jsonMsg.kids[i];\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n\n            logger.warn('ClearKey schemeIdURI is using W3C Common PSSH systemID (1077efec-c0b2-4d02-ace3-3c1e52e2fb4b) in Content Protection. See DASH-IF IOP v4.1 section 7.6.2.4');\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(/*cp*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemW3CClearKey.__dashjs_factory_name = 'KeySystemW3CClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemW3CClearKey); /* jshint ignore:line */\n\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Google Widevine DRM\n *\n * @class\n * @implements MediaPlayer.dependencies.protection.KeySystem\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = 'edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\nconst systemString = ProtectionConstants.WIDEVINE_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemWidevine(config) {\n\n    config = config || {};\n    let instance;\n    let protData = null;\n    const BASE64 = config.BASE64;\n\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage( /*message*/ ) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData( /*initData*/ ) {\n        return null;\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(cp) {\n        // Get sessionId from protectionData or from manifest\n        if (protData && protData.sessionId) {\n            return protData.sessionId;\n        } else if (cp && cp.sessionId) {\n            return cp.sessionId;\n        }\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        init: init,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId\n    };\n\n    return instance;\n}\n\nKeySystemWidevine.__dashjs_factory_name = 'KeySystemWidevine';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemWidevine); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport ErrorsBase from '../../../core/errors/ErrorsBase';\n/**\n * @class\n */\nclass ProtectionErrors extends ErrorsBase {\n\tconstructor () {\n        super();\n\n        /**\n         *  Generid key Error code\n         */\n        this.MEDIA_KEYERR_CODE = 100;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_UNKNOWN_CODE = 101;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_CLIENT_CODE = 102;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_SERVICE_CODE = 103;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_OUTPUT_CODE = 104;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_HARDWARECHANGE_CODE = 105;\n        /**\n         *  Error code returned by keyerror api for ProtectionModel_01b\n         */\n        this.MEDIA_KEYERR_DOMAIN_CODE = 106;\n\n        /**\n         *  Error code returned when an error occured in keymessage event for ProtectionModel_01b\n         */\n        this.MEDIA_KEY_MESSAGE_ERROR_CODE = 107;\n        /**\n         *  Error code returned when challenge is invalid in keymessage event (event triggered by CDM)\n         */\n        this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE = 108;\n        /**\n         *  Error code returned when License server certificate has not been successfully updated\n         */\n        this.SERVER_CERTIFICATE_UPDATED_ERROR_CODE = 109;\n        /**\n         *  Error code returned when license validity has expired\n         */\n        this.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE = 110;\n        /**\n         *  Error code returned when no licenser url is defined\n         */\n        this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE = 111;\n        /**\n         *  Error code returned when key system access is denied\n         */\n        this.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE = 112;\n        /**\n         *  Error code returned when key session has not been successfully created\n         */\n        this.KEY_SESSION_CREATED_ERROR_CODE = 113;\n        /**\n         *  Error code returned when license request failed after a keymessage event has been triggered\n         */\n        this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE = 114;\n\n        this.MEDIA_KEYERR_UNKNOWN_MESSAGE = 'An unspecified error occurred. This value is used for errors that don\\'t match any of the other codes.';\n        this.MEDIA_KEYERR_CLIENT_MESSAGE = 'The Key System could not be installed or updated.';\n        this.MEDIA_KEYERR_SERVICE_MESSAGE = 'The message passed into update indicated an error from the license service.';\n        this.MEDIA_KEYERR_OUTPUT_MESSAGE = 'There is no available output device with the required characteristics for the content protection system.';\n        this.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE = 'A hardware configuration change caused a content protection error.';\n        this.MEDIA_KEYERR_DOMAIN_MESSAGE = 'An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.';\n        this.MEDIA_KEY_MESSAGE_ERROR_MESSAGE = 'Multiple key sessions were creates with a user-agent that does not support sessionIDs!! Unpredictable behavior ahead!';\n        this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE = 'DRM: Empty key message from CDM';\n        this.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE = 'Error updating server certificate -- ';\n        this.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE = 'DRM: KeyStatusChange error! -- License has expired';\n        this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE = 'DRM: No license server URL specified!';\n        this.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE = 'DRM: KeySystem Access Denied! -- ';\n        this.KEY_SESSION_CREATED_ERROR_MESSAGE = 'DRM: unable to create session! --';\n        this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE = 'DRM: licenser error! --';\n    }\n}\n\nlet protectionErrors = new ProtectionErrors();\nexport default protectionErrors;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Initial implementation of EME\n *\n * Implemented by Google Chrome prior to v36\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport DashJSError from '../../vo/DashJSError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport ProtectionErrors from '../errors/ProtectionErrors';\n\nfunction ProtectionModel_01b(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n    const api = config.api;\n    const errHandler = config.errHandler;\n\n    let instance,\n        logger,\n        videoElement,\n        keySystem,\n        protectionKeyController,\n\n        // With this version of the EME APIs, sessionIDs are not assigned to\n        // sessions until the first key message is received.  We are assuming\n        // that in the case of multiple sessions, key messages will be received\n        // in the order that generateKeyRequest() is called.\n        // Holding spot for newly-created sessions until we determine whether or\n        // not the CDM supports sessionIDs\n        pendingSessions,\n\n        // List of sessions that have been initialized.  Only the first position will\n        // be used in the case that the CDM does not support sessionIDs\n        sessions,\n\n        // Not all CDMs support the notion of sessionIDs.  Without sessionIDs\n        // there is no way for us to differentiate between sessions, therefore\n        // we must only allow a single session.  Once we receive the first key\n        // message we can set this flag to determine if more sessions are allowed\n        moreSessionsAllowed,\n\n        // This is our main event handler for all desired HTMLMediaElement events\n        // related to EME.  These events are translated into our API-independent\n        // versions of the same events\n        eventHandler;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        videoElement = null;\n        keySystem = null;\n        pendingSessions = [];\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        if (videoElement) {\n            removeEventListeners();\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            closeKeySession(sessions[i]);\n        }\n        eventBus.trigger(events.TEARDOWN_COMPLETE);\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < pendingSessions.length; i++) {\n            retVal.push(pendingSessions[i].initData);\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        let ve = videoElement;\n        if (!ve) { // Must have a video element to do this capability tests\n            ve = document.createElement('video');\n        }\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\n            const configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                //let audios = configs[configIdx].audioCapabilities;\n                const videos = configs[configIdx].videoCapabilities;\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== '') {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied! -- No valid audio/video content configurations detected!'});\n        }\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystem = keySystemAccess.keySystem;\n        eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement) {\n            return;\n        }\n\n        // Replacing the previous element\n        if (videoElement) {\n            removeEventListeners();\n\n            // Close any open sessions - avoids memory leak on LG webOS 2016/2017 TVs\n            for (var i = 0; i < sessions.length; i++) {\n                closeKeySession(sessions[i]);\n            }\n            sessions = [];\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.keyerror, eventHandler);\n            videoElement.addEventListener(api.needkey, eventHandler);\n            videoElement.addEventListener(api.keymessage, eventHandler);\n            videoElement.addEventListener(api.keyadded, eventHandler);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        }\n    }\n\n    function createKeySession(initData /*, protData, keySystemType */) {\n        if (!keySystem) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Determine if creating a new session is allowed\n        if (moreSessionsAllowed || sessions.length === 0) {\n            const newSession = { // Implements SessionToken\n                sessionID: null,\n                initData: initData,\n                getSessionID: function () {\n                    return this.sessionID;\n                },\n\n                getExpirationTime: function () {\n                    return NaN;\n                },\n\n                getSessionType: function () {\n                    return 'temporary';\n                }\n            };\n            pendingSessions.push(newSession);\n\n            // Send our request to the CDM\n            videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(initData));\n\n            return newSession;\n\n        } else {\n            throw new Error('Multiple sessions not allowed!');\n        }\n\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const sessionID = sessionToken.sessionID;\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the CDM\n            videoElement[api.addKey](keySystem.systemString,\n                new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionID);\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            for (let i = 0; i < message.keyPairs.length; i++) {\n                videoElement[api.addKey](keySystem.systemString,\n                    message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID);\n            }\n        }\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the CDM\n        try {\n            videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionID);\n        } catch (error) {\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {data: null, error: 'Error closing session (' + sessionToken.sessionID + ') ' + error.message});\n        }\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                let sessionToken = null;\n                switch (event.type) {\n                    case api.needkey:\n                        let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                        eventBus.trigger(events.NEED_KEY, {key: new NeedKey(initData, 'cenc')});\n                        break;\n\n                    case api.keyerror:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            let code = ProtectionErrors.MEDIA_KEYERR_CODE;\n                            let msg = '';\n                            switch (event.errorCode.code) {\n                                case 1:\n                                    code = ProtectionErrors.MEDIA_KEYERR_UNKNOWN_CODE;\n                                    msg += 'MEDIA_KEYERR_UNKNOWN - ' + ProtectionErrors.MEDIA_KEYERR_UNKNOWN_MESSAGE;\n                                    break;\n                                case 2:\n                                    code = ProtectionErrors.MEDIA_KEYERR_CLIENT_CODE;\n                                    msg += 'MEDIA_KEYERR_CLIENT - ' + ProtectionErrors.MEDIA_KEYERR_CLIENT_MESSAGE;\n                                    break;\n                                case 3:\n                                    code = ProtectionErrors.MEDIA_KEYERR_SERVICE_CODE;\n                                    msg += 'MEDIA_KEYERR_SERVICE - ' + ProtectionErrors.MEDIA_KEYERR_SERVICE_MESSAGE;\n                                    break;\n                                case 4:\n                                    code = ProtectionErrors.MEDIA_KEYERR_OUTPUT_CODE;\n                                    msg += 'MEDIA_KEYERR_OUTPUT - ' + ProtectionErrors.MEDIA_KEYERR_OUTPUT_MESSAGE;\n                                    break;\n                                case 5:\n                                    code = ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_CODE;\n                                    msg += 'MEDIA_KEYERR_HARDWARECHANGE - ' + ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE;\n                                    break;\n                                case 6:\n                                    code = ProtectionErrors.MEDIA_KEYERR_DOMAIN_CODE;\n                                    msg += 'MEDIA_KEYERR_DOMAIN - ' + ProtectionErrors.MEDIA_KEYERR_DOMAIN_MESSAGE;\n                                    break;\n                            }\n                            msg += '  System Code = ' + event.systemCode;\n                            // TODO: Build error string based on key error\n                            eventBus.trigger(events.KEY_ERROR, {data: new DashJSError(code, msg, sessionToken)});\n                        } else {\n                            logger.error('No session token found for key error');\n                        }\n                        break;\n\n                    case api.keyadded:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            logger.debug('DRM: Key added.');\n                            eventBus.trigger(events.KEY_ADDED, {data: sessionToken});//TODO not sure anything is using sessionToken? why there?\n                        } else {\n                            logger.debug('No session token found for key added');\n                        }\n                        break;\n\n                    case api.keymessage:\n                        // If this CDM does not support session IDs, we will be limited\n                        // to a single session\n                        moreSessionsAllowed = (event.sessionId !== null) && (event.sessionId !== undefined);\n\n                        // SessionIDs supported\n                        if (moreSessionsAllowed) {\n                            // Attempt to find an uninitialized token with this sessionID\n                            sessionToken = findSessionByID(sessions, event.sessionId);\n                            if (!sessionToken && pendingSessions.length > 0) {\n\n                                // This is the first message for our latest session, so set the\n                                // sessionID and add it to our list\n                                sessionToken = pendingSessions.shift();\n                                sessions.push(sessionToken);\n                                sessionToken.sessionID = event.sessionId;\n\n                                eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\n                            }\n                        } else if (pendingSessions.length > 0) { // SessionIDs not supported\n                            sessionToken = pendingSessions.shift();\n                            sessions.push(sessionToken);\n\n                            if (pendingSessions.length !== 0) {\n                                errHandler.error(new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_MESSAGE));\n                            }\n                        }\n\n                        if (sessionToken) {\n                            let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n\n                            // For ClearKey, the spec mandates that you pass this message to the\n                            // addKey method, so we always save it to the token since there is no\n                            // way to tell which key system is in use\n                            sessionToken.keyMessage = message;\n                            eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(sessionToken, message, event.defaultURL)});\n\n                        } else {\n                            logger.warn('No session token found for key message');\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    /**\n     * Helper function to retrieve the stored session token based on a given\n     * sessionID value\n     *\n     * @param {Array} sessionArray - the array of sessions to search\n     * @param {*} sessionID - the sessionID to search for\n     * @returns {*} the session token with the given sessionID\n     */\n    function findSessionByID(sessionArray, sessionID) {\n        if (!sessionID || !sessionArray) {\n            return null;\n        } else {\n            const len = sessionArray.length;\n            for (let i = 0; i < len; i++) {\n                if (sessionArray[i].sessionID == sessionID) {\n                    return sessionArray[i];\n                }\n            }\n            return null;\n        }\n    }\n\n    function removeEventListeners() {\n        videoElement.removeEventListener(api.keyerror, eventHandler);\n        videoElement.removeEventListener(api.needkey, eventHandler);\n        videoElement.removeEventListener(api.keymessage, eventHandler);\n        videoElement.removeEventListener(api.keyadded, eventHandler);\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        stop: reset,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_01b.__dashjs_factory_name = 'ProtectionModel_01b';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_01b); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Most recent EME implementation\n *\n * Implemented by Google Chrome v36+ (Windows, OSX, Linux)\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport ProtectionErrors from '../errors/ProtectionErrors';\nimport DashJSError from '../../vo/DashJSError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nfunction ProtectionModel_21Jan2015(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n\n    let instance,\n        logger,\n        keySystem,\n        videoElement,\n        mediaKeys,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        keySystem = null;\n        videoElement = null;\n        mediaKeys = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        const numSessions = sessions.length;\n        let session;\n\n        if (numSessions !== 0) {\n            // Called when we are done closing a session.  Success or fail\n            const done = function (session) {\n                removeSession(session);\n                if (sessions.length === 0) {\n                    if (videoElement) {\n                        videoElement.removeEventListener('encrypted', eventHandler);\n                        videoElement.setMediaKeys(null).then(function () {\n                            eventBus.trigger(events.TEARDOWN_COMPLETE);\n                        });\n                    } else {\n                        eventBus.trigger(events.TEARDOWN_COMPLETE);\n                    }\n                }\n            };\n            for (let i = 0; i < numSessions; i++) {\n                session = sessions[i];\n                (function (s) {\n                    // Override closed promise resolver\n                    session.session.closed.then(function () {\n                        done(s);\n                    });\n                    // Close the session and handle errors, otherwise promise\n                    // resolver above will be called\n                    closeKeySessionInternal(session).catch(function () {\n                        done(s);\n                    });\n\n                })(session);\n            }\n        } else {\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\n        }\n    }\n\n    function stop() {\n        // Close and remove not usable sessions\n        let session;\n        for (let i = 0; i < sessions.length; i++) {\n            session = sessions[i];\n            if (!session.getUsable()) {\n                closeKeySessionInternal(session).catch(function () {\n                    removeSession(session);\n                });\n            }\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i].initData) {\n                retVal.push(sessions[i].initData);\n            }\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        requestKeySystemAccessInternal(ksConfigurations, 0);\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystemAccess.mksa.createMediaKeys().then(function (mkeys) {\n            keySystem = keySystemAccess.keySystem;\n            mediaKeys = mkeys;\n            if (videoElement) {\n                videoElement.setMediaKeys(mediaKeys).then(function () {\n                    eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n                });\n            } else {\n                eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n            }\n\n        }).catch(function () {\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, {error: 'Error selecting keys system (' + keySystemAccess.keySystem.systemString + ')! Could not create MediaKeys -- TODO'});\n        });\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener('encrypted', eventHandler);\n            if (videoElement.setMediaKeys) {\n                videoElement.setMediaKeys(null);\n            }\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener('encrypted', eventHandler);\n            if (videoElement.setMediaKeys && mediaKeys) {\n                videoElement.setMediaKeys(mediaKeys);\n            }\n        }\n    }\n\n    function setServerCertificate(serverCertificate) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not set server certificate until you have selected a key system');\n        }\n        mediaKeys.setServerCertificate(serverCertificate).then(function () {\n            logger.info('DRM: License server certificate successfully updated.');\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED);\n        }).catch(function (error) {\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED, {error: new DashJSError(ProtectionErrors.SERVER_CERTIFICATE_UPDATED_ERROR_CODE, ProtectionErrors.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE + error.name)});\n        });\n    }\n\n    function createKeySession(initData, protData, sessionType) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        const session = mediaKeys.createSession(sessionType);\n        const sessionToken = createSessionToken(session, initData, sessionType);\n        const ks = this.getKeySystem();\n\n        // Generate initial key request.\n        // keyids type is used for clearkey when keys are provided directly in the protection data and then request to a license server is not needed\n        const dataType = ks.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING && protData && protData.clearkeys ? 'keyids' : 'cenc';\n        session.generateRequest(dataType, initData).then(function () {\n            logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\n        }).catch(function (error) {\n            // TODO: Better error string\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Error generating key request -- ' + error.name)});\n        });\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const session = sessionToken.session;\n\n        // Send our request to the key session\n        if (protectionKeyController.isClearKey(keySystem)) {\n            message = message.toJWK();\n        }\n        session.update(message).catch(function (error) {\n            eventBus.trigger(events.KEY_ERROR, {data: new DashJSError(ProtectionErrors.MEDIA_KEYERR_CODE, 'Error sending update() message! ' + error.name, sessionToken)});\n        });\n    }\n\n    function loadKeySession(sessionID, initData, sessionType) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not load sessions until you have selected a key system');\n        }\n\n        // Check if session Id is not already loaded or loading\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessionID === sessions[i].sessionId) {\n                logger.warn('DRM: Ignoring session ID because we have already seen it!');\n                return;\n            }\n        }\n\n        const session = mediaKeys.createSession(sessionType);\n        const sessionToken = createSessionToken(session, initData, sessionType, sessionID);\n\n        // Load persisted session data into our newly created session object\n        session.load(sessionID).then(function (success) {\n            if (success) {\n                logger.debug('DRM: Session loaded.  SessionID = ' + sessionToken.getSessionID());\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\n            } else {\n                removeSession(sessionToken);\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session! Invalid Session ID (' + sessionID + ')')});\n            }\n        }).catch(function (error) {\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session (' + sessionID + ')! ' + error.name)});\n        });\n    }\n\n    function removeKeySession(sessionToken) {\n        const session = sessionToken.session;\n\n        session.remove().then(function () {\n            logger.debug('DRM: Session removed.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {data: sessionToken.getSessionID()});\n        }, function (error) {\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {data: null, error: 'Error removing session (' + sessionToken.getSessionID() + '). ' + error.name});\n\n        });\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the key session\n        closeKeySessionInternal(sessionToken).catch(function (error) {\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {data: null, error: 'Error closing session (' + sessionToken.getSessionID() + ') ' + error.name});\n        });\n    }\n\n    function requestKeySystemAccessInternal(ksConfigurations, idx) {\n\n        if (navigator.requestMediaKeySystemAccess === undefined ||\n            typeof navigator.requestMediaKeySystemAccess !== 'function') {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Insecure origins are not allowed'});\n            return;\n        }\n\n        (function (i) {\n            const keySystem = ksConfigurations[i].ks;\n            const configs = ksConfigurations[i].configs;\n            let systemString = keySystem.systemString;\n\n            // PATCH to support persistent licenses on Edge browser (see issue #2658)\n            if (systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING && configs[0].persistentState === 'required') {\n                systemString += '.recommendation';\n            }\n\n            navigator.requestMediaKeySystemAccess(systemString, configs).then(function (mediaKeySystemAccess) {\n                // Chrome 40 does not currently implement MediaKeySystemAccess.getConfiguration()\n                const configuration = (typeof mediaKeySystemAccess.getConfiguration === 'function') ?\n                        mediaKeySystemAccess.getConfiguration() : null;\n                const keySystemAccess = new KeySystemAccess(keySystem, configuration);\n                keySystemAccess.mksa = mediaKeySystemAccess;\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {data: keySystemAccess});\n\n            }).catch(function (error) {\n                if (++i < ksConfigurations.length) {\n                    requestKeySystemAccessInternal(ksConfigurations, i);\n                } else {\n                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied! ' + error.message});\n                }\n            });\n        })(idx);\n    }\n\n    function closeKeySessionInternal(sessionToken) {\n        const session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener('keystatuseschange', sessionToken);\n        session.removeEventListener('message', sessionToken);\n\n        // Send our request to the key session\n        return session.close();\n    }\n\n    // This is our main event handler for all desired HTMLMediaElement events\n    // related to EME.  These events are translated into our API-independent\n    // versions of the same events\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case 'encrypted':\n                        if (event.initData) {\n                            let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(events.NEED_KEY, {key: new NeedKey(initData, event.initDataType)});\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n    function removeSession(token) {\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === token) {\n                sessions.splice(i,1);\n                break;\n            }\n        }\n    }\n\n    function parseKeyStatus(args) {\n        // Edge and Chrome implement different version of keystatues, param are not on same order\n        let status, keyId;\n        if (args && args.length > 0) {\n            if (args[0]) {\n                if (typeof args[0] === 'string') {\n                    status = args[0];\n                } else {\n                    keyId = args[0];\n                }\n            }\n\n            if (args[1]) {\n                if (typeof args[1] === 'string') {\n                    status = args[1];\n                } else {\n                    keyId = args[1];\n                }\n            }\n        }\n        return {\n            status: status,\n            keyId: keyId\n        };\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(session, initData, sessionType, sessionID) {\n        const token = { // Implements SessionToken\n            session: session,\n            initData: initData,\n            sessionId: sessionID,\n\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case 'keystatuseschange':\n                        eventBus.trigger(events.KEY_STATUSES_CHANGED, {data: this});\n                        event.target.keyStatuses.forEach(function () {\n                            let keyStatus = parseKeyStatus(arguments);\n                            switch (keyStatus.status) {\n                                case 'expired':\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, {error: new DashJSError(ProtectionErrors.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE, ProtectionErrors.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE)});\n                                    break;\n                                default:\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, keyStatus);\n                                    break;\n                            }\n                        });\n                        break;\n\n                    case 'message':\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(this, message, undefined, event.messageType)});\n                        break;\n                }\n            },\n\n            getSessionID: function () {\n                return session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return session.expiration;\n            },\n\n            getKeyStatuses: function () {\n                return session.keyStatuses;\n            },\n\n            getUsable: function () {\n                let usable  = false;\n                session.keyStatuses.forEach(function () {\n                    let keyStatus = parseKeyStatus(arguments);\n                    if (keyStatus.status === 'usable') {\n                        usable = true;\n                    }\n                });\n                return usable;\n            },\n\n            getSessionType: function () {\n                return sessionType;\n            }\n        };\n\n        // Add all event listeners\n        session.addEventListener('keystatuseschange', token);\n        session.addEventListener('message', token);\n\n        // Register callback for session closed Promise\n        session.closed.then(function () {\n            removeSession(token);\n            logger.debug('DRM: Session closed.  SessionID = ' + token.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {data: token.getSessionID()});\n        });\n\n        // Add to our session list\n        sessions.push(token);\n\n        return token;\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        setServerCertificate: setServerCertificate,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        stop: stop,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_21Jan2015.__dashjs_factory_name = 'ProtectionModel_21Jan2015';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_21Jan2015); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.\n *\n * Implemented by Internet Explorer 11 (Windows 8.1)\n *\n * @implements ProtectionModel\n * @class\n */\n\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport DashJSError from '../../vo/DashJSError';\nimport ProtectionErrors from '../errors/ProtectionErrors';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\n\nfunction ProtectionModel_3Feb2014(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n    const api = config.api;\n\n    let instance,\n        logger,\n        videoElement,\n        keySystem,\n        mediaKeys,\n        keySystemAccess,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        videoElement = null;\n        keySystem = null;\n        mediaKeys = null;\n        keySystemAccess = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        try {\n            for (let i = 0; i < sessions.length; i++) {\n                closeKeySession(sessions[i]);\n            }\n            if (videoElement) {\n                videoElement.removeEventListener(api.needkey, eventHandler);\n            }\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\n        } catch (error) {\n            eventBus.trigger(events.TEARDOWN_COMPLETE, { error: 'Error tearing down key sessions and MediaKeys! -- ' + error.message });\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\n            const configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                const audios = configs[configIdx].audioCapabilities;\n                const videos = configs[configIdx].videoCapabilities;\n\n                // Look for supported audio container/codecs\n                if (audios && audios.length !== 0) {\n                    supportedAudio = []; // Indicates that we have a requested audio config\n                    for (let audioIdx = 0; audioIdx < audios.length; audioIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType)) {\n                            supportedAudio.push(audios[audioIdx]);\n                        }\n                    }\n                }\n\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType)) {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! -- No valid audio/video content configurations detected!' });\n        }\n    }\n\n    function selectKeySystem(ksAccess) {\n        try {\n            mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);\n            keySystem = ksAccess.keySystem;\n            keySystemAccess = ksAccess;\n            if (videoElement) {\n                setMediaKeys();\n            }\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n        } catch (error) {\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, { error: 'Error selecting keys system (' + keySystem.systemString + ')! Could not create MediaKeys -- TODO' });\n        }\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener(api.needkey, eventHandler);\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.needkey, eventHandler);\n            if (mediaKeys) {\n                setMediaKeys();\n            }\n        }\n    }\n\n    function createKeySession(initData, protData, sessionType, cdmData) {\n        if (!keySystem || !mediaKeys || !keySystemAccess) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Use the first video capability for the contentType.\n        // TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format\n\n        // If player is trying to playback Audio only stream - don't error out.\n        let capabilities = null;\n\n        if (keySystemAccess.ksConfiguration.videoCapabilities && keySystemAccess.ksConfiguration.videoCapabilities.length > 0) {\n            capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0];\n        }\n\n        if (capabilities === null && keySystemAccess.ksConfiguration.audioCapabilities && keySystemAccess.ksConfiguration.audioCapabilities.length > 0) {\n            capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0];\n        }\n\n        if (capabilities === null) {\n            throw new Error('Can not create sessions for unknown content types.');\n        }\n\n        const contentType = capabilities.contentType;\n        const session = mediaKeys.createSession(contentType, new Uint8Array(initData), cdmData ? new Uint8Array(cdmData) : null);\n        const sessionToken = createSessionToken(session, initData);\n\n        // Add all event listeners\n        session.addEventListener(api.error, sessionToken);\n        session.addEventListener(api.message, sessionToken);\n        session.addEventListener(api.ready, sessionToken);\n        session.addEventListener(api.close, sessionToken);\n\n        // Add to our session list\n        sessions.push(sessionToken);\n        logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n        eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const session = sessionToken.session;\n\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the key session\n            session.update(new Uint8Array(message));\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            session.update(new Uint8Array(message.toJWK()));\n        }\n    }\n\n    /**\n     * Close the given session and release all associated keys.  Following\n     * this call, the sessionToken becomes invalid\n     *\n     * @param {Object} sessionToken - the session token\n     */\n    function closeKeySession(sessionToken) {\n        const session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener(api.error, sessionToken);\n        session.removeEventListener(api.message, sessionToken);\n        session.removeEventListener(api.ready, sessionToken);\n        session.removeEventListener(api.close, sessionToken);\n\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === sessionToken) {\n                sessions.splice(i, 1);\n                break;\n            }\n        }\n\n        // Send our request to the key session\n        session[api.release]();\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case api.needkey:\n                        if (event.initData) {\n                            const initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, 'cenc') });\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    // IE11 does not let you set MediaKeys until it has entered a certain\n    // readyState, so we need this logic to ensure we don't set the keys\n    // too early\n    function setMediaKeys() {\n        let boundDoSetKeys = null;\n        const doSetKeys = function () {\n            videoElement.removeEventListener('loadedmetadata', boundDoSetKeys);\n            videoElement[api.setMediaKeys](mediaKeys);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        };\n        if (videoElement.readyState >= 1) {\n            doSetKeys();\n        } else {\n            boundDoSetKeys = doSetKeys.bind(this);\n            videoElement.addEventListener('loadedmetadata', boundDoSetKeys);\n        }\n\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(keySession, initData) {\n        return {\n            // Implements SessionToken\n            session: keySession,\n            initData: initData,\n\n            getSessionID: function () {\n                return this.session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return NaN;\n            },\n\n            getSessionType: function () {\n                return 'temporary';\n            },\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case api.error:\n                        let errorStr = 'KeyError'; // TODO: Make better string from event\n                        eventBus.trigger(events.KEY_ERROR, { data: new DashJSError(ProtectionErrors.MEDIA_KEYERR_CODE, errorStr, this) });\n                        break;\n                    case api.message:\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, event.destinationURL) });\n                        break;\n                    case api.ready:\n                        logger.debug('DRM: Key added.');\n                        eventBus.trigger(events.KEY_ADDED);\n                        break;\n\n                    case api.close:\n                        logger.debug('DRM: Session closed.  SessionID = ' + this.getSessionID());\n                        eventBus.trigger(events.KEY_SESSION_CLOSED, { data: this.getSessionID() });\n                        break;\n                }\n            }\n        };\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        stop: reset,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_3Feb2014.__dashjs_factory_name = 'ProtectionModel_3Feb2014';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_3Feb2014); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CableLabs ClearKey license server implementation\n *\n * For testing purposes and evaluating potential uses for ClearKey, we have developed\n * a dirt-simple API for requesting ClearKey licenses from a remote server.\n *\n * @implements LicenseServer\n * @class\n */\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\n\nfunction ClearKey() {\n\n    let instance;\n\n    function getServerURLFromMessage(url, message/*, messageType*/) {\n        // Build ClearKey server query string\n        const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n        url += '/?';\n        for (let i = 0; i < jsonMsg.kids.length; i++) {\n            url += jsonMsg.kids[i] + '&';\n        }\n        url = url.substring(0, url.length - 1);\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'GET';\n    }\n\n    function getResponseType(/*keySystemStr*/) {\n        return 'json';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        if (!serverResponse.hasOwnProperty('keys')) {\n            return null;\n        }\n        let keyPairs = [];\n        for (let i = 0; i < serverResponse.keys.length; i++) {\n            let keypair = serverResponse.keys[i];\n            let keyid = keypair.kid.replace(/=/g, '');\n            let key = keypair.k.replace(/=/g, '');\n\n            keyPairs.push(new KeyPair(keyid, key));\n        }\n        return new ClearKeyKeySet(keyPairs);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nClearKey.__dashjs_factory_name = 'ClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(ClearKey); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CastLabs DRMToday License Server implementation\n *\n * @implements LicenseServer\n * @class\n */\n\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nfunction DRMToday(config) {\n\n    config = config || {};\n    const BASE64 = config.BASE64;\n\n    const keySystems = {};\n    keySystems[ProtectionConstants.WIDEVINE_KEYSTEM_STRING] = {\n        responseType: 'json',\n        getLicenseMessage: function (response) {\n            return BASE64.decodeArray(response.license);\n        },\n        getErrorResponse: function (response) {\n            return response;\n        }\n    };\n    keySystems[ProtectionConstants.PLAYREADY_KEYSTEM_STRING] = {\n        responseType: 'arraybuffer',\n        getLicenseMessage: function (response) {\n            return response;\n        },\n        getErrorResponse: function (response) {\n            return String.fromCharCode.apply(null, new Uint8Array(response));\n        }\n    };\n\n    let instance;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].responseType;\n    }\n\n    function getLicenseMessage(serverResponse, keySystemStr/*, messageType*/) {\n        checkConfig();\n        return keySystems[keySystemStr].getLicenseMessage(serverResponse);\n    }\n\n    function getErrorResponse(serverResponse, keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].getErrorResponse(serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nDRMToday.__dashjs_factory_name = 'DRMToday';\nexport default dashjs.FactoryMaker.getSingletonFactory(DRMToday); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global escape: true */\n\n/**\n * Microsoft PlayReady Test License Server\n *\n * For testing content that uses the PlayReady test server at\n *\n * @implements LicenseServer\n * @class\n * @ignore\n */\n\nfunction PlayReady() {\n\n    let instance;\n\n    const soap = 'http://schemas.xmlsoap.org/soap/envelope/';\n\n    function uintToString(arrayBuffer) {\n        const encodedString = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\n        const decodedString = decodeURIComponent(escape(encodedString));\n        return decodedString;\n    }\n\n    function parseServerResponse(serverResponse) {\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n\n            if (fault) {\n                return null;\n            }\n        }\n        return serverResponse;\n    }\n\n    function parseErrorResponse(serverResponse) {\n        let faultstring = '';\n        let statusCode = '';\n        let message = '';\n        let idStart = -1;\n        let idEnd = -1;\n\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n            const detail = fault ? fault.getElementsByTagName('detail')[0] : null;\n            const exception = detail ? detail.getElementsByTagName('Exception')[0] : null;\n            let node = null;\n\n            if (fault === null) {\n                return stringResponse;\n            }\n\n            node = fault.getElementsByTagName('faultstring')[0].firstChild;\n            faultstring = node ? node.nodeValue : null;\n\n            if (exception !== null) {\n                node = exception.getElementsByTagName('StatusCode')[0];\n                statusCode = node ? node.firstChild.nodeValue : null;\n                node = exception.getElementsByTagName('Message')[0];\n                message = node ? node.firstChild.nodeValue : null;\n                idStart = message ? message.lastIndexOf('[') + 1 : -1;\n                idEnd = message ? message.indexOf(']') : -1;\n                message = message ? message.substring(idStart, idEnd) : '';\n            }\n        }\n\n        let errorString = `code: ${statusCode}, name: ${faultstring}`;\n        if (message) {\n            errorString += `, message: ${message}`;\n        }\n\n        return errorString;\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return parseServerResponse.call(this, serverResponse);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return parseErrorResponse.call(this, serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nPlayReady.__dashjs_factory_name = 'PlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(PlayReady); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @ignore\n */\nfunction Widevine() {\n\n    let instance;\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return serverResponse;\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nWidevine.__dashjs_factory_name = 'Widevine';\nexport default dashjs.FactoryMaker.getSingletonFactory(Widevine); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc A collection of ClearKey encryption keys with an (optional) associated\n *  type\n * @ignore\n */\nclass ClearKeyKeySet {\n    /**\n     * @param {Array.<KeyPair>} keyPairs\n     * @param {string} type the type of keys in this set.  One of either 'persistent'\n     * or 'temporary'.  Can also be null or undefined.\n     * @class\n     * @ignore\n     */\n    constructor(keyPairs, type) {\n        if (type && type !== 'persistent' && type !== 'temporary')\n            throw new Error('Invalid ClearKey key set type!  Must be one of \\'persistent\\' or \\'temporary\\'');\n        this.keyPairs = keyPairs;\n        this.type = type;\n    }\n\n    /**\n     * Convert this key set to its JSON Web Key (JWK) representation\n     *\n     * @return {ArrayBuffer} JWK object UTF-8 encoded as ArrayBuffer\n     */\n    toJWK() {\n        let i;\n        let numKeys = this.keyPairs.length;\n        let jwk = {keys: []};\n\n        for (i = 0; i < numKeys; i++) {\n            let key = {\n                kty: 'oct',\n                alg: 'A128KW',\n                kid: this.keyPairs[i].keyID,\n                k: this.keyPairs[i].key\n            };\n            jwk.keys.push(key);\n        }\n        if (this.type) {\n            jwk.type = this.type;\n        }\n        let jwkString = JSON.stringify(jwk);\n        const len = jwkString.length;\n\n        // Convert JSON string to ArrayBuffer\n        let buf = new ArrayBuffer(len);\n        let bView = new Uint8Array(buf);\n        for (i = 0; i < len; i++)\n            bView[i] = jwkString.charCodeAt(i);\n        return buf;\n    }\n}\n\nexport default ClearKeyKeySet;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc EME-independent KeyMessage\n * @ignore\n */\nclass KeyMessage {\n    /**\n     * @param {SessionToken} sessionToken the session\n     * to which the key message is associated\n     * @param {ArrayBuffer} message the key message\n     * @param {string} defaultURL license acquisition URL provided by the CDM\n     * @param {string} messageType Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @class\n     */\n    constructor(sessionToken, message, defaultURL, messageType) {\n        this.sessionToken = sessionToken;\n        this.message = message;\n        this.defaultURL = defaultURL;\n        this.messageType = messageType ? messageType : 'license-request';\n    }\n}\n\nexport default KeyMessage;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Represents a 128-bit keyID and 128-bit encryption key\n * @ignore\n */\nclass KeyPair {\n    /**\n     * @param {string} keyID 128-bit key ID, base64 encoded, with no padding\n     * @param {string} key 128-bit encryption key, base64 encoded, with no padding\n     * @class\n     * @ignore\n     */\n    constructor(keyID, key) {\n        this.keyID = keyID;\n        this.key = key;\n    }\n}\n\nexport default KeyPair;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Creates a new key system access token.  Represents a valid key system for\n * given piece of content and key system requirements.  Used to initialize license\n * acquisition operations.\n * @ignore\n */\nclass KeySystemAccess {\n    /**\n     * @param {MediaPlayer.dependencies.protection.KeySystem} keySystem the key system\n     * @param {KeySystemConfiguration} ksConfiguration the\n     * subset of configurations passed to the key system access request that are supported\n     * by this user agent\n     * @class\n     * @ignore\n     */\n    constructor(keySystem, ksConfiguration) {\n        this.keySystem = keySystem;\n        this.ksConfiguration = ksConfiguration;\n    }\n}\n\nexport default KeySystemAccess;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc Represents a set of configurations that describe the capabilities desired for\n *  support by a given CDM\n * @ignore\n */\nclass KeySystemConfiguration {\n    /**\n     * @param {Array.<MediaCapability>} audioCapabilities array of\n     * desired audio capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {Array.<MediaCapability>} videoCapabilities array of\n     * desired video capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {string} distinctiveIdentifier desired use of distinctive identifiers.\n     * One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {string} persistentState desired support for persistent storage of\n     * key systems.  One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {Array.<string>} sessionTypes List of session types that must\n     * be supported by the key system\n     * @class\n     */\n    constructor(audioCapabilities, videoCapabilities, distinctiveIdentifier, persistentState, sessionTypes) {\n        this.initDataTypes = [ 'cenc' ];\n        if (audioCapabilities && audioCapabilities.length) {\n            this.audioCapabilities = audioCapabilities;\n        }\n        if (videoCapabilities && videoCapabilities.length) {\n            this.videoCapabilities = videoCapabilities;\n        }\n        this.distinctiveIdentifier = distinctiveIdentifier;\n        this.persistentState = persistentState;\n        this.sessionTypes = sessionTypes;\n    }\n}\n\nexport default KeySystemConfiguration;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc A media capability\n * @ignore\n */\nclass MediaCapability {\n    /**\n     * @param {string} contentType MIME type and codecs (RFC6386)\n     * @param {string} robustness\n     * @class\n     * @ignore\n     */\n    constructor(contentType, robustness) {\n        this.contentType = contentType;\n        this.robustness = robustness;\n    }\n}\n\nexport default MediaCapability;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc NeedKey\n * @ignore\n */\nclass NeedKey {\n    /**\n     * @param {ArrayBuffer} initData the initialization data\n     * @param {string} initDataType initialization data type\n     * @class\n     */\n    constructor(initData, initDataType) {\n        this.initData = initData;\n        this.initDataType = initDataType;\n    }\n}\n\nexport default NeedKey;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass DashJSError {\n    constructor(code, message, data) {\n        this.code = code || null;\n        this.message = message || null;\n        this.data = data || null;\n    }\n}\n\nexport default DashJSError;"]}