version: 2.1
orbs:
    browser-tools: circleci/browser-tools@1.4.8

executors:
    dashjs-executor:
        working_directory: ~/repo
        docker:
            -   image: cimg/node:20.11.1

commands:
    dependencies_setup:
        steps:
            -   restore_cache:
                    keys:
                        - v1-dependencies-{{ checksum "package.json" }}
                        # fallback to using the latest cache if no exact match is found
                        - v1-dependencies-
            -   run:
                    name: Install dependencies
                    command: npm install
            -   save_cache:
                    paths:
                        - node_modules
                    key: v1-dependencies-{{ checksum "package.json" }}

    functional_precondition:
        steps:
            -   run:
                    name: Check if preconditions are met for functional tests
                    command: |
                        if [ -z "$BROWSERSTACK_ACCESS_KEY" ]; then
                            echo "BrowserStack not configured, functional tests will not be executed."
                            circleci-agent step halt
                        fi

    functional_test_setup:
        steps:
            -   run:
                    name: Download the browserstack binary file to create a tunnel
                    command: wget "https://www.browserstack.com/browserstack-local/BrowserStackLocal-linux-x64.zip"
            -   run:
                    name: Unzip the browserstack binary file
                    command: unzip BrowserStackLocal-linux-x64.zip
            -   run:
                    name: Run browserstack with provided access key
                    command: ./BrowserStackLocal $BROWSERSTACK_ACCESS_KEY
                    background: true

    run_testbuild:
        steps:
            - browser-tools/install-browser-tools
            -   run:
                    name: Build and run unit tests
                    command: |
                        npm run build

    process_test_results: # CircleCI can not handle NaN values so we replace them with 0
        steps:
            -   run:
                    name: Install xmlstarlet
                    when: always
                    command: sudo apt-get -y update && sudo apt-get -y install xmlstarlet
            -   run:
                    name: Modify XML files recursively and copy to another folder
                    when: always
                    command: |
                        mkdir test/functional/results/test/karma/junit/adjusted
                        cd test/functional/results/test/karma/junit
                        for file in *.xml; do
                        [ -f "$file" ] || continue
                        xmlstarlet ed -L -u '//testcase[@time="NaN"]/@time' -v '0' "$file"
                        cp "$file" adjusted/$file
                        done
            -   store_test_results:
                    path: test/functional/results/test/karma/junit/adjusted

    functional_steps:
        steps:
            - functional_precondition
            - checkout
            - dependencies_setup
            - run_testbuild
            - functional_test_setup

    run_test_suite:
        parameters:
            streamsfile:
                default: "single"
                type: string
            configfile:
                default: "browserstack"
                type: string
        steps:
            -   run:
                    name: Run functional tests <<parameters.configfile>> - <<parameters.streamsfile>>
                    when: always
                    command:
                        node_modules/karma/bin/karma start test/functional/config/karma.functional.conf.cjs --configfile=<<parameters.configfile>> --streamsfile=<<parameters.streamsfile>>
    build_samples:
        # parameters:
        #     samples:
        #         default: "network-interceptor"
        #         type: string
        steps:
            -   run:
                    name: Install dependencies and build samples
                    command: |
                        for sample in "${SAMPLES}"; do
                            echo "Build sample $sample"
                            cd samples/$sample
                            npm install
                            npm run build
                        done

jobs:
    build-and-unit-test:
        environment:
            SAMPLES: "network-interceptor"
        executor: dashjs-executor
        steps:
            - checkout
            - dependencies_setup
            - run_testbuild
            - build_samples

    merge-build-and-unit-test:
        executor: dashjs-executor
        steps:
            - checkout
            -   run:
                    name: Merge into development virtually
                    command: |
                        git config --global user.email "circleci@example.com"
                        git config --global user.name "CircleCI"
                        git checkout development
                        git merge --no-edit --no-ff $CIRCLE_BRANCH
            - dependencies_setup
            - run_testbuild

    functional-tests-smoke:
        executor: dashjs-executor
        steps:
            - functional_precondition
            - checkout
            -   run:
                    name: Virtual merge into development branch
                    command: |
                        if [ "${CIRCLE_BRANCH}" = "development" ]; then
                            echo "On development branch already, no merge needed"
                        else
                            git config --global user.email "circleci@example.com"
                            git config --global user.name "CircleCI"
                            git checkout development
                            git merge --no-edit --no-ff $CIRCLE_BRANCH
                        fi
            - dependencies_setup
            - run_testbuild
            - functional_test_setup
            -   run_test_suite:
                    streamsfile: single
                    configfile: browserstack
            -   run_test_suite:
                    streamsfile: smoke
                    configfile: browserstack
            - process_test_results

    functional-tests-full-part-1:
        executor: dashjs-executor
        steps:
            - functional_steps
            -   run_test_suite:
                    streamsfile: drm_emsg_eptdelta_gaps
                    configfile: browserstack
            - process_test_results

    functional-tests-full-part-2:
        executor: dashjs-executor
        steps:
            - functional_steps
            -   run_test_suite:
                    streamsfile: multiperiod_subtitle_vendor
                    configfile: browserstack
            - process_test_results

    functional-tests-full-part-3:
        executor: dashjs-executor
        steps:
            - functional_steps
            -   run_test_suite:
                    streamsfile: vod_live_lowlatency_mss_multiaudio
                    configfile: browserstack
            - process_test_results

workflows:
    version: 2
    commit-workflow:
        jobs:
            - build-and-unit-test # run unit tests on feature branch
            -   merge-build-and-unit-test: # run unit tests on virtually merged feature branch
                    filters:
                        branches:
                            ignore:
                                - development # skiping redundant job if already on development
            -   functional-tests-smoke:
                    filters:
                        branches:
                            ignore: # as creds are available only for non-forked branches
                                - /pull\/[0-9]+/

    scheduled-workflow:
        triggers:
            -   schedule:
                    cron: "0 0 * * 0,3"
                    filters:
                        branches:
                            only:
                                - development
        jobs:
            - functional-tests-full-part-1
            - functional-tests-full-part-2
            - functional-tests-full-part-3

