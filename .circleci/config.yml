version: 2.1

executors:
  dashjs-executor:
    working_directory: ~/repo
    docker:
      - image: cimg/node:10.20.1

commands:
    dependencies_setup:
        steps:
            - restore_cache:
                keys:
                    - v1-dependencies-{{ checksum "package.json" }}
                    # fallback to using the latest cache if no exact match is found
                    - v1-dependencies-
            - run:
                name: Install dependencies
                command: npm install
            - save_cache:
                paths:
                    - node_modules
                key: v1-dependencies-{{ checksum "package.json" }}

    functional_precondition:
        steps:
            - run:
                name: Check if preconditions are met for functional tests
                command: |
                    if [ -z "$BROWSERSTACK_ACCESS_KEY" ]; then
                        echo "BrowserStack not configured, functional tests will not be executed."
                        circleci-agent step halt
                    fi

    functional_test_setup:
        steps:
            - run:
                name: Download the browserstack binary file to create a tunnel
                command: wget "https://www.browserstack.com/browserstack-local/BrowserStackLocal-linux-x64.zip"
            - run:
                name: Unzip the browserstack binary file
                command: unzip BrowserStackLocal-linux-x64.zip
            - run:
                name: Run browserstack with provided access key
                command: ./BrowserStackLocal $BROWSERSTACK_ACCESS_KEY
                background: true

    build_unit_test_steps:
        steps:
            - run:
                name: Build and run unit tests
                command: npm run build

jobs:
    build-and-unit-test:
        executor: dashjs-executor
        steps:
            - checkout
            - dependencies_setup
            - build_unit_test_steps
            - deploy:
                name: Deploy
                command: |
                    if [ "${CIRCLE_BRANCH}" = "development" ] && [ -n "$DEPLOY_HOST" ] && [ -n "$DEPLOY_USER" ] && [ -n "$DEPLOY_PASSWORD" ]; then
                        sudo npm install -g grunt-cli
                        grunt deploy --git-commit=$CIRCLE_SHA1 --ftp-host=$DEPLOY_HOST --ftp-user=$DEPLOY_USER --ftp-pass=$DEPLOY_PASSWORD
                    else
                        echo "Not on development branch or deploy not configured. Dry run only, nothing will be deployed."
                    fi

    merge-build-and-unit-test:
        executor: dashjs-executor
        steps:
            - checkout
            - run:
                name: Merge into development virtually
                command: |
                    git config --global user.email "circleci@example.com"
                    git config --global user.name "CircleCI"
                    git checkout development
                    git merge --no-edit --no-ff $CIRCLE_BRANCH
            - dependencies_setup
            - build_unit_test_steps

    functional-tests-smoke:
        executor: dashjs-executor
        steps:
            - functional_precondition
            - checkout
            - run:
                name: Virtual merge into development branch
                command: |
                    if [ "${CIRCLE_BRANCH}" = "development" ]; then
                        echo "On development branch already, no merge needed"
                    else
                        git config --global user.email "circleci@example.com"
                        git config --global user.name "CircleCI"
                        git checkout development
                        git merge --no-edit --no-ff $CIRCLE_BRANCH
                    fi
            - dependencies_setup
            - build_unit_test_steps
            - functional_test_setup
            - run:
                name: Run functional tests for one vector (chrome / https)
                command:
                    node test/functional/runTests.js --selenium=remote --reporters=junit --app=remote --browsers=chrome --protocol=https --source=./test/functional/config/singleVector.json
            - run:
                name: Run functional tests for smoke vectors (chrome / https)
                command:
                    node test/functional/runTests.js --selenium=remote --reporters=junit --app=remote --browsers=chrome --protocol=https --source=./test/functional/config/smokeVectors.json
            - store_test_results:
                path: test/functional/reports

    functional-tests-all:
        executor: dashjs-executor
        steps:
            - functional_precondition
            - checkout
            - dependencies_setup
            - build_unit_test_steps
            - functional_test_setup
            - run:
                name: Run functional tests (chrome / https)
                command:
                    node test/functional/runTests.js --selenium=remote --reporters=junit --app=remote --browsers=chrome --protocol=https
            - run:
                name: Run functional tests (chrome / http)
                when: always # run tests even if some previous tests failed
                command:
                    node test/functional/runTests.js --selenium=remote --reporters=junit --app=remote --browsers=chrome --protocol=http
            - store_test_results:
                path: test/functional/reports

workflows:
    version: 2
    commit-workflow:
        jobs:
            - build-and-unit-test # run unit tests on feature branch
            - merge-build-and-unit-test:  # run unit tests on virtually merged feature branch
                filters:
                    branches:
                        ignore:
                            - development # skiping redundant job if already on development
            - functional-tests-smoke:
                filters:
                    branches:
                        ignore: # as creds are available only for non-forked branches
                            - /pull\/[0-9]+/

    scheduled-workflow:
        triggers:
            - schedule:
                cron: "0 0 * * 0"
                filters:
                    branches:
                        only:
                            - development
        jobs:
            - functional-tests-all

