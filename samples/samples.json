[
    {
        "section": "Getting Started",
        "active": true,
        "samples": [
            {
                "title": "Auto load single video src",
                "description": "The simplest means of using a dash.js player in a web page. The mpd src is specified within the @src attribute of the video element. The \"auto-load\" refers to the fact that this page calls the Dash.createAll() method onLoad in order to automatically convert all video elements of class 'dashjs-player' in to a functioning DASH player.",
                "href": "getting-started/auto-load-single-video-src.html",
                "width": "25rem"
            },
            {
                "title": "Auto load single video",
                "description": "The mpd source is specified within the child Source element of the video element. Note that the Source@type attribute must be set to \"application/dash+xml\" in order for it to be automatically used.",
                "href": "getting-started/auto-load-single-video.html"
            },
            {
                "title": "Auto load single video with reference",
                "description": "While the Dash.CreateAll() method is handy for automated instantiation within a page, the Dash.create() method takes three optional parameters to give you more control. This example illustrates calling Dash.create() in four different ways. The first simply specifies a target video element with a child source element. The second specifies a target video element with a src attribute. The third specifies the video element and a dynamically generated source object. The fourth specifies the video element, a source object and a custom DashContext object.",
                "href": "getting-started/auto-load-single-video-with-reference.html",
                "width": "30rem"
            },
            {
                "title": "Auto load multi video",
                "description": "This example shows how to auto-embed multiple instances of dash.js players in a page. To make it more difficult, one of the available video elements specifies a non-DASH source.",
                "href": "getting-started/auto-load-multi-video.html",
                "width": "25rem"
            },
            {
                "title": "Manual load single video",
                "description": "A sample showing how to load a single video",
                "href": "getting-started/manual-load-single-video.html"
            },
            {
                "title": "Manual load with custom settings",
                "description": "A sample showing how to load a video using custom settings",
                "href": "getting-started/manual-load-with-custom-settings.html",
                "width": "30rem"
            },
            {
                "title": "Using the Control Bar",
                "description": "This example shows how to add and configure the Akamai control bar with dash.js player.",
                "href": "control/controlbar.html",
                "width": "25rem"
            },
            {
                "title": "Listening to events",
                "description": "Example showing how to listen to events raised by dash.js.",
                "href": "getting-started/listening-to-events.html"
            },
            {
                "title": "Log levels",
                "description": "This examples shows how to configure dash.js logging levels.",
                "href": "control/logging.html",
                "width": "30rem"
            }
        ]
    },
    {
        "section": "Live",
        "samples": [
            {
                "title": "Live delay comparison custom manifest",
                "description": "Example showing how to use the two MediaPlayer APIS which control live delay: setLiveDelay and setLiveDelayFragmentCount.",
                "href": "live-streaming/live-delay-comparison-custom-manifest.html"
            },
            {
                "title": "Live delay comparison using fragment count",
                "description": "Example showing the combined effects of segment duration and the setLiveDelayFragmentCount MediaPlayer method on the latency of live stream playback",
                "href": "live-streaming/live-delay-comparison-using-fragmentCount.html"
            },
            {
                "title": "Live delay comparison using setLiveDelay",
                "description": "Example showing the combined effects of segment duration and the setLiveDelay MediaPlayer method on the latency of live stream playback.",
                "href": "live-streaming/live-delay-comparison-using-setLiveDelay.html"
            },
            {
                "title": "Low latency",
                "description": "Example showing how to use dash.js to play low latency streams.",
                "href": "low-latency/index.html"
            }
        ]
    },
    {
        "section": "MSS",
        "samples": [
            {
                "title": "Microsoft Smooth Streaming",
                "description": "Example showing how to use dash.js to play Microsoft Smooth Streaming streams.",
                "href": "smooth-streaming/mss.html"
            }
        ]
    },
    {
        "section": "Thumbnails",
        "samples": [
            {
                "title": "Thumbnails",
                "description": "Example showing how to use streams with thumbnails representations.",
                "href": "thumbnails/thumbnails.html"
            }
        ]
    },
    {
        "section": "DRM",
        "samples": [
            {
                "title": "Widevine",
                "description": "This example shows how to use dash.js to play streams with Widevine DRM protection.",
                "href": "drm/widevine.html"
            },
            {
                "title": "PlayReady",
                "description": "This example shows how to use dash.js to play streams with PlayReady DRM protection (Windows only).",
                "href": "drm/playready.html"
            },
            {
                "title": "ClearKey",
                "description": "This example shows how to use dash.js to play streams with ClearKey DRM protection.",
                "href": "drm/clearkey.html"
            }
        ]
    },
    {
        "section": "Multi Period",
        "samples": [
            {
                "title": "Play streams with two periods",
                "description": "Example showing how dash.js handles streams with two periods.",
                "href": "multiperiod/index.html"
            }
        ]
    },
    {
        "section": "Audio only",
        "samples": [
            {
                "title": "Only audio stream",
                "description": "This example shows how to play audio-only streams in dash.js.",
                "href": "audio-only/index.html"
            }
        ]
    },
    {
        "section": "Captioning",
        "samples": [
            {
                "title": "Caption VTT",
                "description": "This example shows how content with VTT captions can be played back by the dash.js player. First captions appear at the 15s mark.",
                "href": "captioning/caption_vtt.html"
            },
            {
                "title": "Multi Track Captions",
                "description": "Example showing content with multiple timed text tracks.",
                "href": "captioning/multi-track-captions.html"
            },
            {
                "title": "TTML EBU timed text tracks",
                "description": "Example showing content with TTML EBU timed text tracks.",
                "href": "captioning/ttml-ebutt-sample.html"
            }
        ]
    },
    {
        "section": "Ad Insertion",
        "samples": [
            {
                "title": "Ad insertion",
                "description": "Demonstration of different implementation approaches for advert insertion, specifically inband, inline and X-Link onLoad. Provided by Fraunhofer Fokus.",
                "href": "ad-insertion/index.html"
            }
        ]
    },
    {
        "section": "Preload",
        "samples": [
            {
                "title": "Preload video",
                "description": "This example shows how to use preload feature of dash.js, which allows to initialize streaming and starts downloading the content before the player is attached to a video element.",
                "href": "getting-started/pre-load-video.html"
            }
        ]
    },
    {
        "section": "Advanced",
        "samples": [
            {
                "title": "Monitoring the stream",
                "description": "This example shows how to monitor metrics of the streams played by dash.js.",
                "href": "advanced/monitoring.html"
            },
            {
                "title": "Dash.js settings",
                "description": "This example shows how to deal with dash.js settings.",
                "href": "advanced/settings.html"
            },
            {
                "title": "Listening to SCTE-EMSG Events",
                "description": "Example showing how to listen to SCTE EMSG events raised by dash.js.",
                "href": "advanced/listening-to-SCTE-EMSG-events.html"
            },
            {
                "title": "Autoplay Browser policy",
                "description": "This sample shows how to deal with autoplay browsers policy. It uses an event listener to detect when auto playback is interrupted by the browser and how to recover from this situation muting audio.",
                "href": "advanced/auto-play-browser-policy.html"
            },
            {
                "title": "Custom ABR Rules",
                "description": "Example showing how to create and define custom ABR rules in dash.js.",
                "href": "advanced/abr/index.html"
            },
            {
                "title": "Extending Dash.js",
                "description": "This sample shows how to use dash.js extend mechanism to add custom HTTP headers and modify URL's of the requests done by the player.",
                "href": "advanced/extend.html"
            },
            {
                "title": "CMCD Reporting",
                "description": "This sample shows how to use dash.js in order to enhance requests to the CDN with Common Media Client Data (CMCD - CTA 5005).",
                "href": "advanced/cmcd.html"
            }
        ]
    }
]
