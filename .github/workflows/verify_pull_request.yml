name: verify_pull_request

#on:
#    pull_request:
#        branches:
#           - 'development'

on:
    push:
        branches:
            - 'feature/migrateCircleCi'

jobs:
    merge_build_and_unit_test:
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0  # Fetch all history for merging
            -   name: Merge to development
                run: |
                    git config --global user.name "GitHub Action"
                    git config --global user.email "action@github.com"
                    git checkout development
                    git merge ${{ github.head_ref }}  # Merge the pull request branch
            -   name: Setup node
                uses: actions/setup-node@v4
                with:
                    node-version: 'latest'
                    cache: 'npm'
            -   name: Cache node modules
                id: cache-npm
                uses: actions/cache@v3
                env:
                    cache-name: cache-node-modules
                with:
                    # npm cache files are stored in `~/.npm` on Linux/macOS
                    path: ~/.npm
                    key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
                    restore-keys: |
                        ${{ runner.os }}-build-${{ env.cache-name }}-
                        ${{ runner.os }}-build-
                        ${{ runner.os }}-

            -   if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
                name: List the state of node modules
                continue-on-error: true
                run: npm list
            -   name: Run npm install
                run: npm install
            -   name: Run tsc
                run: tsc
            -   name: Run linting check
                run: npm run lint
            -   name: Run unit tests
                run: npm run test
            -   name: Run webpack build
                run: npm run webpack-build

    run_functional_test_single_stream_lambdatest:
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0  # Fetch all history for merging
            -   name: Merge to development
                run: |
                    git config --global user.name "GitHub Action"
                    git config --global user.email "action@github.com"
                    git checkout development
                    git merge ${{ github.head_ref }}  # Merge the pull request branch
            -   name: Cache node modules
                id: cache-npm
                uses: actions/cache@v3
                env:
                    cache-name: cache-node-modules
                with:
                    # npm cache files are stored in `~/.npm` on Linux/macOS
                    path: ~/.npm
                    key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
                    restore-keys: |
                        ${{ runner.os }}-build-${{ env.cache-name }}-
                        ${{ runner.os }}-build-
                        ${{ runner.os }}-

            -   if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
                name: List the state of node modules
                continue-on-error: true
                run: npm list
            -   name: Run npm install
                run: npm install
            -   name: Run webpack build
                run: npm run webpack-build
            -   name: Start Tunnel
                uses: LambdaTest/LambdaTest-tunnel-action@v2
                id: tunnel
                with:
                    user: ${{ secrets.LT_USERNAME }}
                    accessKey: ${{ secrets.LT_ACCESS_KEY }}
                    tunnelName: "dashjs tunnel"
            -   name: Run functional tests for a single vector on Lambdatest
                run: node_modules/karma/bin/karma start test/functional/config/karma.functional.conf.cjs --configfile=lambdatest --streamsfile=single


